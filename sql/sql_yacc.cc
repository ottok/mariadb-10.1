/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:339  */

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_show.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)                  \
  if (!(A))                                      \
  {                                              \
    my_parse_error(thd, ER_SYNTAX_ERROR);        \
    MYSQL_YYABORT;                               \
  }

#define my_yyabort_error(A)                      \
  do { my_error A; MYSQL_YYABORT; } while(0)

#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

static void my_parse_error_intern(THD *thd, const char *err_text,
                                  const char *yytext)
{
  Lex_input_stream *lip= &thd->m_parser_state->m_lip;
  if (!yytext)
  {
    if (!(yytext= lip->get_tok_start()))
      yytext= "";
  }
  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext),
                    thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER_THD(thd, ER_PARSE_ERROR), MYF(0),
                  err_text, err.ptr(), lip->yylineno);
}


static void my_parse_error(THD *thd, uint err_number, const char *yytext=0)
{
  return my_parse_error_intern(thd, ER_THD(thd, err_number), yytext);
}

void LEX::parse_error()
{
  my_parse_error(thd, ER_SYNTAX_ERROR);
}


/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER_THD(thd, ER_SYNTAX_ERROR);
  my_parse_error_intern(thd, s, 0);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


static sp_head *make_sp_head(THD *thd, sp_name *name,
                             enum stored_procedure_type type)
{
  LEX *lex= thd->lex;
  sp_head *sp;

  /* Order is important here: new - reset - init */
  if ((sp= new sp_head()))
  {
    sp->reset_thd_mem_root(thd);
    sp->init(lex);
    sp->m_type= type;
    if (name)
      sp->init_sp_name(thd, name);
    sp->m_chistics= &lex->sp_chistics;
    lex->sphead= sp;
  }
  bzero(&lex->sp_chistics, sizeof(lex->sp_chistics));
  return sp;
}

static bool maybe_start_compound_statement(THD *thd)
{
  if (!thd->lex->sphead)
  {
    if (!make_sp_head(thd, NULL, TYPE_ENUM_PROCEDURE))
      return 1;

    Lex->sp_chistics.suid= SP_IS_NOT_SUID;
    Lex->sphead->set_body_start(thd, YYLIP->get_cpp_ptr());
  }
  return 0;
}

static bool push_sp_label(THD *thd, LEX_STRING label)
{
  sp_pcontext *ctx= thd->lex->spcont;
  sp_label *lab= ctx->find_label(label);

  if (lab)
  {
    my_error(ER_SP_LABEL_REDEFINE, MYF(0), label.str);
    return 1;
  }
  else
  {
    lab= thd->lex->spcont->push_label(thd, label,
        thd->lex->sphead->instructions());
    lab->type= sp_label::ITERATION;
  }
  return 0;
}

static bool push_sp_empty_label(THD *thd)
{
  if (maybe_start_compound_statement(thd))
    return 1;
  /* Unlabeled controls get an empty label. */
  thd->lex->spcont->push_label(thd, empty_lex_str,
      thd->lex->sphead->instructions());
  return 0;
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new (lex->thd->mem_root)
    sp_instr_set_case_expr(sp->instructions(), parsing_ctx, case_expr_id, expr,
                           lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;
  THD *thd= lex->thd;

  if (simple)
  {
    var= new (thd->mem_root)
         Item_case_expr(thd, ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new (thd->mem_root) Item_func_eq(thd, var, when);
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new (thd->mem_root) sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i= new (lex->thd->mem_root) sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to after END CASE
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var != NULL)
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new (thd->mem_root)
         set_var(thd, var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var, thd->mem_root);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null(thd);
    if (it == NULL)
      return TRUE;
  }

  sp_set= new (thd->mem_root)
         sp_instr_set(lex->sphead->instructions(), lex->spcont,
                                   spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new (thd->mem_root) Item_null(thd);

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(thd, lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new (thd->mem_root)
        sp_instr_set_trigger_field(lex->sphead->instructions(),
                                                 lex->spcont, trg_fld, val,
         lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(thd, name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(thd, left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(thd, left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(thd, left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select
          statement uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
                       is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->order_list.first && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "ORDER BY");
    return TRUE;
  }

  if (lex->current_select->explicit_limit && !lex->current_select->braces)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "LIMIT");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  /*
  if (sel->set_braces(1))
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  */
  DBUG_ASSERT(sel->braces);
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(lex->thd, ER_SYNTAX_ERROR);
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  return FALSE;
}

static bool add_create_index_prepare(LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->option_list= NULL;
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    if (no_lookahead)
        lex->sphead->m_tmp_query= lip->get_ptr();
    else
        lex->sphead->m_tmp_query= lip->get_tok_end();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new (thd->mem_root)
        sp_instr_stmt(sp->instructions(), lex->spcont, lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}


static void add_key_to_list(LEX *lex, LEX_STRING *field_name,
                            enum Key::Keytype type, bool check_exists)
{
  Key *key;
  MEM_ROOT *mem_root= lex->thd->mem_root;
  key= new (mem_root)
        Key(type, null_lex_str, HA_KEY_ALG_UNDEF, false,
             DDL_options(check_exists ?
                         DDL_options::OPT_IF_NOT_EXISTS :
                         DDL_options::OPT_NONE));
  key->columns.push_back(new (mem_root) Key_part_spec(*field_name, 0),
                         mem_root);
  lex->alter_info.key_list.push_back(key, mem_root);
}

void LEX::init_last_field(Create_field *field, const char *field_name,
         CHARSET_INFO *cs)
{
  last_field= field;

  field->field_name= field_name;

  /* reset LEX fields that are used in Create_field::set_and_check() */
  length= 0;
  dec= 0;
  charset= cs;
}

void LEX::set_last_field_type(enum enum_field_types field_type)
{
  last_field->sql_type= field_type;
  last_field->create_if_not_exists= check_exists;
  last_field->charset= charset;

  if (length)
  {
    int err;
    last_field->length= my_strtoll10(length, NULL, &err);
    if (err)
      last_field->length= ~0ULL; // safety
  }
  else
    last_field->length= 0;

  last_field->decimals= dec ? (uint)atoi(dec) : 0;
}

bool LEX::set_bincmp(CHARSET_INFO *cs, bool bin)
{
  /*
     if charset is NULL - we're parsing a field declaration.
     we cannot call find_bin_collation for a field here, because actual
     field charset is determined in get_sql_field_charset() much later.
     so we only set a flag.
  */
  if (!charset)
  {
    charset= cs;
    last_field->flags|= bin ? BINCMP_FLAG : 0;
    return false;
  }

  charset= bin ? find_bin_collation(cs ? cs : charset)
               :                    cs ? cs : charset;
  return charset == NULL;
}

#define bincmp_collation(X,Y)           \
  do                                    \
  {                                     \
     if (Lex->set_bincmp(X,Y))          \
       MYSQL_YYABORT;                   \
  } while(0)


#line 996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ABORT_SYM = 258,
    ACCESSIBLE_SYM = 259,
    ACTION = 260,
    ADD = 261,
    ADMIN_SYM = 262,
    ADDDATE_SYM = 263,
    AFTER_SYM = 264,
    AGAINST = 265,
    AGGREGATE_SYM = 266,
    ALGORITHM_SYM = 267,
    ALL = 268,
    ALTER = 269,
    ALWAYS_SYM = 270,
    ANALYZE_SYM = 271,
    AND_AND_SYM = 272,
    AND_SYM = 273,
    ANY_SYM = 274,
    AS = 275,
    ASC = 276,
    ASCII_SYM = 277,
    ASENSITIVE_SYM = 278,
    AT_SYM = 279,
    ATOMIC_SYM = 280,
    AUTHORS_SYM = 281,
    AUTOEXTEND_SIZE_SYM = 282,
    AUTO_INC = 283,
    AUTO_SYM = 284,
    AVG_ROW_LENGTH = 285,
    AVG_SYM = 286,
    BACKUP_SYM = 287,
    BEFORE_SYM = 288,
    BEGIN_SYM = 289,
    BETWEEN_SYM = 290,
    BIGINT = 291,
    BINARY = 292,
    BINLOG_SYM = 293,
    BIN_NUM = 294,
    BIT_AND = 295,
    BIT_OR = 296,
    BIT_SYM = 297,
    BIT_XOR = 298,
    BLOB_SYM = 299,
    BLOCK_SYM = 300,
    BOOLEAN_SYM = 301,
    BOOL_SYM = 302,
    BOTH = 303,
    BTREE_SYM = 304,
    BY = 305,
    BYTE_SYM = 306,
    CACHE_SYM = 307,
    CALL_SYM = 308,
    CASCADE = 309,
    CASCADED = 310,
    CASE_SYM = 311,
    CAST_SYM = 312,
    CATALOG_NAME_SYM = 313,
    CHAIN_SYM = 314,
    CHANGE = 315,
    CHANGED = 316,
    CHARSET = 317,
    CHAR_SYM = 318,
    CHECKPOINT_SYM = 319,
    CHECKSUM_SYM = 320,
    CHECK_SYM = 321,
    CIPHER_SYM = 322,
    CLASS_ORIGIN_SYM = 323,
    CLIENT_SYM = 324,
    CLOSE_SYM = 325,
    COALESCE = 326,
    CODE_SYM = 327,
    COLLATE_SYM = 328,
    COLLATION_SYM = 329,
    COLUMNS = 330,
    COLUMN_ADD_SYM = 331,
    COLUMN_CHECK_SYM = 332,
    COLUMN_CREATE_SYM = 333,
    COLUMN_DELETE_SYM = 334,
    COLUMN_GET_SYM = 335,
    COLUMN_SYM = 336,
    COLUMN_NAME_SYM = 337,
    COMMENT_SYM = 338,
    COMMITTED_SYM = 339,
    COMMIT_SYM = 340,
    COMPACT_SYM = 341,
    COMPLETION_SYM = 342,
    COMPRESSED_SYM = 343,
    CONCURRENT = 344,
    CONDITION_SYM = 345,
    CONNECTION_SYM = 346,
    CONSISTENT_SYM = 347,
    CONSTRAINT = 348,
    CONSTRAINT_CATALOG_SYM = 349,
    CONSTRAINT_NAME_SYM = 350,
    CONSTRAINT_SCHEMA_SYM = 351,
    CONTAINS_SYM = 352,
    CONTEXT_SYM = 353,
    CONTINUE_SYM = 354,
    CONTRIBUTORS_SYM = 355,
    CONVERT_SYM = 356,
    COUNT_SYM = 357,
    CPU_SYM = 358,
    CREATE = 359,
    CROSS = 360,
    CUBE_SYM = 361,
    CURDATE = 362,
    CURRENT_SYM = 363,
    CURRENT_USER = 364,
    CURRENT_ROLE = 365,
    CURRENT_POS_SYM = 366,
    CURSOR_SYM = 367,
    CURSOR_NAME_SYM = 368,
    CURTIME = 369,
    DATABASE = 370,
    DATABASES = 371,
    DATAFILE_SYM = 372,
    DATA_SYM = 373,
    DATETIME = 374,
    DATE_ADD_INTERVAL = 375,
    DATE_SUB_INTERVAL = 376,
    DATE_SYM = 377,
    DAY_HOUR_SYM = 378,
    DAY_MICROSECOND_SYM = 379,
    DAY_MINUTE_SYM = 380,
    DAY_SECOND_SYM = 381,
    DAY_SYM = 382,
    DEALLOCATE_SYM = 383,
    DECIMAL_NUM = 384,
    DECIMAL_SYM = 385,
    DECLARE_SYM = 386,
    DEFAULT = 387,
    DEFINER_SYM = 388,
    DELAYED_SYM = 389,
    DELAY_KEY_WRITE_SYM = 390,
    DELETE_SYM = 391,
    DELETE_DOMAIN_ID_SYM = 392,
    DESC = 393,
    DESCRIBE = 394,
    DES_KEY_FILE = 395,
    DETERMINISTIC_SYM = 396,
    DIAGNOSTICS_SYM = 397,
    DIRECTORY_SYM = 398,
    DISABLE_SYM = 399,
    DISCARD = 400,
    DISK_SYM = 401,
    DISTINCT = 402,
    DIV_SYM = 403,
    DOUBLE_SYM = 404,
    DO_DOMAIN_IDS_SYM = 405,
    DO_SYM = 406,
    DROP = 407,
    DUAL_SYM = 408,
    DUMPFILE = 409,
    DUPLICATE_SYM = 410,
    DYNAMIC_SYM = 411,
    EACH_SYM = 412,
    ELSE = 413,
    ELSEIF_SYM = 414,
    ENABLE_SYM = 415,
    ENCLOSED = 416,
    END = 417,
    ENDS_SYM = 418,
    END_OF_INPUT = 419,
    ENGINES_SYM = 420,
    ENGINE_SYM = 421,
    ENUM = 422,
    EQUAL_SYM = 423,
    ERROR_SYM = 424,
    ERRORS = 425,
    ESCAPED = 426,
    ESCAPE_SYM = 427,
    EVENTS_SYM = 428,
    EVENT_SYM = 429,
    EVERY_SYM = 430,
    EXCHANGE_SYM = 431,
    EXAMINED_SYM = 432,
    EXECUTE_SYM = 433,
    EXISTS = 434,
    EXIT_SYM = 435,
    EXPANSION_SYM = 436,
    EXPORT_SYM = 437,
    EXTENDED_SYM = 438,
    EXTENT_SIZE_SYM = 439,
    EXTRACT_SYM = 440,
    FALSE_SYM = 441,
    FAST_SYM = 442,
    FAULTS_SYM = 443,
    FETCH_SYM = 444,
    FILE_SYM = 445,
    FIRST_SYM = 446,
    FIXED_SYM = 447,
    FLOAT_NUM = 448,
    FLOAT_SYM = 449,
    FLUSH_SYM = 450,
    FORCE_SYM = 451,
    FOREIGN = 452,
    FOR_SYM = 453,
    FORMAT_SYM = 454,
    FOUND_SYM = 455,
    FROM = 456,
    FULL = 457,
    FULLTEXT_SYM = 458,
    FUNCTION_SYM = 459,
    GE = 460,
    GENERAL = 461,
    GENERATED_SYM = 462,
    GEOMETRYCOLLECTION = 463,
    GEOMETRY_SYM = 464,
    GET_FORMAT = 465,
    GET_SYM = 466,
    GLOBAL_SYM = 467,
    GRANT = 468,
    GRANTS = 469,
    GROUP_SYM = 470,
    GROUP_CONCAT_SYM = 471,
    HANDLER_SYM = 472,
    HARD_SYM = 473,
    HASH_SYM = 474,
    HAVING = 475,
    HELP_SYM = 476,
    HEX_NUM = 477,
    HEX_STRING = 478,
    HIGH_PRIORITY = 479,
    HOST_SYM = 480,
    HOSTS_SYM = 481,
    HOUR_MICROSECOND_SYM = 482,
    HOUR_MINUTE_SYM = 483,
    HOUR_SECOND_SYM = 484,
    HOUR_SYM = 485,
    ID_SYM = 486,
    IDENT = 487,
    IDENTIFIED_SYM = 488,
    IDENT_QUOTED = 489,
    IF_SYM = 490,
    IGNORE_DOMAIN_IDS_SYM = 491,
    IGNORE_SYM = 492,
    IGNORE_SERVER_IDS_SYM = 493,
    IMPORT = 494,
    INDEXES = 495,
    INDEX_SYM = 496,
    INFILE = 497,
    INITIAL_SIZE_SYM = 498,
    INNER_SYM = 499,
    INOUT_SYM = 500,
    INSENSITIVE_SYM = 501,
    INSERT = 502,
    INSERT_METHOD = 503,
    INSTALL_SYM = 504,
    INTERVAL_SYM = 505,
    INTO = 506,
    INT_SYM = 507,
    INVOKER_SYM = 508,
    IN_SYM = 509,
    IO_SYM = 510,
    IPC_SYM = 511,
    IS = 512,
    ISOLATION = 513,
    ISSUER_SYM = 514,
    ITERATE_SYM = 515,
    JOIN_SYM = 516,
    KEYS = 517,
    KEY_BLOCK_SIZE = 518,
    KEY_SYM = 519,
    KILL_SYM = 520,
    LANGUAGE_SYM = 521,
    LAST_SYM = 522,
    LAST_VALUE = 523,
    LE = 524,
    LEADING = 525,
    LEAVES = 526,
    LEAVE_SYM = 527,
    LEFT = 528,
    LESS_SYM = 529,
    LEVEL_SYM = 530,
    LEX_HOSTNAME = 531,
    LIKE = 532,
    LIMIT = 533,
    LINEAR_SYM = 534,
    LINES = 535,
    LINESTRING = 536,
    LIST_SYM = 537,
    LOAD = 538,
    LOCAL_SYM = 539,
    LOCATOR_SYM = 540,
    LOCKS_SYM = 541,
    LOCK_SYM = 542,
    LOGFILE_SYM = 543,
    LOGS_SYM = 544,
    LONGBLOB = 545,
    LONGTEXT = 546,
    LONG_NUM = 547,
    LONG_SYM = 548,
    LOOP_SYM = 549,
    LOW_PRIORITY = 550,
    MASTER_CONNECT_RETRY_SYM = 551,
    MASTER_GTID_POS_SYM = 552,
    MASTER_HOST_SYM = 553,
    MASTER_LOG_FILE_SYM = 554,
    MASTER_LOG_POS_SYM = 555,
    MASTER_PASSWORD_SYM = 556,
    MASTER_PORT_SYM = 557,
    MASTER_SERVER_ID_SYM = 558,
    MASTER_SSL_CAPATH_SYM = 559,
    MASTER_SSL_CA_SYM = 560,
    MASTER_SSL_CERT_SYM = 561,
    MASTER_SSL_CIPHER_SYM = 562,
    MASTER_SSL_CRL_SYM = 563,
    MASTER_SSL_CRLPATH_SYM = 564,
    MASTER_SSL_KEY_SYM = 565,
    MASTER_SSL_SYM = 566,
    MASTER_SSL_VERIFY_SERVER_CERT_SYM = 567,
    MASTER_SYM = 568,
    MASTER_USER_SYM = 569,
    MASTER_USE_GTID_SYM = 570,
    MASTER_HEARTBEAT_PERIOD_SYM = 571,
    MATCH = 572,
    MAX_CONNECTIONS_PER_HOUR = 573,
    MAX_QUERIES_PER_HOUR = 574,
    MAX_ROWS = 575,
    MAX_SIZE_SYM = 576,
    MAX_SYM = 577,
    MAX_UPDATES_PER_HOUR = 578,
    MAX_STATEMENT_TIME_SYM = 579,
    MAX_USER_CONNECTIONS_SYM = 580,
    MAX_VALUE_SYM = 581,
    MEDIUMBLOB = 582,
    MEDIUMINT = 583,
    MEDIUMTEXT = 584,
    MEDIUM_SYM = 585,
    MEMORY_SYM = 586,
    MERGE_SYM = 587,
    MESSAGE_TEXT_SYM = 588,
    MICROSECOND_SYM = 589,
    MIGRATE_SYM = 590,
    MINUTE_MICROSECOND_SYM = 591,
    MINUTE_SECOND_SYM = 592,
    MINUTE_SYM = 593,
    MIN_ROWS = 594,
    MIN_SYM = 595,
    MODE_SYM = 596,
    MODIFIES_SYM = 597,
    MODIFY_SYM = 598,
    MOD_SYM = 599,
    MONTH_SYM = 600,
    MULTILINESTRING = 601,
    MULTIPOINT = 602,
    MULTIPOLYGON = 603,
    MUTEX_SYM = 604,
    MYSQL_SYM = 605,
    MYSQL_ERRNO_SYM = 606,
    NAMES_SYM = 607,
    NAME_SYM = 608,
    NATIONAL_SYM = 609,
    NATURAL = 610,
    NCHAR_STRING = 611,
    NCHAR_SYM = 612,
    NE = 613,
    NEG = 614,
    NEW_SYM = 615,
    NEXT_SYM = 616,
    NODEGROUP_SYM = 617,
    NONE_SYM = 618,
    NOT2_SYM = 619,
    NOT_SYM = 620,
    NOW_SYM = 621,
    NO_SYM = 622,
    NO_WAIT_SYM = 623,
    NO_WRITE_TO_BINLOG = 624,
    NULL_SYM = 625,
    NUM = 626,
    NUMBER_SYM = 627,
    NUMERIC_SYM = 628,
    NVARCHAR_SYM = 629,
    OFFSET_SYM = 630,
    OLD_PASSWORD_SYM = 631,
    ON = 632,
    ONE_SYM = 633,
    ONLY_SYM = 634,
    ONLINE_SYM = 635,
    OPEN_SYM = 636,
    OPTIMIZE = 637,
    OPTIONS_SYM = 638,
    OPTION = 639,
    OPTIONALLY = 640,
    OR2_SYM = 641,
    ORDER_SYM = 642,
    OR_OR_SYM = 643,
    OR_SYM = 644,
    OUTER = 645,
    OUTFILE = 646,
    OUT_SYM = 647,
    OWNER_SYM = 648,
    PACK_KEYS_SYM = 649,
    PAGE_SYM = 650,
    PAGE_CHECKSUM_SYM = 651,
    PARAM_MARKER = 652,
    PARSER_SYM = 653,
    PARSE_VCOL_EXPR_SYM = 654,
    PARTIAL = 655,
    PARTITION_SYM = 656,
    PARTITIONS_SYM = 657,
    PARTITIONING_SYM = 658,
    PASSWORD_SYM = 659,
    PERSISTENT_SYM = 660,
    PHASE_SYM = 661,
    PLUGINS_SYM = 662,
    PLUGIN_SYM = 663,
    POINT_SYM = 664,
    POLYGON = 665,
    PORT_SYM = 666,
    POSITION_SYM = 667,
    PRECISION = 668,
    PREPARE_SYM = 669,
    PRESERVE_SYM = 670,
    PREV_SYM = 671,
    PRIMARY_SYM = 672,
    PRIVILEGES = 673,
    PROCEDURE_SYM = 674,
    PROCESS = 675,
    PROCESSLIST_SYM = 676,
    PROFILE_SYM = 677,
    PROFILES_SYM = 678,
    PROXY_SYM = 679,
    PURGE = 680,
    QUARTER_SYM = 681,
    QUERY_SYM = 682,
    QUICK = 683,
    RANGE_SYM = 684,
    READS_SYM = 685,
    READ_ONLY_SYM = 686,
    READ_SYM = 687,
    READ_WRITE_SYM = 688,
    REAL = 689,
    REBUILD_SYM = 690,
    RECOVER_SYM = 691,
    REDOFILE_SYM = 692,
    REDO_BUFFER_SIZE_SYM = 693,
    REDUNDANT_SYM = 694,
    REFERENCES = 695,
    REGEXP = 696,
    RELAY = 697,
    RELAYLOG_SYM = 698,
    RELAY_LOG_FILE_SYM = 699,
    RELAY_LOG_POS_SYM = 700,
    RELAY_THREAD = 701,
    RELEASE_SYM = 702,
    RELOAD = 703,
    REMOVE_SYM = 704,
    RENAME = 705,
    REORGANIZE_SYM = 706,
    REPAIR = 707,
    REPEATABLE_SYM = 708,
    REPEAT_SYM = 709,
    REPLACE = 710,
    REPLICATION = 711,
    REQUIRE_SYM = 712,
    RESET_SYM = 713,
    RESIGNAL_SYM = 714,
    RESOURCES = 715,
    RESTORE_SYM = 716,
    RESTRICT = 717,
    RESUME_SYM = 718,
    RETURNED_SQLSTATE_SYM = 719,
    RETURNING_SYM = 720,
    RETURNS_SYM = 721,
    RETURN_SYM = 722,
    REVERSE_SYM = 723,
    REVOKE = 724,
    RIGHT = 725,
    ROLE_SYM = 726,
    ROLLBACK_SYM = 727,
    ROLLUP_SYM = 728,
    ROUTINE_SYM = 729,
    ROWS_SYM = 730,
    ROW_FORMAT_SYM = 731,
    ROW_SYM = 732,
    ROW_COUNT_SYM = 733,
    RTREE_SYM = 734,
    SAVEPOINT_SYM = 735,
    SCHEDULE_SYM = 736,
    SCHEMA_NAME_SYM = 737,
    SECOND_MICROSECOND_SYM = 738,
    SECOND_SYM = 739,
    SECURITY_SYM = 740,
    SELECT_SYM = 741,
    SENSITIVE_SYM = 742,
    SEPARATOR_SYM = 743,
    SERIALIZABLE_SYM = 744,
    SERIAL_SYM = 745,
    SESSION_SYM = 746,
    SERVER_SYM = 747,
    SERVER_OPTIONS = 748,
    SET = 749,
    SET_VAR = 750,
    SHARE_SYM = 751,
    SHIFT_LEFT = 752,
    SHIFT_RIGHT = 753,
    SHOW = 754,
    SHUTDOWN = 755,
    SIGNAL_SYM = 756,
    SIGNED_SYM = 757,
    SIMPLE_SYM = 758,
    SLAVE = 759,
    SLAVES = 760,
    SLAVE_POS_SYM = 761,
    SLOW = 762,
    SMALLINT = 763,
    SNAPSHOT_SYM = 764,
    SOCKET_SYM = 765,
    SOFT_SYM = 766,
    SONAME_SYM = 767,
    SOUNDS_SYM = 768,
    SOURCE_SYM = 769,
    SPATIAL_SYM = 770,
    SPECIFIC_SYM = 771,
    SQLEXCEPTION_SYM = 772,
    SQLSTATE_SYM = 773,
    SQLWARNING_SYM = 774,
    SQL_BIG_RESULT = 775,
    SQL_BUFFER_RESULT = 776,
    SQL_CACHE_SYM = 777,
    SQL_CALC_FOUND_ROWS = 778,
    SQL_NO_CACHE_SYM = 779,
    SQL_SMALL_RESULT = 780,
    SQL_SYM = 781,
    SQL_THREAD = 782,
    REF_SYSTEM_ID_SYM = 783,
    SSL_SYM = 784,
    STARTING = 785,
    STARTS_SYM = 786,
    START_SYM = 787,
    STATEMENT_SYM = 788,
    STATS_AUTO_RECALC_SYM = 789,
    STATS_PERSISTENT_SYM = 790,
    STATS_SAMPLE_PAGES_SYM = 791,
    STATUS_SYM = 792,
    STDDEV_SAMP_SYM = 793,
    STD_SYM = 794,
    STOP_SYM = 795,
    STORAGE_SYM = 796,
    STRAIGHT_JOIN = 797,
    STRING_SYM = 798,
    SUBCLASS_ORIGIN_SYM = 799,
    SUBDATE_SYM = 800,
    SUBJECT_SYM = 801,
    SUBPARTITIONS_SYM = 802,
    SUBPARTITION_SYM = 803,
    SUBSTRING = 804,
    SUM_SYM = 805,
    SUPER_SYM = 806,
    SUSPEND_SYM = 807,
    SWAPS_SYM = 808,
    SWITCHES_SYM = 809,
    SYSDATE = 810,
    TABLES = 811,
    TABLESPACE = 812,
    TABLE_REF_PRIORITY = 813,
    TABLE_SYM = 814,
    TABLE_CHECKSUM_SYM = 815,
    TABLE_NAME_SYM = 816,
    TEMPORARY = 817,
    TEMPTABLE_SYM = 818,
    TERMINATED = 819,
    TEXT_STRING = 820,
    TEXT_SYM = 821,
    THAN_SYM = 822,
    THEN_SYM = 823,
    TIMESTAMP = 824,
    TIMESTAMP_ADD = 825,
    TIMESTAMP_DIFF = 826,
    TIME_SYM = 827,
    TINYBLOB = 828,
    TINYINT = 829,
    TINYTEXT = 830,
    TO_SYM = 831,
    TRAILING = 832,
    TRANSACTION_SYM = 833,
    TRANSACTIONAL_SYM = 834,
    TRIGGERS_SYM = 835,
    TRIGGER_SYM = 836,
    TRIM = 837,
    TRUE_SYM = 838,
    TRUNCATE_SYM = 839,
    TYPES_SYM = 840,
    TYPE_SYM = 841,
    UDF_RETURNS_SYM = 842,
    ULONGLONG_NUM = 843,
    UNCOMMITTED_SYM = 844,
    UNDEFINED_SYM = 845,
    UNDERSCORE_CHARSET = 846,
    UNDOFILE_SYM = 847,
    UNDO_BUFFER_SIZE_SYM = 848,
    UNDO_SYM = 849,
    UNICODE_SYM = 850,
    UNINSTALL_SYM = 851,
    UNION_SYM = 852,
    UNIQUE_SYM = 853,
    UNKNOWN_SYM = 854,
    UNLOCK_SYM = 855,
    UNSIGNED = 856,
    UNTIL_SYM = 857,
    UPDATE_SYM = 858,
    UPGRADE_SYM = 859,
    USAGE = 860,
    USER = 861,
    USE_FRM = 862,
    USE_SYM = 863,
    USING = 864,
    UTC_DATE_SYM = 865,
    UTC_TIMESTAMP_SYM = 866,
    UTC_TIME_SYM = 867,
    VALUES = 868,
    VALUE_SYM = 869,
    VARBINARY = 870,
    VARCHAR = 871,
    VARIABLES = 872,
    VARIANCE_SYM = 873,
    VARYING = 874,
    VAR_SAMP_SYM = 875,
    VIA_SYM = 876,
    VIEW_SYM = 877,
    VIRTUAL_SYM = 878,
    WAIT_SYM = 879,
    WARNINGS = 880,
    WEEK_SYM = 881,
    WEIGHT_STRING_SYM = 882,
    WHEN_SYM = 883,
    WHERE = 884,
    WHILE_SYM = 885,
    WITH = 886,
    WITH_CUBE_SYM = 887,
    WITH_ROLLUP_SYM = 888,
    WORK_SYM = 889,
    WRAPPER_SYM = 890,
    WRITE_SYM = 891,
    X509_SYM = 892,
    XA_SYM = 893,
    XML_SYM = 894,
    XOR = 895,
    YEAR_MONTH_SYM = 896,
    YEAR_SYM = 897,
    ZEROFILL = 898,
    IMPOSSIBLE_ACTION = 899
  };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define ATOMIC_SYM 280
#define AUTHORS_SYM 281
#define AUTOEXTEND_SIZE_SYM 282
#define AUTO_INC 283
#define AUTO_SYM 284
#define AVG_ROW_LENGTH 285
#define AVG_SYM 286
#define BACKUP_SYM 287
#define BEFORE_SYM 288
#define BEGIN_SYM 289
#define BETWEEN_SYM 290
#define BIGINT 291
#define BINARY 292
#define BINLOG_SYM 293
#define BIN_NUM 294
#define BIT_AND 295
#define BIT_OR 296
#define BIT_SYM 297
#define BIT_XOR 298
#define BLOB_SYM 299
#define BLOCK_SYM 300
#define BOOLEAN_SYM 301
#define BOOL_SYM 302
#define BOTH 303
#define BTREE_SYM 304
#define BY 305
#define BYTE_SYM 306
#define CACHE_SYM 307
#define CALL_SYM 308
#define CASCADE 309
#define CASCADED 310
#define CASE_SYM 311
#define CAST_SYM 312
#define CATALOG_NAME_SYM 313
#define CHAIN_SYM 314
#define CHANGE 315
#define CHANGED 316
#define CHARSET 317
#define CHAR_SYM 318
#define CHECKPOINT_SYM 319
#define CHECKSUM_SYM 320
#define CHECK_SYM 321
#define CIPHER_SYM 322
#define CLASS_ORIGIN_SYM 323
#define CLIENT_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DELETE_DOMAIN_ID_SYM 392
#define DESC 393
#define DESCRIBE 394
#define DES_KEY_FILE 395
#define DETERMINISTIC_SYM 396
#define DIAGNOSTICS_SYM 397
#define DIRECTORY_SYM 398
#define DISABLE_SYM 399
#define DISCARD 400
#define DISK_SYM 401
#define DISTINCT 402
#define DIV_SYM 403
#define DOUBLE_SYM 404
#define DO_DOMAIN_IDS_SYM 405
#define DO_SYM 406
#define DROP 407
#define DUAL_SYM 408
#define DUMPFILE 409
#define DUPLICATE_SYM 410
#define DYNAMIC_SYM 411
#define EACH_SYM 412
#define ELSE 413
#define ELSEIF_SYM 414
#define ENABLE_SYM 415
#define ENCLOSED 416
#define END 417
#define ENDS_SYM 418
#define END_OF_INPUT 419
#define ENGINES_SYM 420
#define ENGINE_SYM 421
#define ENUM 422
#define EQUAL_SYM 423
#define ERROR_SYM 424
#define ERRORS 425
#define ESCAPED 426
#define ESCAPE_SYM 427
#define EVENTS_SYM 428
#define EVENT_SYM 429
#define EVERY_SYM 430
#define EXCHANGE_SYM 431
#define EXAMINED_SYM 432
#define EXECUTE_SYM 433
#define EXISTS 434
#define EXIT_SYM 435
#define EXPANSION_SYM 436
#define EXPORT_SYM 437
#define EXTENDED_SYM 438
#define EXTENT_SIZE_SYM 439
#define EXTRACT_SYM 440
#define FALSE_SYM 441
#define FAST_SYM 442
#define FAULTS_SYM 443
#define FETCH_SYM 444
#define FILE_SYM 445
#define FIRST_SYM 446
#define FIXED_SYM 447
#define FLOAT_NUM 448
#define FLOAT_SYM 449
#define FLUSH_SYM 450
#define FORCE_SYM 451
#define FOREIGN 452
#define FOR_SYM 453
#define FORMAT_SYM 454
#define FOUND_SYM 455
#define FROM 456
#define FULL 457
#define FULLTEXT_SYM 458
#define FUNCTION_SYM 459
#define GE 460
#define GENERAL 461
#define GENERATED_SYM 462
#define GEOMETRYCOLLECTION 463
#define GEOMETRY_SYM 464
#define GET_FORMAT 465
#define GET_SYM 466
#define GLOBAL_SYM 467
#define GRANT 468
#define GRANTS 469
#define GROUP_SYM 470
#define GROUP_CONCAT_SYM 471
#define HANDLER_SYM 472
#define HARD_SYM 473
#define HASH_SYM 474
#define HAVING 475
#define HELP_SYM 476
#define HEX_NUM 477
#define HEX_STRING 478
#define HIGH_PRIORITY 479
#define HOST_SYM 480
#define HOSTS_SYM 481
#define HOUR_MICROSECOND_SYM 482
#define HOUR_MINUTE_SYM 483
#define HOUR_SECOND_SYM 484
#define HOUR_SYM 485
#define ID_SYM 486
#define IDENT 487
#define IDENTIFIED_SYM 488
#define IDENT_QUOTED 489
#define IF_SYM 490
#define IGNORE_DOMAIN_IDS_SYM 491
#define IGNORE_SYM 492
#define IGNORE_SERVER_IDS_SYM 493
#define IMPORT 494
#define INDEXES 495
#define INDEX_SYM 496
#define INFILE 497
#define INITIAL_SIZE_SYM 498
#define INNER_SYM 499
#define INOUT_SYM 500
#define INSENSITIVE_SYM 501
#define INSERT 502
#define INSERT_METHOD 503
#define INSTALL_SYM 504
#define INTERVAL_SYM 505
#define INTO 506
#define INT_SYM 507
#define INVOKER_SYM 508
#define IN_SYM 509
#define IO_SYM 510
#define IPC_SYM 511
#define IS 512
#define ISOLATION 513
#define ISSUER_SYM 514
#define ITERATE_SYM 515
#define JOIN_SYM 516
#define KEYS 517
#define KEY_BLOCK_SIZE 518
#define KEY_SYM 519
#define KILL_SYM 520
#define LANGUAGE_SYM 521
#define LAST_SYM 522
#define LAST_VALUE 523
#define LE 524
#define LEADING 525
#define LEAVES 526
#define LEAVE_SYM 527
#define LEFT 528
#define LESS_SYM 529
#define LEVEL_SYM 530
#define LEX_HOSTNAME 531
#define LIKE 532
#define LIMIT 533
#define LINEAR_SYM 534
#define LINES 535
#define LINESTRING 536
#define LIST_SYM 537
#define LOAD 538
#define LOCAL_SYM 539
#define LOCATOR_SYM 540
#define LOCKS_SYM 541
#define LOCK_SYM 542
#define LOGFILE_SYM 543
#define LOGS_SYM 544
#define LONGBLOB 545
#define LONGTEXT 546
#define LONG_NUM 547
#define LONG_SYM 548
#define LOOP_SYM 549
#define LOW_PRIORITY 550
#define MASTER_CONNECT_RETRY_SYM 551
#define MASTER_GTID_POS_SYM 552
#define MASTER_HOST_SYM 553
#define MASTER_LOG_FILE_SYM 554
#define MASTER_LOG_POS_SYM 555
#define MASTER_PASSWORD_SYM 556
#define MASTER_PORT_SYM 557
#define MASTER_SERVER_ID_SYM 558
#define MASTER_SSL_CAPATH_SYM 559
#define MASTER_SSL_CA_SYM 560
#define MASTER_SSL_CERT_SYM 561
#define MASTER_SSL_CIPHER_SYM 562
#define MASTER_SSL_CRL_SYM 563
#define MASTER_SSL_CRLPATH_SYM 564
#define MASTER_SSL_KEY_SYM 565
#define MASTER_SSL_SYM 566
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 567
#define MASTER_SYM 568
#define MASTER_USER_SYM 569
#define MASTER_USE_GTID_SYM 570
#define MASTER_HEARTBEAT_PERIOD_SYM 571
#define MATCH 572
#define MAX_CONNECTIONS_PER_HOUR 573
#define MAX_QUERIES_PER_HOUR 574
#define MAX_ROWS 575
#define MAX_SIZE_SYM 576
#define MAX_SYM 577
#define MAX_UPDATES_PER_HOUR 578
#define MAX_STATEMENT_TIME_SYM 579
#define MAX_USER_CONNECTIONS_SYM 580
#define MAX_VALUE_SYM 581
#define MEDIUMBLOB 582
#define MEDIUMINT 583
#define MEDIUMTEXT 584
#define MEDIUM_SYM 585
#define MEMORY_SYM 586
#define MERGE_SYM 587
#define MESSAGE_TEXT_SYM 588
#define MICROSECOND_SYM 589
#define MIGRATE_SYM 590
#define MINUTE_MICROSECOND_SYM 591
#define MINUTE_SECOND_SYM 592
#define MINUTE_SYM 593
#define MIN_ROWS 594
#define MIN_SYM 595
#define MODE_SYM 596
#define MODIFIES_SYM 597
#define MODIFY_SYM 598
#define MOD_SYM 599
#define MONTH_SYM 600
#define MULTILINESTRING 601
#define MULTIPOINT 602
#define MULTIPOLYGON 603
#define MUTEX_SYM 604
#define MYSQL_SYM 605
#define MYSQL_ERRNO_SYM 606
#define NAMES_SYM 607
#define NAME_SYM 608
#define NATIONAL_SYM 609
#define NATURAL 610
#define NCHAR_STRING 611
#define NCHAR_SYM 612
#define NE 613
#define NEG 614
#define NEW_SYM 615
#define NEXT_SYM 616
#define NODEGROUP_SYM 617
#define NONE_SYM 618
#define NOT2_SYM 619
#define NOT_SYM 620
#define NOW_SYM 621
#define NO_SYM 622
#define NO_WAIT_SYM 623
#define NO_WRITE_TO_BINLOG 624
#define NULL_SYM 625
#define NUM 626
#define NUMBER_SYM 627
#define NUMERIC_SYM 628
#define NVARCHAR_SYM 629
#define OFFSET_SYM 630
#define OLD_PASSWORD_SYM 631
#define ON 632
#define ONE_SYM 633
#define ONLY_SYM 634
#define ONLINE_SYM 635
#define OPEN_SYM 636
#define OPTIMIZE 637
#define OPTIONS_SYM 638
#define OPTION 639
#define OPTIONALLY 640
#define OR2_SYM 641
#define ORDER_SYM 642
#define OR_OR_SYM 643
#define OR_SYM 644
#define OUTER 645
#define OUTFILE 646
#define OUT_SYM 647
#define OWNER_SYM 648
#define PACK_KEYS_SYM 649
#define PAGE_SYM 650
#define PAGE_CHECKSUM_SYM 651
#define PARAM_MARKER 652
#define PARSER_SYM 653
#define PARSE_VCOL_EXPR_SYM 654
#define PARTIAL 655
#define PARTITION_SYM 656
#define PARTITIONS_SYM 657
#define PARTITIONING_SYM 658
#define PASSWORD_SYM 659
#define PERSISTENT_SYM 660
#define PHASE_SYM 661
#define PLUGINS_SYM 662
#define PLUGIN_SYM 663
#define POINT_SYM 664
#define POLYGON 665
#define PORT_SYM 666
#define POSITION_SYM 667
#define PRECISION 668
#define PREPARE_SYM 669
#define PRESERVE_SYM 670
#define PREV_SYM 671
#define PRIMARY_SYM 672
#define PRIVILEGES 673
#define PROCEDURE_SYM 674
#define PROCESS 675
#define PROCESSLIST_SYM 676
#define PROFILE_SYM 677
#define PROFILES_SYM 678
#define PROXY_SYM 679
#define PURGE 680
#define QUARTER_SYM 681
#define QUERY_SYM 682
#define QUICK 683
#define RANGE_SYM 684
#define READS_SYM 685
#define READ_ONLY_SYM 686
#define READ_SYM 687
#define READ_WRITE_SYM 688
#define REAL 689
#define REBUILD_SYM 690
#define RECOVER_SYM 691
#define REDOFILE_SYM 692
#define REDO_BUFFER_SIZE_SYM 693
#define REDUNDANT_SYM 694
#define REFERENCES 695
#define REGEXP 696
#define RELAY 697
#define RELAYLOG_SYM 698
#define RELAY_LOG_FILE_SYM 699
#define RELAY_LOG_POS_SYM 700
#define RELAY_THREAD 701
#define RELEASE_SYM 702
#define RELOAD 703
#define REMOVE_SYM 704
#define RENAME 705
#define REORGANIZE_SYM 706
#define REPAIR 707
#define REPEATABLE_SYM 708
#define REPEAT_SYM 709
#define REPLACE 710
#define REPLICATION 711
#define REQUIRE_SYM 712
#define RESET_SYM 713
#define RESIGNAL_SYM 714
#define RESOURCES 715
#define RESTORE_SYM 716
#define RESTRICT 717
#define RESUME_SYM 718
#define RETURNED_SQLSTATE_SYM 719
#define RETURNING_SYM 720
#define RETURNS_SYM 721
#define RETURN_SYM 722
#define REVERSE_SYM 723
#define REVOKE 724
#define RIGHT 725
#define ROLE_SYM 726
#define ROLLBACK_SYM 727
#define ROLLUP_SYM 728
#define ROUTINE_SYM 729
#define ROWS_SYM 730
#define ROW_FORMAT_SYM 731
#define ROW_SYM 732
#define ROW_COUNT_SYM 733
#define RTREE_SYM 734
#define SAVEPOINT_SYM 735
#define SCHEDULE_SYM 736
#define SCHEMA_NAME_SYM 737
#define SECOND_MICROSECOND_SYM 738
#define SECOND_SYM 739
#define SECURITY_SYM 740
#define SELECT_SYM 741
#define SENSITIVE_SYM 742
#define SEPARATOR_SYM 743
#define SERIALIZABLE_SYM 744
#define SERIAL_SYM 745
#define SESSION_SYM 746
#define SERVER_SYM 747
#define SERVER_OPTIONS 748
#define SET 749
#define SET_VAR 750
#define SHARE_SYM 751
#define SHIFT_LEFT 752
#define SHIFT_RIGHT 753
#define SHOW 754
#define SHUTDOWN 755
#define SIGNAL_SYM 756
#define SIGNED_SYM 757
#define SIMPLE_SYM 758
#define SLAVE 759
#define SLAVES 760
#define SLAVE_POS_SYM 761
#define SLOW 762
#define SMALLINT 763
#define SNAPSHOT_SYM 764
#define SOCKET_SYM 765
#define SOFT_SYM 766
#define SONAME_SYM 767
#define SOUNDS_SYM 768
#define SOURCE_SYM 769
#define SPATIAL_SYM 770
#define SPECIFIC_SYM 771
#define SQLEXCEPTION_SYM 772
#define SQLSTATE_SYM 773
#define SQLWARNING_SYM 774
#define SQL_BIG_RESULT 775
#define SQL_BUFFER_RESULT 776
#define SQL_CACHE_SYM 777
#define SQL_CALC_FOUND_ROWS 778
#define SQL_NO_CACHE_SYM 779
#define SQL_SMALL_RESULT 780
#define SQL_SYM 781
#define SQL_THREAD 782
#define REF_SYSTEM_ID_SYM 783
#define SSL_SYM 784
#define STARTING 785
#define STARTS_SYM 786
#define START_SYM 787
#define STATEMENT_SYM 788
#define STATS_AUTO_RECALC_SYM 789
#define STATS_PERSISTENT_SYM 790
#define STATS_SAMPLE_PAGES_SYM 791
#define STATUS_SYM 792
#define STDDEV_SAMP_SYM 793
#define STD_SYM 794
#define STOP_SYM 795
#define STORAGE_SYM 796
#define STRAIGHT_JOIN 797
#define STRING_SYM 798
#define SUBCLASS_ORIGIN_SYM 799
#define SUBDATE_SYM 800
#define SUBJECT_SYM 801
#define SUBPARTITIONS_SYM 802
#define SUBPARTITION_SYM 803
#define SUBSTRING 804
#define SUM_SYM 805
#define SUPER_SYM 806
#define SUSPEND_SYM 807
#define SWAPS_SYM 808
#define SWITCHES_SYM 809
#define SYSDATE 810
#define TABLES 811
#define TABLESPACE 812
#define TABLE_REF_PRIORITY 813
#define TABLE_SYM 814
#define TABLE_CHECKSUM_SYM 815
#define TABLE_NAME_SYM 816
#define TEMPORARY 817
#define TEMPTABLE_SYM 818
#define TERMINATED 819
#define TEXT_STRING 820
#define TEXT_SYM 821
#define THAN_SYM 822
#define THEN_SYM 823
#define TIMESTAMP 824
#define TIMESTAMP_ADD 825
#define TIMESTAMP_DIFF 826
#define TIME_SYM 827
#define TINYBLOB 828
#define TINYINT 829
#define TINYTEXT 830
#define TO_SYM 831
#define TRAILING 832
#define TRANSACTION_SYM 833
#define TRANSACTIONAL_SYM 834
#define TRIGGERS_SYM 835
#define TRIGGER_SYM 836
#define TRIM 837
#define TRUE_SYM 838
#define TRUNCATE_SYM 839
#define TYPES_SYM 840
#define TYPE_SYM 841
#define UDF_RETURNS_SYM 842
#define ULONGLONG_NUM 843
#define UNCOMMITTED_SYM 844
#define UNDEFINED_SYM 845
#define UNDERSCORE_CHARSET 846
#define UNDOFILE_SYM 847
#define UNDO_BUFFER_SIZE_SYM 848
#define UNDO_SYM 849
#define UNICODE_SYM 850
#define UNINSTALL_SYM 851
#define UNION_SYM 852
#define UNIQUE_SYM 853
#define UNKNOWN_SYM 854
#define UNLOCK_SYM 855
#define UNSIGNED 856
#define UNTIL_SYM 857
#define UPDATE_SYM 858
#define UPGRADE_SYM 859
#define USAGE 860
#define USER 861
#define USE_FRM 862
#define USE_SYM 863
#define USING 864
#define UTC_DATE_SYM 865
#define UTC_TIMESTAMP_SYM 866
#define UTC_TIME_SYM 867
#define VALUES 868
#define VALUE_SYM 869
#define VARBINARY 870
#define VARCHAR 871
#define VARIABLES 872
#define VARIANCE_SYM 873
#define VARYING 874
#define VAR_SAMP_SYM 875
#define VIA_SYM 876
#define VIEW_SYM 877
#define VIRTUAL_SYM 878
#define WAIT_SYM 879
#define WARNINGS 880
#define WEEK_SYM 881
#define WEIGHT_STRING_SYM 882
#define WHEN_SYM 883
#define WHERE 884
#define WHILE_SYM 885
#define WITH 886
#define WITH_CUBE_SYM 887
#define WITH_ROLLUP_SYM 888
#define WORK_SYM 889
#define WRAPPER_SYM 890
#define WRITE_SYM 891
#define X509_SYM 892
#define XA_SYM 893
#define XML_SYM 894
#define XOR 895
#define YEAR_MONTH_SYM 896
#define YEAR_SYM 897
#define ZEROFILL 898
#define IMPOSSIBLE_ACTION 899

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:355  */

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;

  /* structs */
  LEX_STRING lex_str;
  LEX_SYMBOL symbol;
  struct sys_var_with_base variable;
  struct { int vars, conds, hndlrs, curs; } spblock;

  /* pointers */
  CHARSET_INFO *charset;
  Condition_information_item *cond_info_item;
  DYNCALL_CREATE_DEF *dyncol_def;
  Diagnostics_information *diag_info;
  Item *item;
  Item_num *item_num;
  Item_param *item_param;
  Key_part_spec *key_part;
  LEX *lex;
  LEX_STRING *lex_str_ptr;
  LEX_USER *lex_user;
  List<Condition_information_item> *cond_info_list;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  List<Item> *item_list;
  List<Statement_information_item> *stmt_info_list;
  List<String> *string_list;
  Statement_information_item *stmt_info_item;
  String *string;
  TABLE_LIST *table_list;
  Table_ident *table;
  char *simple_string;
  chooser_compare_func_creator boolfunc2creator;
  class my_var *myvar;
  class sp_condition_value *spcondvalue;
  class sp_head *sphead;
  class sp_label *splabel;
  class sp_name *spname;
  class sp_variable *spvar;
  handlerton *db_type;
  st_select_lex *select_lex;
  struct p_elem_val *p_elem_value;
  udf_func *udf;

  /* enums */
  enum Cast_target cast_type;
  enum Condition_information_item::Name cond_info_item_name;
  enum enum_diag_condition_item_name diag_condition_item_name;
  enum Diagnostics_information::Which_area diag_area;
  enum Field::geometry_type geom_type;
  enum Foreign_key::fk_option m_fk_option;
  enum Item_udftype udf_type;
  enum Key::Keytype key_type;
  enum Statement_information_item::Name stmt_info_item_name;
  enum enum_field_types field_type;
  enum enum_filetype filetype;
  enum enum_tx_isolation tx_isolation;
  enum enum_var_type var_type;
  enum enum_yes_no_unknown m_yes_no_unk;
  enum ha_choice choice;
  enum ha_key_alg key_alg;
  enum ha_rkey_function ha_rkey_mode;
  enum index_hint_type index_hint;
  enum interval_type interval, interval_time_st;
  enum row_type row_type;
  enum sp_variable::enum_mode spvar_mode;
  enum thr_lock_type lock_type;
  enum enum_mysql_timestamp_type date_time_type;
  DDL_options_st object_ddl_options;

#line 2397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int MYSQLparse (THD *thd);

#endif /* !YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 1021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:358  */

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

#line 2414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  635
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   66418

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  667
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1031
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2860
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  4901

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   899

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   660,     2,     2,     2,   654,   649,     2,
     657,   658,   652,   651,   659,   650,   665,   653,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   666,   663,
     647,   645,   646,     2,   664,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   655,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   661,   648,   662,   656,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  2025,  2025,  2035,  2034,  2059,  2066,  2068,  2072,  2073,
    2074,  2079,  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,
    2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,  2096,  2097,
    2098,  2099,  2100,  2101,  2102,  2103,  2104,  2105,  2106,  2107,
    2108,  2109,  2110,  2111,  2112,  2113,  2114,  2115,  2116,  2117,
    2118,  2119,  2120,  2121,  2122,  2123,  2124,  2125,  2126,  2127,
    2128,  2129,  2130,  2131,  2132,  2133,  2134,  2138,  2147,  2148,
    2152,  2161,  2167,  2177,  2176,  2186,  2188,  2192,  2193,  2197,
    2211,  2210,  2227,  2226,  2235,  2236,  2240,  2244,  2248,  2252,
    2256,  2260,  2265,  2269,  2273,  2277,  2281,  2285,  2290,  2294,
    2299,  2326,  2330,  2334,  2339,  2342,  2344,  2345,  2349,  2355,
    2357,  2358,  2362,  2368,  2370,  2371,  2375,  2382,  2386,  2401,
    2405,  2411,  2417,  2423,  2433,  2437,  2441,  2455,  2454,  2493,
    2490,  2503,  2501,  2513,  2511,  2522,  2521,  2534,  2533,  2542,
    2547,  2553,  2557,  2561,  2561,  2568,  2567,  2579,  2580,  2584,
    2589,  2594,  2599,  2604,  2609,  2614,  2622,  2621,  2653,  2652,
    2659,  2666,  2667,  2673,  2679,  2689,  2695,  2701,  2703,  2710,
    2711,  2715,  2725,  2726,  2734,  2734,  2778,  2792,  2803,  2821,
    2822,  2826,  2827,  2832,  2834,  2836,  2838,  2840,  2842,  2844,
    2850,  2851,  2855,  2859,  2867,  2866,  2879,  2881,  2884,  2886,
    2890,  2894,  2901,  2903,  2907,  2908,  2913,  2912,  2945,  2947,
    2951,  2952,  2956,  2960,  2961,  2962,  2963,  2967,  2968,  2972,
    2973,  2978,  2981,  3000,  2999,  3071,  3084,  3083,  3142,  3164,
    3164,  3183,  3184,  3189,  3191,  3196,  3211,  3219,  3223,  3242,
    3243,  3247,  3251,  3257,  3263,  3269,  3278,  3292,  3307,  3313,
    3314,  3320,  3323,  3327,  3335,  3352,  3354,  3372,  3378,  3380,
    3382,  3384,  3386,  3388,  3390,  3392,  3394,  3396,  3398,  3400,
    3405,  3420,  3436,  3437,  3442,  3448,  3457,  3463,  3472,  3480,
    3489,  3498,  3500,  3509,  3514,  3520,  3529,  3537,  3539,  3541,
    3543,  3545,  3547,  3549,  3551,  3553,  3555,  3557,  3559,  3561,
    3566,  3578,  3593,  3594,  3598,  3599,  3600,  3601,  3602,  3603,
    3604,  3605,  3606,  3607,  3608,  3612,  3613,  3614,  3615,  3620,
    3619,  3630,  3630,  3683,  3682,  3707,  3757,  3798,  3817,  3816,
    3836,  3853,  3855,  3856,  3860,  3874,  3891,  3893,  3909,  3891,
    3928,  3930,  3931,  3936,  3935,  4005,  4007,  4005,  4016,  4021,
    4022,  4026,  4027,  4032,  4036,  4031,  4057,  4061,  4056,  4080,
    4090,  4094,  4095,  4100,  4099,  4121,  4120,  4130,  4129,  4140,
    4140,  4180,  4195,  4194,  4226,  4225,  4245,  4259,  4268,  4267,
    4275,  4274,  4283,  4282,  4293,  4292,  4301,  4300,  4310,  4309,
    4320,  4322,  4327,  4329,  4331,  4348,  4353,  4359,  4366,  4367,
    4375,  4381,  4390,  4396,  4402,  4403,  4407,  4407,  4412,  4413,
    4414,  4418,  4419,  4420,  4424,  4428,  4429,  4430,  4434,  4435,
    4436,  4437,  4438,  4439,  4440,  4441,  4445,  4449,  4450,  4451,
    4455,  4456,  4457,  4458,  4459,  4463,  4467,  4468,  4469,  4473,
    4474,  4475,  4476,  4477,  4478,  4479,  4483,  4487,  4488,  4489,
    4493,  4494,  4495,  4500,  4508,  4516,  4524,  4537,  4550,  4555,
    4560,  4568,  4576,  4584,  4592,  4600,  4608,  4616,  4626,  4636,
    4646,  4648,  4652,  4657,  4667,  4668,  4707,  4706,  4709,  4715,
    4715,  4716,  4730,  4731,  4735,  4737,  4736,  4740,  4739,  4745,
    4782,  4783,  4788,  4787,  4806,  4821,  4820,  4837,  4841,  4849,
    4848,  4851,  4853,  4855,  4857,  4862,  4863,  4869,  4870,  4887,
    4888,  4892,  4893,  4897,  4913,  4923,  4934,  4943,  4944,  4957,
    4959,  4958,  4963,  4961,  4972,  4973,  4977,  4992,  5008,  5009,
    5022,  5031,  5053,  5054,  5059,  5058,  5083,  5095,  5107,  5106,
    5121,  5120,  5137,  5159,  5163,  5192,  5204,  5205,  5210,  5221,
    5209,  5246,  5247,  5251,  5264,  5285,  5298,  5324,  5325,  5330,
    5329,  5367,  5376,  5377,  5381,  5382,  5386,  5388,  5394,  5400,
    5402,  5404,  5406,  5408,  5410,  5420,  5435,  5419,  5449,  5450,
    5454,  5455,  5459,  5460,  5464,  5465,  5470,  5473,  5481,  5484,
    5491,  5495,  5501,  5503,  5507,  5508,  5512,  5513,  5514,  5518,
    5523,  5528,  5533,  5538,  5543,  5548,  5553,  5568,  5574,  5589,
    5594,  5609,  5615,  5633,  5638,  5643,  5648,  5653,  5658,  5664,
    5663,  5689,  5690,  5691,  5696,  5701,  5706,  5708,  5710,  5712,
    5718,  5723,  5728,  5736,  5744,  5750,  5759,  5767,  5784,  5805,
    5816,  5817,  5818,  5819,  5820,  5821,  5822,  5826,  5827,  5828,
    5832,  5833,  5834,  5835,  5840,  5847,  5848,  5852,  5853,  5857,
    5858,  5863,  5862,  5870,  5869,  5877,  5876,  5884,  5883,  5893,
    5890,  5901,  5899,  5908,  5907,  5942,  5945,  5947,  5951,  5955,
    5956,  5960,  5965,  5978,  5964,  5997,  5998,  6004,  6005,  6010,
    6013,  6017,  6024,  6025,  6029,  6030,  6034,  6040,  6046,  6050,
    6063,  6080,  6081,  6082,  6097,  6102,  6106,  6111,  6116,  6120,
    6125,  6130,  6136,  6141,  6147,  6151,  6156,  6161,  6179,  6181,
    6184,  6201,  6204,  6209,  6214,  6225,  6230,  6235,  6240,  6242,
    6244,  6246,  6248,  6250,  6252,  6254,  6256,  6258,  6260,  6262,
    6271,  6272,  6273,  6279,  6280,  6281,  6282,  6283,  6287,  6291,
    6292,  6296,  6297,  6301,  6302,  6303,  6304,  6305,  6309,  6310,
    6311,  6312,  6313,  6317,  6322,  6324,  6330,  6332,  6340,  6341,
    6343,  6348,  6357,  6358,  6362,  6363,  6367,  6368,  6369,  6373,
    6374,  6375,  6376,  6379,  6380,  6384,  6385,  6389,  6390,  6394,
    6395,  6399,  6400,  6401,  6402,  6409,  6410,  6416,  6422,  6428,
    6434,  6435,  6442,  6450,  6458,  6464,  6473,  6488,  6494,  6499,
    6500,  6504,  6509,  6513,  6514,  6518,  6519,  6523,  6529,  6533,
    6534,  6538,  6546,  6547,  6551,  6552,  6556,  6557,  6561,  6562,
    6563,  6571,  6572,  6573,  6574,  6575,  6579,  6580,  6585,  6584,
    6597,  6598,  6602,  6605,  6606,  6607,  6608,  6612,  6620,  6627,
    6628,  6632,  6642,  6643,  6647,  6648,  6651,  6653,  6657,  6669,
    6670,  6674,  6681,  6694,  6695,  6697,  6699,  6705,  6710,  6716,
    6722,  6729,  6739,  6740,  6741,  6742,  6743,  6747,  6748,  6752,
    6753,  6757,  6758,  6762,  6763,  6764,  6768,  6769,  6773,  6777,
    6789,  6790,  6794,  6795,  6799,  6800,  6804,  6805,  6809,  6810,
    6814,  6815,  6819,  6820,  6824,  6825,  6826,  6829,  6831,  6836,
    6838,  6840,  6848,  6856,  6862,  6870,  6871,  6875,  6879,  6880,
    6890,  6891,  6892,  6896,  6900,  6907,  6913,  6925,  6926,  6930,
    6931,  6935,  6937,  6946,  6960,  6945,  6980,  6979,  6993,  7002,
    7001,  7017,  7016,  7032,  7031,  7047,  7041,  7058,  7057,  7092,
    7097,  7102,  7107,  7113,  7112,  7121,  7122,  7123,  7124,  7128,
    7129,  7141,  7142,  7146,  7147,  7150,  7152,  7160,  7168,  7170,
    7172,  7173,  7181,  7182,  7188,  7197,  7195,  7208,  7221,  7220,
    7233,  7231,  7244,  7251,  7261,  7262,  7289,  7296,  7300,  7306,
    7304,  7323,  7325,  7330,  7338,  7337,  7353,  7357,  7356,  7368,
    7369,  7373,  7389,  7390,  7394,  7402,  7406,  7411,  7416,  7423,
    7430,  7440,  7450,  7461,  7471,  7477,  7483,  7492,  7502,  7518,
    7532,  7542,  7546,  7551,  7552,  7555,  7557,  7558,  7559,  7560,
    7563,  7568,  7576,  7581,  7589,  7590,  7594,  7595,  7599,  7599,
    7602,  7604,  7608,  7609,  7613,  7614,  7622,  7623,  7624,  7628,
    7629,  7634,  7642,  7643,  7644,  7645,  7650,  7649,  7659,  7658,
    7665,  7672,  7682,  7699,  7702,  7709,  7713,  7720,  7724,  7728,
    7735,  7735,  7741,  7742,  7746,  7747,  7748,  7752,  7753,  7762,
    7769,  7770,  7775,  7774,  7786,  7787,  7788,  7792,  7793,  7793,
    7798,  7797,  7818,  7819,  7823,  7824,  7828,  7829,  7830,  7834,
    7835,  7840,  7839,  7860,  7861,  7865,  7870,  7871,  7878,  7880,
    7884,  7886,  7885,  7897,  7899,  7898,  7911,  7912,  7917,  7926,
    7927,  7928,  7932,  7939,  7949,  7957,  7958,  7958,  7962,  7961,
    7984,  7985,  7989,  7990,  7994,  7995,  7996,  7997,  7998,  7999,
    8003,  8004,  8009,  8008,  8029,  8030,  8031,  8036,  8035,  8041,
    8048,  8054,  8063,  8064,  8068,  8082,  8081,  8094,  8095,  8099,
    8100,  8104,  8114,  8124,  8125,  8130,  8129,  8140,  8141,  8145,
    8146,  8150,  8160,  8171,  8170,  8178,  8178,  8187,  8188,  8193,
    8194,  8203,  8212,  8213,  8217,  8217,  8229,  8234,  8234,  8243,
    8248,  8247,  8262,  8266,  8267,  8288,  8288,  8302,  8313,  8316,
    8318,  8322,  8328,  8335,  8337,  8345,  8346,  8350,  8351,  8368,
    8387,  8389,  8396,  8407,  8408,  8409,  8423,  8428,  8450,  8456,
    8462,  8468,  8469,  8470,  8471,  8472,  8476,  8477,  8478,  8482,
    8483,  8484,  8488,  8489,  8494,  8545,  8552,  8595,  8601,  8607,
    8613,  8619,  8625,  8631,  8637,  8641,  8647,  8653,  8659,  8665,
    8671,  8675,  8681,  8690,  8696,  8704,  8710,  8720,  8726,  8735,
    8745,  8752,  8762,  8768,  8777,  8781,  8787,  8793,  8799,  8805,
    8811,  8817,  8823,  8829,  8835,  8841,  8847,  8853,  8859,  8865,
    8869,  8870,  8874,  8875,  8879,  8880,  8884,  8885,  8889,  8890,
    8891,  8892,  8893,  8894,  8898,  8899,  8904,  8910,  8914,  8921,
    8928,  8935,  8942,  8949,  8955,  8954,  8962,  8969,  8976,  8984,
    8995,  9017,  9024,  9032,  9033,  9034,  9035,  9036,  9037,  9048,
    9049,  9050,  9051,  9052,  9058,  9062,  9068,  9074,  9080,  9086,
    9088,  9095,  9102,  9108,  9132,  9142,  9149,  9157,  9163,  9170,
    9176,  9186,  9193,  9209,  9215,  9221,  9230,  9239,  9245,  9251,
    9257,  9263,  9277,  9288,  9294,  9300,  9306,  9312,  9318,  9325,
    9332,  9338,  9344,  9350,  9356,  9362,  9368,  9374,  9380,  9386,
    9394,  9415,  9422,  9428,  9435,  9442,  9449,  9456,  9462,  9468,
    9475,  9481,  9488,  9494,  9500,  9506,  9512,  9518,  9536,  9542,
    9548,  9555,  9562,  9570,  9577,  9584,  9591,  9598,  9615,  9621,
    9627,  9633,  9639,  9646,  9652,  9658,  9664,  9670,  9676,  9682,
    9689,  9697,  9703,  9709,  9715,  9721,  9729,  9735,  9749,  9755,
    9761,  9769,  9781,  9788,  9803,  9809,  9816,  9823,  9830,  9837,
    9844,  9848,  9868,  9867,  9939,  9977,  9979,  9984,  9985,  9989,
    9990,  9994,  9995,  9999, 10006, 10014, 10041, 10047, 10053, 10059,
   10065, 10071, 10080, 10087, 10089, 10086, 10096, 10107, 10113, 10119,
   10125, 10131, 10137, 10143, 10149, 10155, 10162, 10161, 10181, 10180,
   10192, 10202, 10210, 10226, 10227, 10232, 10237, 10240, 10243, 10242,
   10258, 10260, 10266, 10265, 10282, 10285, 10284, 10288, 10290, 10292,
   10294, 10296, 10298, 10300, 10302, 10308, 10314, 10317, 10316, 10322,
   10323, 10327, 10334, 10342, 10343, 10347, 10354, 10362, 10363, 10367,
   10368, 10372, 10380, 10391, 10392, 10404, 10415, 10416, 10422, 10423,
   10443, 10447, 10445, 10463, 10461, 10472, 10482, 10480, 10498, 10497,
   10507, 10518, 10516, 10535, 10534, 10545, 10557, 10558, 10559, 10563,
   10564, 10572, 10573, 10577, 10592, 10592, 10607, 10643, 10728, 10739,
   10736, 10761, 10774, 10774, 10790, 10789, 10810, 10827, 10810, 10834,
   10838, 10861, 10862, 10867, 10870, 10871, 10872, 10876, 10877, 10882,
   10881, 10887, 10886, 10894, 10895, 10898, 10900, 10900, 10904, 10904,
   10909, 10910, 10914, 10916, 10921, 10922, 10926, 10937, 10950, 10951,
   10952, 10953, 10954, 10955, 10956, 10957, 10958, 10959, 10960, 10961,
   10965, 10966, 10967, 10968, 10969, 10970, 10971, 10972, 10973, 10977,
   10978, 10979, 10980, 10983, 10985, 10986, 10990, 10991, 10999, 11001,
   11005, 11007, 11006, 11020, 11023, 11022, 11037, 11043, 11057, 11059,
   11063, 11065, 11070, 11071, 11088, 11110, 11114, 11115, 11119, 11131,
   11133, 11138, 11137, 11187, 11189, 11194, 11195, 11196, 11200, 11201,
   11205, 11218, 11225, 11230, 11237, 11244, 11251, 11261, 11288, 11292,
   11298, 11304, 11313, 11321, 11325, 11332, 11333, 11337, 11338, 11339,
   11343, 11344, 11345, 11346, 11347, 11348, 11352, 11353, 11354, 11355,
   11356, 11360, 11361, 11362, 11363, 11364, 11368, 11369, 11370, 11371,
   11372, 11376, 11381, 11382, 11386, 11387, 11391, 11393, 11392, 11430,
   11431, 11435, 11436, 11440, 11450, 11450, 11461, 11462, 11465, 11485,
   11489, 11503, 11504, 11509, 11508, 11518, 11528, 11517, 11530, 11543,
   11555, 11554, 11572, 11571, 11580, 11580, 11597, 11603, 11618, 11634,
   11642, 11646, 11651, 11650, 11659, 11664, 11670, 11675, 11680, 11688,
   11689, 11693, 11704, 11717, 11718, 11722, 11734, 11738, 11747, 11750,
   11757, 11758, 11766, 11774, 11765, 11784, 11791, 11783, 11801, 11809,
   11810, 11818, 11822, 11823, 11834, 11835, 11839, 11848, 11849, 11850,
   11852, 11851, 11862, 11864, 11868, 11869, 11871, 11870, 11874, 11873,
   11879, 11880, 11884, 11885, 11889, 11899, 11900, 11904, 11905, 11910,
   11909, 11923, 11924, 11928, 11933, 11941, 11942, 11950, 11952, 11952,
   11960, 11968, 11959, 11990, 11991, 11995, 12003, 12004, 12008, 12018,
   12019, 12026, 12025, 12041, 12052, 12040, 12055, 12054, 12066, 12065,
   12078, 12080, 12084, 12085, 12089, 12102, 12118, 12119, 12123, 12124,
   12128, 12129, 12130, 12135, 12134, 12155, 12157, 12160, 12162, 12165,
   12166, 12169, 12173, 12177, 12181, 12185, 12189, 12193, 12197, 12201,
   12209, 12212, 12222, 12221, 12237, 12244, 12252, 12260, 12268, 12276,
   12284, 12291, 12298, 12304, 12306, 12308, 12317, 12321, 12326, 12325,
   12332, 12331, 12336, 12345, 12352, 12357, 12362, 12367, 12369, 12371,
   12373, 12375, 12377, 12384, 12392, 12394, 12402, 12409, 12416, 12423,
   12429, 12434, 12442, 12450, 12454, 12459, 12466, 12471, 12478, 12485,
   12491, 12498, 12505, 12510, 12515, 12520, 12527, 12549, 12551, 12553,
   12558, 12559, 12562, 12564, 12568, 12569, 12573, 12574, 12578, 12579,
   12583, 12584, 12588, 12589, 12593, 12594, 12602, 12614, 12613, 12629,
   12628, 12638, 12639, 12640, 12641, 12642, 12646, 12647, 12651, 12658,
   12659, 12660, 12664, 12665, 12677, 12678, 12679, 12694, 12693, 12706,
   12705, 12717, 12721, 12722, 12735, 12738, 12737, 12749, 12750, 12755,
   12757, 12759, 12761, 12763, 12765, 12773, 12775, 12777, 12779, 12784,
   12786, 12794, 12796, 12798, 12800, 12816, 12817, 12821, 12822, 12825,
   12827, 12828, 12832, 12839, 12840, 12844, 12843, 12853, 12854, 12858,
   12858, 12862, 12861, 12867, 12871, 12872, 12876, 12877, 12885, 12884,
   12895, 12899, 12903, 12916, 12915, 12930, 12931, 12932, 12935, 12936,
   12937, 12938, 12946, 12950, 12959, 12965, 12977, 12988, 12998, 13008,
   12976, 13016, 13017, 13021, 13022, 13026, 13027, 13035, 13039, 13040,
   13041, 13044, 13046, 13050, 13051, 13055, 13060, 13067, 13072, 13079,
   13081, 13085, 13086, 13090, 13095, 13103, 13104, 13107, 13109, 13117,
   13118, 13122, 13123, 13124, 13128, 13130, 13135, 13136, 13145, 13146,
   13150, 13151, 13155, 13168, 13192, 13204, 13211, 13230, 13238, 13243,
   13256, 13265, 13281, 13298, 13299, 13300, 13308, 13309, 13310, 13311,
   13325, 13331, 13337, 13343, 13349, 13355, 13373, 13383, 13393, 13399,
   13408, 13420, 13426, 13432, 13448, 13449, 13453, 13462, 13477, 13481,
   13524, 13528, 13545, 13549, 13621, 13645, 13675, 13676, 13686, 13693,
   13697, 13703, 13709, 13719, 13725, 13734, 13744, 13745, 13773, 13787,
   13801, 13816, 13817, 13827, 13828, 13838, 13839, 13840, 13844, 13857,
   13887, 13897, 13897, 13899, 13909, 13910, 13911, 13912, 13913, 13914,
   13915, 13916, 13917, 13918, 13919, 13920, 13921, 13922, 13923, 13924,
   13925, 13926, 13927, 13928, 13929, 13930, 13931, 13932, 13933, 13934,
   13935, 13936, 13937, 13938, 13939, 13940, 13941, 13942, 13943, 13944,
   13945, 13946, 13947, 13948, 13949, 13950, 13951, 13952, 13953, 13954,
   13955, 13956, 13957, 13958, 13959, 13960, 13961, 13962, 13963, 13964,
   13965, 13966, 13967, 13968, 13969, 13979, 13980, 13981, 13982, 13983,
   13984, 13985, 13986, 13987, 13988, 13989, 13990, 13991, 13992, 13993,
   13994, 13995, 13996, 13997, 13998, 13999, 14000, 14001, 14002, 14003,
   14004, 14005, 14006, 14007, 14008, 14009, 14010, 14011, 14012, 14013,
   14014, 14015, 14016, 14017, 14018, 14019, 14020, 14021, 14022, 14023,
   14024, 14025, 14026, 14027, 14028, 14033, 14034, 14035, 14036, 14037,
   14038, 14039, 14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047,
   14048, 14049, 14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057,
   14058, 14059, 14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067,
   14068, 14069, 14070, 14071, 14072, 14073, 14074, 14075, 14076, 14077,
   14078, 14079, 14080, 14081, 14082, 14083, 14084, 14085, 14086, 14087,
   14088, 14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096, 14097,
   14098, 14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106, 14107,
   14108, 14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117,
   14118, 14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127,
   14128, 14129, 14130, 14131, 14132, 14133, 14134, 14135, 14136, 14137,
   14138, 14139, 14140, 14141, 14142, 14143, 14144, 14145, 14146, 14147,
   14148, 14149, 14150, 14151, 14152, 14153, 14154, 14155, 14156, 14157,
   14158, 14159, 14160, 14161, 14162, 14163, 14164, 14165, 14166, 14167,
   14168, 14169, 14170, 14171, 14172, 14173, 14174, 14175, 14176, 14177,
   14178, 14179, 14180, 14181, 14182, 14183, 14184, 14185, 14186, 14187,
   14188, 14189, 14190, 14191, 14192, 14193, 14194, 14195, 14196, 14197,
   14198, 14199, 14200, 14201, 14202, 14203, 14204, 14205, 14206, 14207,
   14208, 14209, 14210, 14211, 14212, 14213, 14214, 14215, 14216, 14217,
   14218, 14219, 14220, 14221, 14222, 14223, 14224, 14225, 14226, 14227,
   14228, 14229, 14230, 14231, 14232, 14233, 14234, 14235, 14236, 14237,
   14238, 14239, 14240, 14241, 14242, 14243, 14244, 14245, 14246, 14247,
   14248, 14249, 14250, 14251, 14252, 14253, 14254, 14255, 14256, 14257,
   14258, 14259, 14260, 14261, 14262, 14263, 14264, 14265, 14266, 14267,
   14268, 14269, 14270, 14271, 14272, 14273, 14274, 14275, 14276, 14277,
   14278, 14279, 14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287,
   14288, 14289, 14290, 14291, 14303, 14302, 14315, 14323, 14314, 14340,
   14341, 14346, 14345, 14352, 14351, 14361, 14360, 14371, 14370, 14376,
   14384, 14386, 14391, 14391, 14400, 14399, 14413, 14412, 14417, 14421,
   14422, 14423, 14427, 14428, 14429, 14430, 14434, 14435, 14436, 14437,
   14442, 14466, 14492, 14503, 14515, 14529, 14544, 14563, 14580, 14592,
   14600, 14616, 14642, 14679, 14693, 14694, 14695, 14696, 14700, 14718,
   14736, 14737, 14741, 14742, 14743, 14744, 14748, 14762, 14766, 14767,
   14768, 14778, 14779, 14780, 14786, 14792, 14804, 14803, 14816, 14817,
   14821, 14822, 14826, 14841, 14842, 14843, 14848, 14849, 14854, 14853,
   14870, 14879, 14889, 14888, 14919, 14920, 14924, 14925, 14929, 14930,
   14931, 14932, 14934, 14933, 14946, 14947, 14948, 14949, 14950, 14956,
   14961, 14967, 14978, 14989, 14993, 15000, 15009, 15011, 15016, 15021,
   15028, 15040, 15052, 15059, 15071, 15072, 15075, 15076, 15079, 15084,
   15092, 15102, 15121, 15124, 15126, 15130, 15131, 15138, 15140, 15144,
   15145, 15150, 15149, 15153, 15152, 15156, 15155, 15159, 15158, 15161,
   15162, 15163, 15164, 15165, 15166, 15167, 15168, 15169, 15170, 15171,
   15172, 15173, 15174, 15175, 15176, 15177, 15178, 15179, 15180, 15181,
   15182, 15183, 15184, 15185, 15186, 15190, 15191, 15195, 15196, 15200,
   15207, 15214, 15224, 15235, 15244, 15253, 15265, 15270, 15278, 15283,
   15291, 15296, 15303, 15303, 15304, 15304, 15307, 15314, 15319, 15325,
   15331, 15337, 15341, 15345, 15346, 15350, 15378, 15380, 15384, 15388,
   15392, 15399, 15400, 15404, 15405, 15409, 15410, 15414, 15415, 15421,
   15427, 15433, 15439, 15449, 15448, 15458, 15467, 15468, 15472, 15473,
   15478, 15479, 15480, 15485, 15486, 15487, 15491, 15492, 15496, 15508,
   15517, 15527, 15536, 15550, 15551, 15556, 15555, 15571, 15572, 15576,
   15577, 15581, 15581, 15602, 15603, 15607, 15608, 15609, 15613, 15618,
   15626, 15629, 15627, 15642, 15649, 15670, 15694, 15696, 15700, 15701,
   15705, 15706, 15714, 15715, 15716, 15717, 15723, 15729, 15739, 15741,
   15743, 15748, 15749, 15750, 15751, 15752, 15756, 15757, 15758, 15759,
   15760, 15761, 15771, 15772, 15777, 15790, 15806, 15808, 15810, 15816,
   15817, 15819, 15825, 15824, 15843, 15844, 15848, 15854, 15863, 15863,
   15887, 15888, 15893, 15894, 15896, 15898, 15912, 15921, 15927, 15932,
   15909, 15982, 15983, 15987, 16007, 16028, 16032, 16038, 16044, 16003,
   16103, 16115, 16124, 16128, 16102, 16145, 16149, 16153, 16157, 16161,
   16165, 16172, 16179, 16186, 16196, 16197, 16201, 16202, 16203, 16207,
   16208, 16213, 16215, 16214, 16220, 16221, 16225, 16232, 16242, 16248,
   16259
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "ATOMIC_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_ADD_SYM",
  "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM", "COLUMN_DELETE_SYM",
  "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONSTRAINT_CATALOG_SYM",
  "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM",
  "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM",
  "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE",
  "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE", "CURRENT_POS_SYM",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DELETE_DOMAIN_ID_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM",
  "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM",
  "DO_DOMAIN_IDS_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE",
  "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM",
  "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT",
  "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FORMAT_SYM",
  "FOUND_SYM", "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE",
  "GENERAL", "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM",
  "GET_FORMAT", "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF_SYM", "IGNORE_DOMAIN_IDS_SYM", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_STATEMENT_TIME_SYM", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD_SYM", "ON", "ONE_SYM", "ONLY_SYM",
  "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION",
  "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER",
  "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD_SYM", "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM",
  "PLUGIN_SYM", "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM",
  "PRECISION", "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM",
  "PRIVILEGES", "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM",
  "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM",
  "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM",
  "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM",
  "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES",
  "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM",
  "REVERSE_SYM", "REVOKE", "RIGHT", "ROLE_SYM", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "ROW_COUNT_SYM", "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM",
  "SCHEMA_NAME_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM",
  "SECURITY_SYM", "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM",
  "SERIALIZABLE_SYM", "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM",
  "SERVER_OPTIONS", "SET", "SET_VAR", "SHARE_SYM", "SHIFT_LEFT",
  "SHIFT_RIGHT", "SHOW", "SHUTDOWN", "SIGNAL_SYM", "SIGNED_SYM",
  "SIMPLE_SYM", "SLAVE", "SLAVES", "SLAVE_POS_SYM", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM",
  "SOURCE_SYM", "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM",
  "SQLSTATE_SYM", "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT",
  "SQL_CACHE_SYM", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM",
  "SQL_SMALL_RESULT", "SQL_SYM", "SQL_THREAD", "REF_SYSTEM_ID_SYM",
  "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM", "STATEMENT_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_SYM", "TABLE_CHECKSUM_SYM",
  "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRANSACTIONAL_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM",
  "VIRTUAL_SYM", "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM",
  "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM",
  "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM",
  "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL",
  "IMPOSSIBLE_ACTION", "'='", "'>'", "'<'", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "do_domain_id_list", "do_domain_id",
  "ignore_domain_id_list", "ignore_domain_id", "master_file_def",
  "optional_connection_name", "connection_name", "create", "$@5", "$@6",
  "$@7", "$@8", "$@9", "$@10", "$@11", "server_def", "$@12",
  "server_options_list", "server_option", "event_tail", "$@13",
  "ev_schedule_time", "$@14", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@15", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@16",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_param_name_and_type", "@17", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19",
  "sp_cursor_stmt", "$@20", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_compound_ok", "sp_proc_stmt_if", "$@21",
  "sp_proc_stmt_statement", "$@22", "sp_proc_stmt_return", "$@23",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@24", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@25", "$@26", "$@27", "sp_elseifs",
  "case_stmt_specification", "$@28", "case_stmt_body", "$@29", "$@30",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@31", "$@32", "searched_when_clause", "$@33",
  "$@34", "else_clause_opt", "sp_opt_label", "sp_labeled_block", "$@35",
  "sp_unlabeled_block", "$@36", "sp_unlabeled_block_not_atomic", "$@37",
  "sp_block_content", "$@38", "loop_body", "while_body", "$@39",
  "repeat_body", "$@40", "pop_sp_label", "pop_sp_empty_label",
  "sp_labeled_control", "$@41", "$@42", "$@43", "sp_unlabeled_control",
  "$@44", "$@45", "$@46", "trg_action_time", "trg_event",
  "change_tablespace_access", "change_tablespace_info", "tablespace_info",
  "opt_logfile_group_name", "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@47", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@48", "$@49", "create_like", "opt_create_select", "$@50", "$@51",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@52",
  "have_partitioning", "partition_entry", "$@53", "partition",
  "part_type_def", "$@54", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@55",
  "$@56", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@57", "part_name", "opt_part_values", "$@58", "$@59", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@60", "$@61",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@62", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@63", "$@64", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option",
  "opt_if_not_exists_table_element", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@65", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "udf_type", "create_field_list", "field_list",
  "field_list_item", "column_def", "key_def", "$@66", "$@67", "$@68",
  "$@69", "$@70", "$@71", "$@72", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@73",
  "$@74", "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "field_type", "spatial_type",
  "char", "nchar", "varchar", "nvarchar", "int_type", "real_type",
  "srid_option", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "charset_or_alias", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@75", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "constraint_key_type", "key_or_index", "opt_key_or_index",
  "keys_or_index", "opt_unique", "fulltext", "spatial",
  "normal_key_options", "fulltext_key_options", "spatial_key_options",
  "normal_key_opts", "spatial_key_opts", "fulltext_key_opts",
  "opt_USING_key_algorithm", "opt_key_algorithm_clause", "key_using_alg",
  "all_key_opt", "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@76", "$@77", "$@78", "$@79", "$@80", "$@81",
  "$@82", "$@83", "$@84", "ev_alter_on_schedule_completion",
  "opt_ev_rename_to", "opt_ev_sql_stmt", "ident_or_empty",
  "alter_commands", "$@85", "$@86", "$@87", "remove_partitioning",
  "all_or_alt_part_name_list", "add_partition_rule", "$@88",
  "add_part_extra", "reorg_partition_rule", "$@89", "reorg_parts_rule",
  "$@90", "alt_part_name_list", "alt_part_name_item", "alter_list",
  "add_column", "alter_list_item", "opt_index_lock_algorithm",
  "alter_algorithm_option", "alter_lock_option", "opt_column",
  "opt_ignore", "alter_options", "$@91", "alter_options_part2",
  "alter_option_list", "alter_option", "opt_restrict", "opt_place",
  "opt_to", "slave", "$@92", "$@93", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@94",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@95", "opt_checksum_type",
  "repair_table_or_view", "$@96", "repair", "$@97", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@98", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@99", "persistent_index_stat_spec",
  "$@100", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@101", "check", "$@102",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@103", "opt_no_write_to_binlog",
  "rename", "$@104", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@105", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@106", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@107", "cache_keys_spec", "$@108", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren", "$@109",
  "select_paren_derived", "$@110", "select_init2", "$@111", "select_part2",
  "select_options_and_item_list", "$@112", "table_expression",
  "from_clause", "opt_from_clause", "table_reference_list",
  "select_options", "select_option_list", "select_option",
  "opt_select_lock_type", "select_item_list", "select_item",
  "remember_tok_start", "remember_name", "remember_end", "select_alias",
  "opt_default_time_precision", "opt_time_precision", "optional_braces",
  "expr", "bool_pri", "predicate", "bit_expr", "or", "and", "not", "not2",
  "comp_op", "all_or_any", "opt_dyncol_type", "dyncol_type", "$@113",
  "dyncall_create_element", "dyncall_create_list", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@114", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@115", "$@116", "$@117", "variable", "$@118",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "$@119", "gorder_list", "in_sum_expr", "$@120",
  "cast_type", "$@121", "$@122", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@123", "$@124", "$@125", "$@126", "$@127", "$@128",
  "inner_join", "normal_join", "opt_use_partition", "use_partition",
  "table_factor", "$@129", "select_derived_union", "$@130",
  "select_init2_derived", "select_part2_derived", "$@131",
  "select_derived", "$@132", "select_derived2", "$@133", "$@134",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@135",
  "$@136", "index_hints_list", "opt_index_hints_list", "$@137",
  "opt_key_definition", "$@138", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "opt_where_clause", "$@139", "opt_having_clause", "$@140", "opt_escape",
  "opt_group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@141", "order_list", "order_dir", "opt_limit_clause",
  "limit_clause_init", "limit_clause", "limit_options", "limit_option",
  "limit_rows_option", "delete_limit_clause", "int_num", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "choice", "opt_procedure_clause", "$@142", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@143",
  "select_var_list", "select_var_ident", "select_outvar", "opt_into",
  "into", "$@144", "into_destination", "$@145", "$@146", "do", "$@147",
  "drop", "$@148", "$@149", "$@150", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists_table_element", "opt_if_exists",
  "opt_temporary", "insert", "$@151", "$@152", "replace", "$@153", "$@154",
  "insert_lock_option", "replace_lock_option", "insert2", "insert_table",
  "insert_field_spec", "$@155", "fields", "insert_values", "$@156",
  "$@157", "values_list", "ident_eq_list", "ident_eq_value", "equal",
  "opt_equal", "no_braces", "$@158", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@159", "update", "$@160",
  "$@161", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@162",
  "single_multi", "$@163", "$@164", "$@165", "$@166",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@167", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@168", "show_param",
  "$@169", "$@170", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@171", "$@172", "explainable_command",
  "describe_command", "analyze_stmt_command", "opt_extended_describe",
  "opt_format_json", "opt_describe_column", "flush", "$@173",
  "flush_options", "$@174", "opt_flush_lock", "flush_lock", "$@175",
  "flush_options_list", "flush_option", "opt_table_list",
  "opt_delete_gtid_domain", "delete_domain_id_list", "delete_domain_id",
  "optional_flush_tables_arguments", "reset", "$@176", "reset_options",
  "reset_option", "$@177", "$@178", "slave_reset_options",
  "master_reset_options", "purge", "$@179", "purge_options",
  "purge_option", "kill", "$@180", "kill_type", "kill_option", "kill_expr",
  "shutdown", "use", "load", "$@181", "$@182", "$@183", "$@184",
  "data_or_xml", "opt_local", "load_data_lock", "opt_duplicate",
  "opt_field_term", "field_term_list", "field_term", "opt_line_term",
  "line_term_list", "line_term", "opt_xml_rows_identified_by",
  "opt_ignore_lines", "lines_or_rows", "opt_field_or_var_spec",
  "fields_or_vars", "field_or_var", "opt_load_data_set_spec",
  "load_data_set_list", "load_data_set_elem", "text_literal",
  "text_string", "hex_or_bin_String", "param_marker", "signed_literal",
  "literal", "NUM_literal", "temporal_literal", "insert_ident",
  "table_wild", "order_ident", "simple_ident", "simple_ident_nospvar",
  "simple_ident_q", "field_ident", "table_ident", "table_ident_opt_wild",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user_maybe_role", "user_or_role", "user", "keyword",
  "keyword_sp", "set", "$@185", "$@186", "$@187",
  "set_stmt_option_value_following_option_type_list",
  "start_option_value_list", "$@188", "$@189", "$@190",
  "start_option_value_list_following_option_type", "$@191",
  "option_value_list_continued", "option_value_list", "$@192", "$@193",
  "option_value", "$@194", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "opt_for_user", "text_or_password", "set_expr_or_default", "lock",
  "$@195", "table_or_tables", "table_lock_list", "table_lock",
  "lock_option", "unlock", "$@196", "handler", "$@197",
  "handler_read_or_scan", "handler_scan_function", "handler_rkey_function",
  "$@198", "handler_rkey_mode", "revoke", "revoke_command",
  "admin_option_for_role", "grant", "grant_command", "opt_with_admin",
  "opt_with_admin_option", "role_list", "current_role", "grant_role",
  "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@199", "$@200", "$@201",
  "$@202", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "user_and_role_list",
  "via_or_with", "using_or_as", "grant_user", "opt_column_list",
  "column_list", "column_list_id", "require_clause", "grant_options",
  "opt_grant_option", "grant_option_list", "grant_option", "begin",
  "$@203", "compound_statement", "opt_not", "opt_work", "opt_chain",
  "opt_release", "opt_savepoint", "commit", "rollback", "savepoint",
  "release", "union_clause", "union_list", "$@204", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@205",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@206", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@207", "view_list_opt", "view_list", "view_select",
  "$@208", "view_select_aux", "view_check_option", "trigger_tail", "$@209",
  "$@210", "$@211", "$@212", "udf_tail", "udf_tail2", "sf_tail", "$@213",
  "$@214", "$@215", "$@216", "$@217", "sp_tail", "$@218", "$@219", "$@220",
  "$@221", "xa", "xid", "begin_or_start", "opt_join_or_resume",
  "opt_one_phase", "opt_suspend", "$@222", "opt_migrate", "install",
  "uninstall", "keep_gcc_happy", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,    61,    62,    60,   124,    38,
      45,    43,    42,    47,    37,    94,   126,    40,    41,    44,
      33,   123,   125,    59,    64,    46,    58
};
# endif

#define YYPACT_NINF -4291

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-4291)))

#define YYTABLE_NINF -2800

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    7119,  2309,  1791,  1331,  -126,   208, 58144, -4291,   155,  1465,
   -4291,  -168,    99, -4291, -4291, -4291, -4291, -4291,  3590, -4291,
   58144,   105,  1001, -4291, 26282, -4291, -4291, -4291,   -30, -4291,
     196,  1465, -4291,   105,   446, -4291, 58144, -4291,   671,  1593,
     105, -4291, -4291, -4291, 51148, -4291,  -168, 58144, -4291,   654,
   -4291, -4291, 51148,   207,   216,   643,   -23, -4291, -4291, 58144,
   -4291,  2216, -4291,   608,  1367,  1291, -4291, -4291,  1123, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  3248, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, 26924,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,   816, 58144,  1056, 58144,  1390, 58144,
   49240, 58144, -4291,  1376, -4291, -4291,  1525,  1131, -4291, -4291,
    1465,    81, -4291, -4291,  1762,  -168, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,  1140, -4291, -4291,  1236,  -126, -4291, -4291, -4291,
    -159, -4291,  1878,  1683,  1448, 58144,   952, 12575,  1675,  1675,
    1675,  1702,  1729,  1675,  1675,  1675, 58144, -4291,  1675,  1675,
    1675,  1465, -4291, -4291, -4291,  1807, 37792, 58144,  1570,   226,
     -31, 49240, -4291,  1408, 58144,  -126,    79, -4291,  1724, -4291,
   -4291, -4291, 64504,  1465, -4291,  1918,  1790,   971, 58144, -4291,
   -4291, -4291, 64504,  1109,   925,  1382, -4291, -4291,  1532, -4291,
   38428,   186, -4291, -4291, -4291,  1379,  2593, -4291, 28850,  5845,
    1532,  1529,  -126,   -83,  1546,  -126, -4291, -4291, 58144,  -126,
    1465,  1735, -4291, 12575, -4291,   309,   309,   309, -4291,   309,
   -4291,   309,   608,  1407,  1583, -4291, -4291,  1415, 58144,  1841,
   -4291,  1841, -4291, -4291,  1841,  1335,  1592,  1851,  1862,  1871,
    1556,   763,  1131,  1786, -4291, -4291, -4291,  1459,   -19, -4291,
    1536, 41608, -4291, 58144, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,  1384, -4291,  1577,   131,  1618,  1980, -4291, 49240,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, 26282,
    1506, 58144, -4291,  2017, 12575,  1236, -4291,  1615, -4291, -4291,
   26282, -4291, -4291, 26282,   266,  1277, 58144, -4291, -4291,  2160,
   -4291, -4291, -4291, 51784,   952,  1553,  1558,  1571, 17863, -4291,
    1585,  1603,  1619, 12575,  1625,  1633,  1637,  1641,  1645,  1648,
    1656,  1661,  1674,  1680,  1692,  1694,  1703,  1705,  1705,  1705,
    1738,  1743,  1751,  1754,  -177,  1758, -4291,  1783,  1794,  1802,
   -4291, -4291,  1810,  1814,  1825,  1830, -4291, -4291,  1837,  1843,
    1853, 13236,  1855,  1857,  1860, -4291, 23060,  1868,  1872,  1875,
    1884,  1910,  1925,  1927,  1931,  1950, -4291, -4291, 12575,  1738,
   -4291, -4291,  1952, -4291,  1954,  1967,  2002,  2004,  2007,  2012,
    2025,  2042,  2060,  2070,  2086,  2089,  2092,  2106,  2117,  2120,
    2123,  1738, -4291,  -167,  2126,  2129,  1128,  2131, -4291,  2137,
   -4291,   335,  2153,  1705,  1738,  1738,  2159,  2161,  2165,  2170,
    2172,  2175, 17863, 17863, 17863, 12575, -4291, 58144, -4291, 58144,
    1322,  2168, -4291,  2683, 17863,   212, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,  1537,  1817, -4291, -4291, -4291, -4291, -4291,
   -4291,  2177,  1548,  2162, 58144, 58144, 58144,  2223, 58144, 58144,
   58144, -4291, 49240,  1845, 58144, -4291, -4291,  1675,  1824,  4681,
   32055,  2090,  2045,  1866,  1705, -4291, -4291,   607,   613,   672,
    2164, -4291, -4291,  1996,   700,  2186, -4291,   712,   440, -4291,
      92,   723,   727, -4291, -4291, -4291, -4291, -4291, -4291,  1999,
    2345,  2113, -4291, -4291,   175, -4291, -4291, 58144, -4291,  2644,
   12575, -4291, -4291, -4291,  2588,  2324, -4291, -4291, -4291,   894,
    2788,   254, 26282,  1331, 58144,   915, 65776, 65776, 58144, -4291,
   61324,  2182, -4291, -4291,  8188, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  2190, -4291, -4291,  2185,
   12575,   901, -4291,  -124, -4291, -4291,  2559, -4291, -4291, 46060,
   26282,  1491, 65140, -4291, -4291, -4291, 23704, -4291, -4291,  2798,
   -4291,  2199, -4291, -4291,  1817,  3781, -4291,  2479,  2090,  2503,
   -4291,  2686, -4291,  2515,  2410,  1277,  2297, -4291,  2848,  2624,
   -4291,  2707,  1677, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,  2264,  2593, -4291, -4291, 52420,  1067,  2432,
    -135,  1130,  1344, 37153,    57, 49240,  1575,   874, 29491, 42244,
    2263, -4291, -4291, -4291,  -128,  2425, -4291,  2759, -4291,     1,
   -4291,  2291,  1129,     1, 46696,  2624,   213, -4291,   215, -4291,
    2756, -4291, -4291, -4291, -4291,  2419,  2407,  2458, -4291,   368,
    2078, -4291,  -126, -4291,   828, -4291,  2445,  2624,     1,   213,
   -4291,  2696,  2830,   606,  2806, -4291,  1154, -4291, -4291, -4291,
     -57,  2910, -4291,  2347, -4291, -4291, -4291, 26282, -4291, -4291,
   -4291,  2588, -4291,   189, -4291, -4291, -4291, -4291,  2350, -4291,
   -4291,  2650,  2480, -4291, -4291,   764,  2376,   819, -4291,  2877,
   -4291,  1331, 58144, -4291, -4291, -4291,   443,  1124,  1525,  1841,
   -4291,  1841,  1841,  1841,  1841,    81, 42880, -4291, -4291, -4291,
    2917,  2938,  1705,  2397, -4291, -4291, -4291, -4291, -4291,  3057,
   -4291, -4291,  2685,  2953,  2953,  2953,  3072, -4291, -4291, -4291,
   26282, -4291, -4291, -4291,   131, -4291,  2597,  2468, -4291, 58144,
    1618, -4291, 26282, -4291,  2839,  2436, -4291, -4291,  2697, 12575,
   -4291, -4291, 12575, 64504,  2945,  1322, -4291, -4291,   163, -4291,
   -4291, 26282,   863, -4291,  3041,  2672, -4291, -4291, -4291,  3057,
    2953, 26282, -4291,  2464, -4291,  2456, -4291, 12575, 12575,   358,
    3060,  3140,  3140,  3140,  1322,  2538, 12575, 12575, 12575, 12575,
   12575, 12575, 12575, 12575, 12575, 12575, 12575, 12575,   359,  2504,
   -4291, -4291, -4291,   154, -4291,  2514, 12575, 12575, -4291, 12575,
   12575, 27566, -4291,  4809, 12575, 12575,  1022,  3027, 12575, 12575,
   12575, 12575,  3733, 12575, 12575, 12575, 27566,  3188,  2541, -4291,
    2547,   377, 12575, 12575,   382, 12575, 12575, 12575, 12575, 12575,
   -4291, -4291, 12575, 12575, 12575, 12575, 17863, 12575, 12575, 12575,
   12575, 12575, 12575,  2548, 12575,  3140,  3140, 12575, 12575,  1101,
   -4291, -4291, 12575,  2717,  2717, -4291, 12575,  9270, 12575, -4291,
   -4291,  2556, -4291, -4291, -4291, 27566,  3140,  3140, 12575, 12575,
   12575,  3060,  3060,  3060,   232,  2560,  -129, 12575, 30132,  2555,
   -4291, -4291, -4291, -4291, 12575, 12575, 12575, 17863, -4291,  1755,
   -4291, -4291, -4291, -4291, -4291, 13897, 17863, 17863,  2568, 17863,
   17863, 17863, 17863, 17863,  2960, 17863, 17863, 18524, 19185, 17863,
   17863, 17863, 17863,   944,  3060, 49240, 17863, 12575, -4291, -4291,
   58144, -4291, -4291, -4291,  2587, -4291,  2883,  1845, -4291, 47332,
   -4291,   826,  3100, -4291, 46060, 26282, -4291,  2603, -4291,  2983,
   -4291,  2984,  2987,  2988, -4291, -4291, -4291, -4291,  3229,  2993,
   -4291,  -126,  2996, -4291, -4291,  2627, -4291, -4291, -4291, 19846,
   49240, -4291,  2629, -4291,  2645, -4291, -4291, -4291, -4291, -4291,
   -4291,  2742, -4291, -4291, -4291, -4291,  2651, -4291, 46060,  2651,
   -4291, -4291,  2651, -4291, -4291,  2651, 41608,    56,  3266, -4291,
   -4291, 58144, -4291, 58780, -4291,  3078,  1397, -4291, 23704,  -126,
   -4291,  3079, 14558, -4291, -4291, -4291,  3030,   346,  2656, -4291,
   -4291, -4291, -4291,  3118, 58144, -4291, -4291, -4291, 12575,  3028,
    2663, -4291, -4291, -4291,   225, 26282, -4291,  1322, -4291,   127,
     127,  2919,  1419, 49240, -4291, -4291,   210,  2671, -4291,  2765,
    2687, -4291,  2771, -4291, -4291, 26282,  2682, -4291, 26282, -4291,
   -4291, -4291,  2949,  2776, -4291,  -126,   925, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
    2695,  2708,  3157,  2698, 46060, 41608,   101, -4291, 58144, -4291,
    1228, -4291, -4291,   964, -4291, -4291,   924, 43516, -4291,   231,
    2727,  2758,  3108, -4291, -4291,  2705, -4291, 12575, -4291,  2700,
    2712, -4291,  -128, -4291, 47332, 58144, -4291, -4291, -4291, -4291,
   -4291,  3294, 12575, -4291, 46060, -4291,  1193, -4291,   909,   107,
    -128, -4291, -4291, -4291, -4291, -4291, 58144, 53056,  2713,  9931,
    2838,  3123, -4291, -4291, -4291,  2729,  1841, 58144, 58144, 58144,
   26282, 58144, 26282, -4291,   896,   896, -4291, -4291, -4291, -4291,
       1, 58144, 58144,     1, 41608, -4291,   213,   728, 58144,     1,
   -4291,  3124,  2826, -4291, -4291, -4291,  3196, -4291, -4291,  3187,
    2731, -4291,  3228, -4291, -4291,  2849,   213, -4291, -4291, 26282,
   -4291, -4291,   213, -4291,   213,   213, 12575,     1,     1,     1,
   -4291,   -50, -4291, -4291, -4291,  2894,   -83, -4291, -4291, -4291,
     945, -4291, -4291,   309,  2998, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  1000, -4291, -4291, -4291,
    3226, -4291, 47332, 41608,  3204,  1841,  1841, -4291, -4291,  3235,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291,  1841, -4291, -4291,
   -4291, -4291, -4291, -4291,  1618, 49240, 58144, 58144, 58144, 26282,
   -4291, -4291, -4291, -4291, -4291,   100, -4291, -4291, -4291,  2247,
    3267, -4291, 49240,  3340,   -78,  1283,  3340,  2754,  -126,  1278,
   -4291,  1278, -4291, -4291, -4291,   986,  1841, -4291, -4291,  2755,
   -4291,  3008, -4291, -4291, 53692, 26282, -4291, -4291, -4291,  1527,
    2757,  2760,  1322,  1322, 61960,  3361,  2793,  4502, -4291, -4291,
   26282, -4291,    72, -4291, -4291, -4291,  2822, -4291, -4291, -4291,
   -4291,  2467, -4291, -4291,  2414,  2819,  2772, -4291,  2949, -4291,
    1509, 58144,  3232, 34609, -4291,   563,   306, -4291,  3140,  2778,
   -4291,  2783,  2784,  2785, 12575,   255,   480,   338,  -201,  1438,
     484,   570,  1318,   749, -4291,  1616,   751,   782,   885,   236,
   -4291,  2790,  2782, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291,  2794, -4291, -4291, -4291,   923,  1013,  1458,  1490,  2795,
    2796, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291,  3254, -4291,  1035,  1722, -4291, -4291, -4291, -4291,  2799,
   -4291, -4291,  1495,  1041,  1077,   277,  2809,  1771,  1088,  1818,
    1820,  2808, 27566, 58144,  3140,  2805,  1497,  1499,  3140,  2812,
    1113,  1631,  1847,  1880,  1903,  1639,  1713,  1178,  1921,  2745,
    1721,  1233,  1240,  1725,  1242,  1293, -4291,  1745,  2814,  2815,
    1300,   206,  3140,  2817,   289,  2818,  2824,  1752, 10592, 11253,
   11914,   228,  1320, -4291,  2820, -4291,  2547,  2827,  2828,   336,
     220,  1756, -4291, 12575, -4291, -4291,  2810, -4291,  2879,   165,
     107, -4291,  2989, 58144,  2358,   193, -4291, -4291, -4291, -4291,
   -4291, -4291,   884, -4291,  2831, -4291,  2834,  2477,  2832, 12575,
     248,  2832,  3453,   960,   960, 17863,  3230,  2652, 13236,   988,
   13236,   988,  2832,  2832,  2832, -4291, 17863,  2835, 17863, 17863,
   -4291,  3060,  1322,  2836,  1132, 58144, 26282,   826,  2837, -4291,
   -4291, -4291, -4291, -4291,  -128, -4291,  2840,   218, 26282, 49240,
    2841, -4291,  3356, -4291, -4291, -4291, -4291,  -126, -4291, -4291,
    5080, -4291, 26282,  2930,  2937,  2943, -4291, 32696, -4291, -4291,
   -4291, -4291, 32696,    14, -4291, 58144, -4291,  2934, -4291, -4291,
   -4291,  3278, -4291,  3281,  -204, -4291, 24346, 24346, -4291, 24346,
   -4291, -4291, -4291, -4291, -4291,   440, -4291, -4291, -4291, -4291,
     374,   989,  3178,  2727, -4291, -4291, -4291, -4291, -4291, -4291,
   33973,  1322, -4291, 26282, -4291,  3273,   940, 26282, -4291, -4291,
    3271,  1322, -4291, -4291, -4291, -4291, -4291, -4291,  2858, -4291,
    2861, -4291, -4291, -4291, -4291, -4291,  2074,  2976, -4291,  3515,
   -4291, 12575,  -126, -4291, 46060, 46060, 26282, 26282, 26282,   695,
   12575, -4291,  1813,  2871, -4291, -4291,  2804, -4291,  3520, -4291,
    3781, 19846, 47332,  3321,  3336, -4291,  2881, 24346, 24346, 24346,
   -4291, -4291, -4291, -4291,  2977,  2977, -4291, 30773, -4291, 12575,
   -4291, -4291, -4291,  3364, -4291,  3070,   618, -4291, -4291, -4291,
   -4291, -4291, 58144, -4291,  3541, -4291, -4291,  2887, -4291, -4291,
   26282, -4291, -4291,  3337, -4291,  3061, -4291,  1322, -4291,  2893,
   52420,  3362,  9931,  3366, -4291, 47968, -4291,  1322,  -128,  2902,
    2908, -4291, -4291,  3291,   659, -4291,  2912,  2913, -4291,  2904,
    2911,  2914, 52420, 12575, -4291,   909, -4291, -4291, -4291, -4291,
   -4291, 17863,  1783, -4291,  1322, -4291, -4291,  -126,  3374,  -126,
   12575,  2909, 58144, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,     1,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291,  3153,  2624,  2078,
    3123, -4291,     1,   213, 26282,     1,     1,  1322, -4291, -4291,
   -4291, -4291, -4291, -4291,  2922, -4291,  2980, -4291, -4291,  3091,
   64504,  2929, -4291,  3393,  2624, -4291, -4291, -4291,   102,  1151,
    2933,  1841, -4291, 58144, 58144,  1841,  1841, 58144, -4291, -4291,
    -156,  3216,  3218, -4291, -4291,  -128,  -128,  3243, -4291,  -126,
    3071,  3077,  3082,  3085,  3088,  3113, -4291, -4291,  -126,  -126,
   -4291, -4291,  -128, -4291,  1559, -4291, -4291, -4291, -4291,  1842,
   -4291,  -128,  -128, -4291,   178, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,  1182, -4291,  5035, -4291, -4291, 26282,  3242, 26282,
    3424, -4291,  3492, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,  2969, -4291, -4291, 12575,  3059, -4291, -4291,  2793,
   -4291,  2985,  2994,  2999,  3000,  3003,  3004,  3005,  3009,  3010,
    3011,  3012,  3013,  3015,  3016,  3017,  3019,  3024,  3036,  3038,
    3040,  3042,  3043,  3044,  2970, -4291, -4291, -4291,  3037, -4291,
   -4291, -4291,  -128,  -128,  -128,  -128, -4291,  2374, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  3346,  1136, 58144,  3064,
   -4291, 34609, -4291, -4291,   945, -4291,  3026, 15219, -4291,  3034,
   -4291, 12575, -4291, -4291, -4291,  1906, 12575, 12575,  3512,  2585,
   -4291, 48604, -4291, -4291, -4291, 12575, -4291, 12575, -4291, 12575,
   12575, 12575, 12575, 48604,  2585, 12575, -4291,  3039, -4291,  3425,
    3444, -4291, -4291, -4291, -4291, 12575, 12575, -4291, 12575, 12575,
   -4291, 12575, 12575, 12575, 12575, -4291, 12575, -4291, -4291, 17863,
   -4291,  3031,  3046, -4291, -4291, -4291,  3050, -4291, 12575, -4291,
   -4291, -4291, -4291, -4291, -4291, 12575, -4291, 12575, -4291, 12575,
   12575, -4291, 12575, 12575, -4291, -4291, -4291, 15880, 12575, 12575,
    3051, -4291, -4291, 12575, 12575, 12575, -4291, 12575,   264, 12575,
     453, 12575,  2072, 12575, -4291, 12575, -4291, -4291, -4291, -4291,
   12575,   399,  2074,  2804,  3053, -4291,  1956,  2707, -4291,  1803,
    2810,  3054,  3214,  1228, -4291, -4291, 49240, 12575, -4291, -4291,
   -4291, -4291, -4291, -4291, 17863,   362,  3055, 17863, -4291,  3453,
    3733,  3733,  2581, 12575,   248,  3453, 12575,  3058,  3056, -4291,
   12575, 58144, -4291, -4291, -4291, 47332, -4291, 49240, 46060, -4291,
   -4291, -4291,   218, -4291,  2603,  3076, -4291, -4291, -4291,  2858,
      60,  3081,  3065, -4291, -4291, -4291, -4291, -4291, -4291,  1968,
   -4291, 41608,   149,  3692, 41608, -4291,  3052, -4291,  3066,  3125,
    3126,  3144, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,  2624, 64504,  1813, -4291, -4291,  3074, -4291,
   -4291,  2697,  2977,  3087,  3451,  3650, -4291, -4291, -4291, -4291,
   64504, 64504, 12575, 58144, 17863, -4291,  3688,  3092,  3101,  3097,
    3103,  1322, -4291,  3186, -4291, -4291, -4291,    51, -4291, -4291,
   -4291, -4291, -4291,   806,   317, -4291, -4291,  3110,  3110, 21774,
   -4291, -4291, -4291, 58144, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,  3127, -4291, -4291,  3384, 46060, 41608,  3573,
    3574,  3575,   576, -4291, -4291, -4291, 49240,  3119, -4291, -4291,
   -4291,  1322,  3121,  1588, 44152,  3600, 44152, 44152, -4291,   827,
    3521,  3523, -4291,  3391,  2174,  3391, -4291, -4291,   827,   945,
    2949, -4291, 12575,  3736,  3567,  3447, -4291, 49876, -4291, 35245,
   -4291,  7679, -4291, 46060, -4291, -4291, -4291, -4291, -4291,  3227,
    3231,  1400, -4291, -4291,  3540,  3368, -4291, -4291, -4291,  -128,
    1322, -4291,  2713,  3145, 31414, -4291,  1568, -4291, -4291,  1322,
     194, -4291, -4291, -4291,  3432, -4291, -4291,  3374, -4291,  2727,
     213, -4291, -4291,   -50,  2496, -4291, 27566, 62596,  2804,  3470,
   -4291, -4291, -4291,   167,  3801, -4291, 58144,  3152,   615, -4291,
   -4291, 58144,  3615,   214,   214,  3436, 26282, 26282,  4236, 47968,
   44788, -4291, -4291, -4291, -4291,  3700, -4291,  3701,  1332, -4291,
   -4291,  2513,  1283, -4291,  -126,  -126,  -126,  -126,  2804,  -126,
    -126,  1970, -4291,  2513,  2513,  1278, -4291,   173, -4291, -4291,
   -4291, -4291,  2658,  -128,  3741,  3426,  -128,  -128,  3741,  -128,
    3427,  3428,  -128,  -128,  3250,  3687,  -128,  3570,  3276,  2234,
    3572,  -128,  3435, -4291,  3280,  3695,  -128,  -128,  -128,  -128,
    -128,  3741,  3440,  3792,  -128,  -128, -4291,  -128,  3442,  3441,
     183,  3449,  3450,  -128,  -128,  -128,  -128,   889, 58144,  -128,
    -128,  3454,  -128, -4291, -4291,  5677, -4291, -4291, -4291, -4291,
   -4291, -4291,   783, 24994, -4291, -4291, -4291, -4291,  -128, -4291,
     184, -4291,  3398, -4291,   397, 50512, 63232,  3189,  3207, 54328,
    1322, 64504, 12575, -4291,  3210,  3211,  3215,  2804,  -126,  -126,
    1568,  -126,  2804,  -126,  -126,  -126,  -126,  -126,  -126,  -126,
    2804,  2804,  -126,   140,  2149,  -126,  2804,  4502, -4291,  -126,
    2074,  2513,  2513,  2414, -4291,  3646,  -128, -4291,   235, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  3205,
     945,  2727,  1699,  2727,  3221, -4291, 13236,  1761, -4291,  1322,
   12575,  1322,  1983, -4291,  3233,  3233,  3233, -4291,  3236, -4291,
   -4291,  3233,  3636,  3233,  3637,  3237,  3240,  1981,  1928, -4291,
    2008,  2219,  1776,  3241,  3247,  1537, -4291, 12575, 12575,  1781,
     364,  1804,   -36,  1327,  1333,   375, -4291,  1823,  3323, -4291,
   -4291,  1828,  1844,  1876,  1891,  1359,  1895,  2022, 13236,  1897,
     275,   386, -4291,  1902,  1418,  1420,  1914, 12575,  1936, 12575,
    1998, 12575,  2005,  2018,  2031,  3244,  3244,   191, -4291,  3253,
   -4291, -4291, -4291,  3255, -4291, -4291, -4291, -4291,  2727,  2264,
    1803, -4291,  3251,  1202, -4291, -4291,  3256,  1322,  3260, -4291,
   -4291, 12575, -4291,   212, -4291, -4291, 17863,   427,  3264, -4291,
    1322, -4291, -4291,  3265,  1537, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,  3249, -4291,  3481, -4291, -4291,  2578, 32696,
   -4291, 58144,  1304,   -44, -4291, -4291, 49240,  3542, -4291,  3272,
   35881, 41608, 41608, 41608,  3275, -4291, 59416,  3552, 26282, -4291,
    3696, -4291, -4291, -4291, -4291, 58144, 65776, 65776, 65776, 65776,
    3277,  3279, -4291, -4291, -4291,  3453,  3657,  3536, -4291, -4291,
    2074, 58144, 46060,  3591, -4291, -4291,  3486,  2593, 27566, -4291,
    3287, -4291,  3287,  1799,  3289,  2034, -4291, -4291, -4291,  3283,
    2297,  2039, -4291, 19846,  3748,  2840, -4291, 41608, 41608, 41608,
   -4291,  2646, -4291, 30773, 12575, -4291, -4291, -4291, -4291, -4291,
   44152, -4291, -4291,  -198,  1202, -4291,  2095, -4291, -4291, -4291,
    3691,  3391,  3391,   827,  3693,   837, -4291,  2666, -4291,  2593,
    1322, 12575, -4291,  3568, -4291, 54964, -4291, -4291, -4291, -4291,
    1146, -4291, -4291,  3298,  3299,   144,  3526, -4291, -4291, -4291,
   -4291,  9931, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,  2624, -4291, -4291, -4291, -4291, -4291,     1,
   -4291,  3314, -4291,  3305,  3306, -4291,  -128,  3339, -4291, -4291,
   41608,  3500, -4291,  1047,  3310, 58144, -4291,  3852, -4291, -4291,
   -4291, -4291, -4291, 26282, -4291, -4291, 26282, 20490, -4291, -4291,
    3578, -4291,  3957, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  1842, -4291, -4291, -4291,
    1182, -4291, -4291, 28208,  1841, -4291,   209, -4291,  1841,  1527,
    1527,  3746, 55600, 28208,   105,  1568,  2804,  1702,  2804, 56236,
     105,  -126,  -126,  2646,  -128,  2804, -4291, -4291,  3718,  1675,
    3719,  1702,  1702, -4291, 49240, 58144, -4291,  -128,  1413,  2804,
   56872,  1568,  1568,  1702,   105, 27566,  1316,  2728, -4291,  -126,
     105, -4291, -4291, -4291, -4291, 26282,   105,   105,  3334,  3090,
    3167,  3213, -4291, -4291, -4291,  2804,  2728, 56236, -4291, -4291,
    4300, -4291, -4291, -4291, 21132, 58144,   343,   518, -4291,  3319,
   39700,  3329,  1331,   341,  3412,   288, -4291,   153, -4291, -4291,
   -4291,  3773,  3333,  1294, -4291,  3331, -4291, 56236, -4291,  3341,
   -4291,  3343, -4291, 60052,  1322,  2804,  2804,  2804, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, 58144,  2513,  1136, -4291,
   34609,  2727,  3568, -4291, -4291,  3733, -4291,  1322, 12575,   912,
   -4291, -4291, -4291, -4291,  1563, -4291, -4291, -4291,  3348, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  3075, -4291, -4291,  2585,
   -4291, -4291, -4291,  3345,  3733,  3733, -4291, -4291, 12575, -4291,
    3948,  3518, 12575, 12575, -4291, 12575, -4291,   252,  3349,  3377,
   -4291, -4291, -4291, -4291, 12575, -4291, -4291,  3733, -4291, 12575,
   -4291, -4291, 12575, -4291, 12575, 12575, -4291,  2063, -4291,  2104,
   -4291,  2110, -4291, -4291, -4291,  2074,  3352,  3737, -4291, -4291,
   -4291,  2074,  3550, -4291, -4291,  2074,  2804,  3337,  2705, -4291,
   -4291, -4291,  2707,  -129, 58144, -4291, -4291,  2061, -4291, -4291,
   12575, -4291, 49876, -4291, -4291,  2804,  3842,  3738, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  3813, -4291,  3462, -4291,   164, -4291,
   -4291, -4291,   626,   626,   626, 16541,  2567,  3873, -4291, -4291,
   -4291,  3696,  3758, -4291,   121,  3372, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, 58144,  3375,  1672, -4291,  2094, -4291,
   -4291,  3376, -4291, -4291, -4291,  2264,  3379, -4291,  -128, 16541,
    3110,  3549, -4291, -4291,  1799, 27566, 35245, -4291, -4291, 58144,
   -4291, 41608,  2881,  2881,  2881, 44788, -4291, -4291,  1588, -4291,
    1228,  3392, -4291,   945, -4291,   827,  3775,  3778, -4291,   827,
   -4291, -4291, -4291,  2264,  1590,  1588, 12575,  2624, -4291, -4291,
   36517, -4291, -4291, -4291, -4291, -4291, -4291, 31414, 52420, -4291,
    2624, -4291,  -126,  2334, 27566,  2727, 16541, -4291, -4291, 58144,
   -4291, -4291, -4291, -4291,  3529, -4291,   419,  3665,  3409, -4291,
    3388,  3389, -4291, 26282,  3395,  3400,  3397, -4291, -4291, -4291,
      49, -4291,  6174, -4291, -4291, -4291, -4291, -4291,   105,  3390,
    3795,  3796,  1527, -4291,  1841, 28208, -4291,  1841,  1841,  1331,
   -4291, -4291, -4291,   125, 56236, -4291, -4291, 28208, -4291, -4291,
   -4291,  3403, -4291, -4291,  2074, -4291, -4291, 44788,  -126, -4291,
    1702, 58144, -4291, 28208, 28208, -4291,  3434,  -126, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, 28208, 56236,  3404,
   -4291,  1588, -4291, -4291, -4291, -4291, -4291,  1918, -4291, 56236,
   -4291, -4291, 56236, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
    3411,  2694,  2497, -4291,  3408, -4291, 58144, -4291, -4291, 26282,
   -4291, -4291, -4291,  5253, 58144, -4291, -4291, -4291, -4291, 58144,
    4052, -4291,  3658, 12575, 12575,  3697, 58144,  3699, -4291,  3994,
   -4291, -4291,  3840,  3883, 58144,  5253,  3886,  3887, -4291,  3430,
   -4291, 54328,  3522,  2100, -4291, -4291,  2145, -4291, -4291,  2150,
   -4291, -4291, -4291, -4291, -4291,  3026, -4291,  3808,   976,  1322,
    3433,  3437,  3438,  3439,   239,  2242,  3727, -4291, -4291, -4291,
    3233, -4291,  3236, -4291, -4291, -4291,  4036, -4291, -4291,  3233,
    3848, -4291, -4291, -4291,  3452, -4291,  3455,  3457,  2115, -4291,
     309,  3458,  2141,  1434,  2261,  3768,  3846, -4291,  3690, -4291,
    2180,  1069,  2184,  2188,  2207,  2209, -4291, -4291, -4291, -4291,
   -4291,  3460, -4291, -4291,   524, -4291,  3461,  3567, -4291, -4291,
   -4291, -4291,  2265, -4291, -4291,  2287, -4291, -4291,  4103,  3742,
   -4291, -4291, -4291,  -126,   159,  3496,  3496,  3496,  1783,  1322,
    2293, -4291, 64504, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
    3877, 58144, -4291, -4291,  3473,  3515, 58144, -4291,  3536, -4291,
    2705, 27566, 16541,  3476,  3472, -4291,   819, -4291, -4291,  3471,
   -4291, -4291,  2881, -4291,  4060, -4291, -4291, -4291,  2887,  1540,
    3528,   827,   827,  3510,  3530, 12575,  3483, -4291,    93,  2705,
   -4291, -4291, 12575, -4291, -4291,  1322,  3722, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  3568, -4291,  3480,  3484, -4291, -4291,
    -126,   872, -4291, -4291,   295,  3663, 49240,  3488, 58144, 58144,
    3490, -4291, -4291, 21132, -4291,  4126, -4291, -4291, 12575,  1841,
   -4291, -4291, 28208,  3544,   974, 28208, 28208,  3971,  4019,  4022,
   -4291, 28208,  2467, 58144, -4291,  3294, -4291, 28208,  3403, -4291,
     234,  3596, -4291,   343, -4291, 27566, -4291, -4291, -4291, 58144,
   -4291, 26282, -4291, -4291,  3499, -4291,  3233,  3233,  3233, -4291,
   -4291,  3233, -4291,  3236,  3744,  3501,  3236,  3236, -4291, -4291,
   -4291, -4291, -4291,   239,   372, -4291, -4291,   239, -4291, -4291,
   -4291,   176,  1489,  3236, -4291, -4291, -4291, -4291, -4291,  3503,
   -4291,  3233,  3233,  3233, -4291, -4291,   239,  3233, -4291,  3233,
   -4291,  3236,   179,   160,  3233,  3233,  3233,  3348,  3502, -4291,
    2303, -4291, -4291,  1322,  3733,  4074, -4291, -4291,  3660,  -126,
    4014, 58144,   158, -4291, -4291,  3294,  4034,  2462, -4291, -4291,
   -4291, 64504, -4291,  2804, -4291,  2804, -4291,  2804, 45424, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,   211, -4291, -4291, 48604,
    4131, -4291,  3798,  3513, -4291, -4291, -4291, -4291, -4291,   239,
   -4291, -4291, -4291, -4291, 12575, -4291, -4291, -4291, 12575, -4291,
   -4291,  3832,  3993, -4291, -4291, -4291, -4291, -4291, -4291,  3519,
   -4291,  2804,  3568, -4291, -4291,  2804,  4032, -4291, -4291, -4291,
    3616,  3617, -4291, -4291,  3618, -4291, -4291,   162,  2466, -4291,
   -4291, -4291, -4291, 16541, 63868, -4291,  3916,  3625, -4291, -4291,
   -4291,  3531,  3577, -4291, -4291,  2707, -4291, -4291, -4291, -4291,
     905,  3905,  -129, -4291,  3583, -4291, -4291, -4291,  3584,  1322,
   58144, -4291,   390,  2707,  1588, 58144,  3935,  3808, -4291, 58144,
    5253, -4291, -4291, -4291, -4291,  3537,  3538, -4291, 58144, -4291,
   -4291, -4291,  3822,   341,  3817, 58144,  2310,  1588,  3545,  2314,
   -4291,   819,  5677, -4291, -4291,   882,   604,  2214, 28208,  3544,
    1092,   214, -4291,   214, -4291, -4291, -4291, -4291,  3871,   343,
   -4291, -4291, -4291, -4291, -4291, 26282, -4291,   105, -4291, -4291,
    3403,   806,  3543, 58144,  3889, -4291, -4291, -4291, -4291,  1122,
   -4291,   309,  1122,  1122, -4291,  2432, -4291,  3585,   239, -4291,
   -4291,  3588, -4291, -4291, -4291,  1122,   309,   239, -4291, -4291,
   -4291, -4291,  1122,  2876,  3675, -4291,   239, -4291, -4291,  4131,
   -4291,   239,  4131,  1122,  1122, 58144, -4291, 58144, -4291,   946,
   -4291, -4291, -4291, -4291, -4291,  2329, -4291, -4291, -4291, -4291,
   39064, -4291, 12575, -4291, -4291, -4291, -4291, -4291,   576, 60688,
   -4291, -4291, -4291,  4031,  3734,  3745, -4291, -4291, -4291,  3555,
   -4291,  3559,  1588,  2230, -4291, -4291, -4291,  3556,  2624, -4291,
    4155, -4291, -4291, -4291, -4291,   249,  3838,  2804,  2804,  2804,
    2149,   -61,  2466, -4291, -4291,  3620, 26282, 17863,  3677, 58144,
    1651,  3029, -4291,  4175,  4176,  4067,  4180,   905, -4291,  -108,
   -4291, -4291, 12575,  3576, 12575,  3579,  2333, -4291, -4291,  1527,
    1527, -4291,   390, -4291, -4291, -4291,   924, -4291, -4291,  3766,
   -4291, -4291, -4291,  1812, -4291, -4291,  3697,  3580,  2335,   278,
   58144, -4291,  3863,   992, -4291,  3578,  3549, -4291,  2074,  3536,
   -4291, -4291, -4291, -4291,   214, -4291,  3581, -4291,  3582,  3586,
    2930,  2937,  2943,  2149,  2149, -4291, -4291, -4291, -4291, -4291,
    3984, -4291, -4291,  2342, -4291,   797,  3868, -4291, -4291, -4291,
   -4291,  1122, -4291,  2353, -4291, -4291, -4291, -4291, -4291, -4291,
    2360, -4291, -4291, -4291, 49240,  -126,  3165,  4225, -4291,  3643,
   -4291,  4115,  3985, -4291,  4230, -4291,  3527, -4291,  3987,  3882,
    -128,  3608, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,   608,  3623,  3724, -4291, 64504, -4291, 58144, 57508,
   -4291, -4291, 33337, -4291, -4291, -4291,  4056, -4291,  1322, -4291,
   -4291,  4080,  2264, -4291, -4291, 12575, -4291, -4291, -4291,  3722,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  1410, -4291,
   -4291, 27566,  2949, -4291,  2074, -4291,  2372, -4291, -4291, -4291,
    3694,  -128,  -128,  4116,  4117,  -128,  -128,  -128,  -128,  3601,
    3029, -4291,  4096,   309,   309,  4215,   309, -4291,  4217,  4218,
    -108, -4291,  1322, 58144,  1322, 58144, -4291,  4071,  4071, -4291,
    3613, -4291, -4291, -4291, -4291, -4291,   288, -4291,  1842,  1684,
    -126,  -128,  3874,   296,   278, -4291, -4291,  -128,  1588,  3621,
     296,   992, -4291, -4291,    49,  3622,  2297, -4291,  2378,  3614,
    3619, -4291, 58144,  3626, 58144, 58144, -4291, -4291, -4291,  3627,
   -4291, 58144, -4291, -4291, -4291,   290, -4291, -4291,   239,   309,
     239, -4291, -4291,  3628, -4291, -4291, -4291,  3907,  3661, -4291,
    3629, -4291, -4291, -4291, 40336,  3903, -4291,  3624,  1431, -4291,
   12575,  4125, -4291, -4291, -4291,  2381, -4291, -4291, 39064, -4291,
   -4291, -4291,  2705,  1588,   924, -4291, -4291,  3630, -4291,  -128,
   -4291,  3633, -4291, -4291, 58144,  3635, -4291,  -126,  -126,  -128,
    -128,  2842,  2842,  2074, 49240,  3730, -4291, -4291,  -128, -4291,
   -4291,   309, -4291,   309,   309, -4291,  2422,  2444,  1539, -4291,
   -4291,  3639,  5253,  3649, 26282,  3994,  2446,   214,   214,   296,
    1684, -4291, -4291, -4291, -4291,  2804,  1580, -4291,  4007,  4283,
   -4291, 40972, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   58144, 58144,  3647,  2483, 58144,  2506,  2510,  3536, -4291,  1002,
    1002, -4291, -4291, -4291,  2065, -4291,  3628, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,   819,  4234,  3919,  4239,  1322, 12575,
   -4291, -4291, 57508, -4291, -4291, -4291, 27566, 16541,  2646, -4291,
    3677, -4291,  3651, -4291, -4291,   -46, -4291, -4291,  -126,  -126,
   -4291, -4291, -4291, -4291, -4291,  2518, -4291, 49240, -4291, -4291,
   -4291, -4291, -4291,  4257, -4291,  4260,  3654,  3656, 12575,  3659,
    3662, -4291, -4291, -4291, -4291,  4174, 64504,  4118,  4167, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,   819,  2520,  2524, 58144,  1684,  2529,   278,   992,
    2531, -4291,  4315, -4291,   200,  3945,  3946, -4291,  3666, -4291,
    3668, -4291,  3947, -4291,  3951,  1322, -4291, -4291, -4291, -4291,
   -4291, -4291,  2534, -4291, 17202, -4291, -4291, -4291, -4291, -4291,
   49240, -4291,  3730, -4291, -4291, -4291, 54328, 54328,  1322, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291,  3892,  1684,  2544,
   -4291,  1684, -4291, -4291, -4291, -4291, -4291, -4291,  3726,  4200,
   -4291,   -96, -4291, -4291,  3864, -4291,  3651, -4291,  3679, -4291,
    3453,  3029, -4291, -4291,  3682,  2552, -4291, -4291,  3649, -4291,
   -4291, -4291, -4291,  1684, -4291,  1002,  1002, -4291, -4291,   132,
    4108,  4060, -4291, 17202,  3686, -4291, -4291, -4291, 64504,  4188,
   -4291, -4291, -4291,  -126,  4082, -4291,   132, -4291,  4298,  3905,
   -4291, -4291, -4291,  3872, -4291, -4291, -4291,   309,  4113, -4291,
   -4291,  3981,  3698, 64504,   821, 22416,  3862, -4291, -4291, -4291,
   -4291, -4291, 49240,  2589, -4291, -4291, 27566, -4291, -4291, -4291,
   25638,  3703, -4291,  -128, -4291, 27566, -4291, -4291, 16541, -4291,
   -4291
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   933,  1942,  2723,     0,     0,     0,   343,     0,     0,
    1128,  2728,   590,    68,  1811,  1936,  1937,  1720,  1750,     2,
       0,  1144,   272,   176,     0,    80,   319,  1752,     0,  2003,
       0,     0,   384,  1144,     0,   495,     0,  1998,     0,     0,
    1144,   388,  1755,  1985,   249,   176,  2728,     0,  1195,  2504,
    1852,  2014,     0,     0,     0,  1835,     0,  2588,  1800,     0,
     386,     0,  2860,  1184,     0,     3,     8,    21,     0,    43,
      26,    31,    16,    20,    15,    56,    50,    28,  2725,   315,
     316,   317,   318,    41,   137,    40,    11,    59,    60,    18,
      47,    12,    14,    17,    39,    46,    35,    42,    54,  1181,
      24,    25,    32,    48,    64,    22,    61,    57,    23,  1942,
      13,    27,    49,    44,    36,    58,    65,    37,    55,    38,
      63,    30,    51,    29,     9,    10,    19,    52,    53,    45,
      66,    33,    62,    34,     0,   963,     0,     0,     0,     0,
       0,     0,  1038,   945,  2792,  2793,  2794,     0,  1146,  1145,
       0,     0,  1285,  1284,     0,  2728,  2118,  1124,  1155,  2195,
    2197,  2196,  2198,  2199,  2200,  2201,  2202,  2203,  2135,  2204,
    2205,  2206,  2208,  2207,  2209,  2210,  2211,  2136,  2137,  2212,
    2213,  2214,  2216,  2215,  2217,  2138,  2139,  2218,  2219,  2220,
    2221,  2140,  2142,  2141,  2222,  2224,  2223,  2143,  2225,  2226,
    2227,  2229,  2144,  2145,  2146,  2147,  2148,  2228,  2149,  2230,
    2150,  2231,  2232,  2233,  2234,  2235,  2236,  2237,  2239,  2238,
    2151,  2240,  2241,  2243,  2244,  2245,  2242,  2246,  2248,  2247,
    2249,  2250,  2251,  2152,  2252,  2253,  2254,  2255,  2256,  2257,
    2258,  2259,  2153,  2260,  2261,  2262,  2281,  2154,  2263,  2266,
    2265,  2264,  2267,  2268,  2269,  2271,  2270,  2272,  2273,  2155,
    2156,  2274,  2275,  2276,  2277,  2279,  2278,  2283,  2284,  2285,
    2157,  2158,  2280,  2282,  2482,  2286,  2287,  2289,  2288,  2290,
    2159,  2292,  2291,  2160,  2294,  2293,  2161,  2162,  2295,  2296,
    2297,  2116,  2298,  2117,  2299,  2301,  2302,  2303,  2308,  2163,
    2300,  2304,  2305,  2306,  2307,  2309,  2164,  2311,  2310,  2312,
    2313,  2314,  2315,  2316,  2317,  2318,  2319,  2320,  2333,  2324,
    2325,  2327,  2328,  2331,  2326,  2332,  2336,  2335,  2337,  2338,
    2339,  2340,  2341,  2334,  2322,  2329,  2330,  2323,  2342,  2343,
    2321,  2344,  2346,  2345,  2347,  2348,  2349,  2350,  2351,  2352,
    2353,  2354,  2355,  2357,  2356,  2358,  2359,  2360,  2361,  2362,
    2363,  2364,  2366,  2365,  2367,  2368,  2370,  2369,  2372,  2373,
    2165,  2371,  2374,  2375,  2376,  2377,  2378,  2380,  2379,  2166,
    2168,  2167,  2169,  2381,  2382,  2170,  2383,  2385,  2384,  2386,
    2387,  2388,  2390,  2389,  2391,  2392,  2171,  2172,  2393,  2394,
    2395,  2396,  2397,  2398,  2399,  2400,  2401,  2402,  2403,  2404,
    2405,  2406,  2408,  2407,  2409,  2410,  2411,  2412,  2413,  2414,
    2415,  2173,  2416,  2174,  2417,  2418,  2175,  2419,  2176,  2420,
    2421,  2422,  2423,  2424,  2177,  2425,  2426,  2427,  2429,  2430,
    2428,  2431,  2178,  2432,  2433,  2434,  2179,  2436,  2435,  2437,
    2180,  2439,  2181,  2182,  2438,  2184,  2185,  2440,  2441,  2442,
    2183,  2443,  2186,  2444,  2445,  2447,  2446,  2448,  2449,  2450,
    2187,  2451,  2452,  2188,  2453,  2454,  2455,  2456,  2457,  2459,
    2458,  2460,  2461,  2462,  2463,  2465,  2467,  2466,  2464,  2468,
    2469,  2470,  2471,  2475,  2476,  2477,  2478,  2472,  2473,  2474,
    2189,  2479,  2480,  2481,  2483,  2484,  2486,  2485,  2190,  2191,
    2487,  2488,  2194,  2489,  2490,  2494,  2491,  2503,  2492,  2493,
    2496,  2495,  2497,  2498,  2499,  2192,  2500,  2193,  2501,  2502,
     194,  2121,   178,  2122,  2134,   345,   124,  2579,  2578,  1082,
       0,  2729,  2730,     0,     0,     0,  1828,     0,  1748,  1748,
    1748,  1746,     0,  1748,  1748,  1748,     0,  1751,  1748,  1748,
    1748,     0,    73,  1947,   273,     0,     0,     0,     0,     0,
    2115,     0,   336,  1758,     0,     0,  2005,  2021,     0,  2022,
    2016,  2576,   321,     0,  1219,     0,     0,     0,     0,   176,
    1147,  1090,   321,  1809,     0,   239,   248,   250,   251,   247,
       0,  2730,  2741,  1182,  1190,  1639,  1203,  2506,     0,  1916,
     251,     0,   124,  1063,     0,   124,  1836,  1833,     0,     0,
       0,  1809,  2015,     0,  2844,     0,     0,     0,  2840,     0,
    2845,     0,  1184,     0,     0,     1,     5,     0,     0,   588,
     888,   588,   889,   887,   588,  2794,     0,     0,     0,     0,
       0,  2276,  2158,  2385,  1929,  1941,  1927,  2110,     0,   936,
     964,     0,   941,     0,   939,  2127,  2126,  2125,   953,   952,
     951,   949,     0,   456,     0,  1040,  2799,     0,   943,     0,
    1101,  1931,  1932,  1933,  1934,  1935,  1938,   367,  2724,     0,
     196,     0,   356,   359,     0,   348,   351,     0,   125,   126,
       0,  1126,  1129,     0,     0,  2733,     0,   591,   142,     0,
    1832,  1831,  1830,     0,  1828,  2196,  2135,  2211,     0,  2084,
       0,     0,     0,  1507,     0,  2140,     0,  2225,  2227,  2144,
    2145,  2146,  2147,  2148,  2151,     0,     0,  1232,  1232,  1232,
    1229,     0,     0,     0,  2250,  2251,  2089,     0,     0,     0,
    2080,  2090,  2158,  2289,  2290,     0,  2082,  2083,  2296,     0,
       0,     0,  2310,     0,  2315,  2087,     0,     0,  2352,  2354,
       0,     0,  2358,  2359,  2360,  2361,  2064,  1287,     0,  1229,
    2079,  2086,  2377,  2072,  2386,  2391,  2392,     0,  2401,     0,
       0,  2423,     0,  2430,  2428,  2434,     0,     0,  2456,     0,
       0,  1229,  2063,  2475,  2476,  2477,  2478,     0,  2081,  2189,
    2088,     0,  2489,  1232,  1229,  1229,     0,     0,     0,  2497,
    2498,  2502,     0,     0,     0,  2764,  1286,     0,  1468,     0,
    1501,  1244,  1250,  1264,     0,  1279,  1314,  1315,  1317,  1423,
    1316,  1322,  1321,  1721,  2076,  1320,  1319,  2077,  2078,  1313,
    2100,  2121,  2099,     0,     0,     0,     0,     0,     0,     0,
       0,   176,     0,  1912,     0,   176,  1732,  1748,    75,     0,
       0,  2637,  2652,  2653,  1232,  2649,  2654,  2270,  2156,  2283,
       0,  2651,  2643,     0,  2396,  2400,  2647,  2415,  2418,  2641,
       0,  2181,  2460,  2673,  2645,  2650,  2631,  2618,  2632,     0,
       0,  2635,  2639,  2112,  1613,  2591,  2592,     0,    81,     0,
       0,  1760,  1761,  1759,  1036,     0,  2857,  2006,  2007,  2008,
       0,  2025,     0,   365,     0,   331,     0,     0,     0,   323,
     321,     0,   314,   304,     0,   305,   309,   310,   311,   312,
     313,   306,   307,   377,   308,  2123,     0,  2124,  1142,     0,
       0,   505,   496,     0,  1911,  1910,     0,  1999,  2742,     0,
       0,     0,   321,   377,  1763,  1810,     0,  1762,  1991,     0,
    1989,  1986,  1988,   240,     0,     0,   270,  2197,  2637,  2400,
    2609,     0,  2617,     0,  2736,  2733,  2743,  1713,     0,  1648,
    1640,     0,  1210,  2777,  2772,  2771,  2774,  2775,  1209,  2776,
    1208,  2773,  2770,  1219,  1204,  1206,  1207,     0,   810,     0,
       0,  2529,  2530,  2366,  2386,  2424,  2531,  2472,     0,     0,
    2551,  2505,  2515,  2511,     0,     0,  1874,     0,   810,  1924,
    1875,     0,     0,  1924,     0,  1648,  1914,  1917,     0,  2533,
    1888,   885,   884,   883,  2534,  1910,     0,  1860,  1876,     0,
    1837,  1881,   124,  2535,     0,  1913,     0,  1648,  1924,     0,
    1853,     0,     0,     0,     0,  1218,     0,   246,  1070,  1070,
       0,     0,  1062,  1064,  1065,  1070,  1070,     0,  2858,  2859,
    2589,  1036,   377,     0,  2071,  2069,  2070,  2119,  2841,  2068,
    2067,  2849,  2851,  2837,  2839,  2846,     0,  2749,  1195,     6,
      67,     0,     0,   176,   176,   138,  1219,  1219,  2794,   588,
     144,   588,   588,   588,   588,     0,  1944,  2797,  2798,  2796,
     826,     0,  1232,  2128,  2131,  2795,  2132,   179,   950,     0,
     457,   179,     0,     0,     0,     0,     0,   458,   459,   395,
       0,  1044,  1045,  1039,  1041,  1043,     0,     0,   946,     0,
    2799,  1943,     0,   369,     0,  1157,  1159,  1158,  1175,   198,
     195,   177,     0,   321,     0,   346,   352,    82,  1084,  1739,
    1741,     0,  1130,  2732,     0,     0,  2734,  2738,   141,     0,
       0,     0,  1812,  1816,  1822,  1826,  1829,     0,     0,  1618,
    1335,  1618,  1618,  1618,  1508,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1618,     0,
    1373,  1345,  1346,     0,  1374,     0,     0,     0,  2091,     0,
       0,     0,  2764,     0,     0,     0,     0,  1473,     0,     0,
       0,  2764,     0,     0,     0,     0,     0,     0,  1503,  1505,
    2099,  1618,     0,     0,  1618,     0,     0,     0,     0,     0,
    1237,  1379,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1618,  1618,     0,     0,  1618,
    1387,  2093,     0,     0,     0,  2092,     0,     0,     0,  2065,
    2085,     0,  1390,  1392,  1391,     0,  1618,  1618,     0,     0,
       0,  1325,  1324,  1326,     0,     0,     0,     0,     0,     0,
    1283,  1282,  1281,  1280,     0,     0,     0,     0,  1289,     0,
    1291,  1293,  1288,  1290,  1292,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1327,     0,     0,     0,  2066,  1432,
       0,  1749,  1726,  1734,  1728,  1747,     0,  1912,  1729,     0,
    1738,   470,     0,  1735,     0,     0,  1722,     0,    74,     0,
    1972,     0,     0,     0,  1966,  1968,  1971,  1967,     0,     0,
    1973,   124,     0,  1969,  1948,  1951,  1958,  1218,  1949,     0,
       0,   271,   274,   276,     0,   279,  2638,  2636,  2670,  2669,
    2674,     0,  2671,  2667,  2630,  2660,  2701,  2664,     0,  2701,
    2666,  2665,  2701,  2661,  2668,  2701,     0,  2633,     0,  1614,
    1615,     0,  2590,     0,  2111,     0,     0,  1037,     0,     0,
    2009,  2010,     0,  1165,  2026,  2027,  2023,  1613,  2577,  2580,
     369,   330,   333,     0,     0,   326,   325,   327,     0,     0,
       0,   219,   322,   385,     0,     0,   699,  1220,   506,     0,
       0,   517,     0,     0,    70,    71,     0,  1149,  2133,     0,
    1148,  1152,     0,  1088,  1091,     0,   374,   389,     0,  1766,
    1756,  1765,  1541,  1996,  1993,   124,     0,   238,   263,   258,
     266,   260,   262,   261,   267,   268,   269,   264,   259,   265,
     252,     0,     0,  2636,     0,     0,  2633,  2737,     0,  2739,
    2755,  1191,  2744,  1704,  1641,  1650,  1210,     0,  1649,  1544,
    1620,     0,     0,  1193,  1215,  1196,  1214,     0,  1205,     0,
    2507,  2509,     0,   809,     0,     0,   812,   814,  1786,  1785,
     813,   822,     0,   811,     0,  2566,     0,  2549,     0,  2536,
       0,   818,   820,   819,  2544,   817,     0,     0,  2520,     0,
       0,  1920,  1218,  1218,  1887,     0,   588,     0,     0,     0,
       0,     0,     0,  1854,     0,     0,   639,  1880,  1918,  1919,
    1924,     0,     0,  1924,     0,  1893,  1914,  1924,     0,  1924,
    1849,     0,     0,  1841,  1846,  1842,     0,  1848,  1847,  1850,
    1838,  1839,     0,  1867,  1895,     0,  1914,  1879,  1886,     0,
    1866,  1873,     0,  1884,  1914,  1914,     0,  1924,  1924,  1924,
    1058,  1074,  1056,  1068,  1069,     0,     0,  1061,  1060,  1834,
    1544,   387,   372,     0,     0,  2838,  2852,  2836,  2847,  2848,
    2835,  1186,  2748,  1183,  2747,  2750,     0,  1185,     7,     4,
       0,   135,     0,     0,     0,   588,   588,  1219,  2791,     0,
    2779,  2786,  2787,  2790,  2822,  2789,  2788,   588,  2785,  2778,
    2781,  2782,  2784,  2783,  2799,     0,     0,     0,     0,     0,
    1930,  1928,  1945,  1946,   827,   826,   582,   585,   584,     0,
       0,  2130,     0,   942,     0,  1912,   940,     0,     0,  1912,
     406,  1912,   460,   934,  1042,     0,   588,   947,   944,  1102,
    1103,  1106,   368,   221,     0,     0,   494,  1175,  1161,  1177,
       0,   199,   201,   357,   321,     0,     0,     0,  1086,  1085,
       0,  1083,  1140,  1138,  1137,  1135,     0,  1136,  1134,  1125,
    1131,  1132,  2731,  2735,  1912,   398,  1818,  1743,  1541,  1745,
    2110,     0,     0,     0,  1824,     0,     0,  1619,  1618,     0,
    1482,     0,     0,     0,     0,  1509,     0,     0,     0,     0,
       0,     0,     0,     0,  1311,     0,     0,     0,     0,     0,
    1453,     0,  1482,  1233,  1692,  1693,  1677,  1678,  1676,  1679,
    1230,     0,  1680,  1691,  1402,     0,     0,     0,     0,     0,
       0,  1589,  1590,  1591,  1592,  1600,  1593,  1594,  1595,  1602,
    1607,  1596,  1597,  1603,  1604,  1605,  1598,  1606,  1601,  1599,
    1608,     0,  1588,     0,     0,  1611,  1609,  1612,  1610,     0,
    1474,  1466,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1618,     0,     0,     0,  1618,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1415,     0,     0,     0,
       0,     0,  1618,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1369,     0,  2102,  2101,     0,     0,     0,
     854,     0,  1329,     0,  1328,  1552,  1187,  2760,  2765,     0,
    2536,  1469,  1471,     0,  1235,  1234,  1236,  1247,  1240,  1245,
    1238,  1242,     0,  1294,  2203,  1248,     0,     0,  1276,  2764,
    1627,  1277,  1262,  1267,  1268,     0,  1265,  1266,     0,  1270,
       0,  1269,  1273,  1274,  1275,  1278,     0,     0,     0,     0,
    1318,  1323,  1502,  1219,  2103,     0,     0,   470,  1731,  2628,
     473,   472,  1736,   471,  1787,  2686,  1730,  1046,     0,     0,
      76,    78,  1977,  1960,  1959,  1961,  1965,   124,  1970,  1962,
       0,  1974,  1975,  2250,  2475,  2478,   283,     0,   256,   255,
     257,   280,     0,     0,  2663,     0,  2644,     0,  2648,  2642,
    2646,  2131,  2700,     0,  2626,  2688,     0,     0,  2634,     0,
    2672,  2655,  2659,  2658,  2656,     0,  2657,  2662,  2640,  1617,
    2284,  2369,     0,  1620,  2594,   320,   337,  1753,  2856,  2011,
    2489,  2012,  2004,     0,  2024,     0,     0,     0,   366,   332,
       0,   324,   371,   220,   363,   378,   382,   380,  1143,   700,
       0,  1219,   504,   503,   502,   501,     0,   519,   499,   507,
      72,     0,     0,  2000,     0,     0,     0,     0,     0,  1092,
       0,  1764,     0,     0,  1742,  1542,     0,  1992,  1994,  1987,
       0,     0,     0,     0,     0,  2690,  2615,     0,     0,     0,
    2740,  2757,  2756,  2745,     0,     0,  1719,     0,  1714,     0,
    1192,  1660,  1661,  2427,  1659,  1651,  1654,  1658,  1657,  1202,
    1560,  1559,     0,  1198,  1516,  1201,  1518,  1515,  1514,  1513,
       0,  1559,  1621,  1628,  1211,     0,  1219,  1220,  1220,  2099,
       0,     0,     0,  2547,  2553,     0,  2546,  2545,     0,     0,
       0,  2568,  2550,     0,     0,  2514,  2554,  2555,  2558,     0,
       0,     0,     0,     0,  2552,  2472,  2516,  2517,  2522,  2512,
    2574,  2575,  2572,  2573,  2571,  2541,  1894,     0,  1922,     0,
       0,     0,     0,  1904,  1898,  1897,  1891,  1899,  1892,  1909,
    1908,  1907,  1864,  1863,  1857,  1915,  1903,  1901,   176,  1924,
    1862,  1861,  1902,  1900,  1843,  1844,  1845,     0,  1648,     0,
    1920,  1896,  1924,  1914,     0,  1924,  1924,  1905,  1906,  1883,
    1885,  1059,  1076,  1075,  1071,  1072,  1077,  1067,  1066,     0,
     321,  2842,  2850,  2854,  1648,  2754,  2752,   589,   826,  2624,
     139,   588,  2821,     0,     0,   588,   588,     0,  2780,   145,
     904,     0,     0,   127,   583,  1787,  1787,     0,  2129,     0,
       0,     0,     0,     0,     0,     0,   180,   189,     0,     0,
     404,   405,  1787,   403,   446,   447,   450,   451,   452,     0,
     453,  1787,  1787,   400,   426,   427,   430,   431,   432,   433,
     434,   396,     0,   401,   826,  2800,  2801,     0,   955,     0,
       0,  1105,   217,  1164,  1156,  1163,  1160,  1175,  1173,  1162,
     880,   879,     0,  1176,   197,     0,     0,   344,   353,   347,
     349,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    83,    84,   104,  1740,     0,  1127,
    1139,  1133,  1787,  1787,  1787,  1787,   402,   435,   436,   439,
     440,   441,   442,   445,   443,   444,     0,  1912,     0,     0,
    1813,     0,  2113,  1823,  1544,  1827,  1826,     0,  1398,     0,
    1446,     0,  1448,  1449,  1450,     0,     0,     0,     0,     0,
    1399,     0,  1343,  1400,  1401,     0,  1395,     0,  1396,     0,
       0,     0,     0,     0,     0,     0,  1452,     0,  1231,     0,
       0,  1347,  1348,  1340,  1332,     0,     0,  1425,     0,     0,
    1349,     0,     0,     0,     0,  1406,     0,  1426,  1504,     0,
    1506,  2103,     0,  1458,  1407,  1354,     0,  1456,     0,  1355,
    1427,  1428,  1429,  1409,  1410,     0,  1431,     0,  1411,     0,
       0,  1414,     0,     0,  1357,  1462,  1460,     0,     0,     0,
       0,  1464,  1359,     0,     0,     0,  1358,     0,     0,     0,
       0,     0,     0,     0,  1361,     0,  1341,  1461,  1463,  1417,
       0,     0,     0,     0,     0,  1370,     0,  1199,  1551,  2766,
    1187,     0,     0,  2755,  2763,  1333,     0,     0,  2104,  1241,
    1246,  1239,  1243,  2764,     0,     0,     0,     0,  1260,  1259,
       0,     0,     0,  2764,  1627,  1263,     0,     0,  1442,  1443,
    1499,     0,  1727,  1724,  1737,     0,  1788,     0,     0,  1048,
    1047,  1733,  1046,    79,     0,     0,  1963,  1964,  1957,  1976,
    1952,     0,   275,   284,   277,   281,   282,   278,  2705,     0,
    2704,     0,     0,     0,     0,  2623,  2682,  2685,  2110,     0,
       0,     0,  2598,  2605,  2601,  2606,  2599,  2600,  2604,  2607,
    2608,  2595,  2602,  1648,   321,     0,  2013,  1166,  1168,  1169,
    1167,  1175,     0,     0,  2583,  2584,  2582,  2581,   328,   369,
     321,   321,     0,   509,     0,   518,     0,   530,     0,     0,
       0,  2002,  2001,     0,  1150,  1153,  1154,  1099,  1097,  1096,
    1098,  1087,  1093,  1094,     0,   575,  1770,     0,     0,     0,
    1776,  1757,  1767,     0,  1674,  1675,  1671,  1672,  1670,  1673,
    1997,  1995,  1990,     0,   253,  2616,     0,     0,     0,     0,
       0,     0,     0,  2120,  1718,  1715,     0,  1705,  1707,  1708,
    1710,  2098,  1642,  1645,     0,     0,     0,     0,  1559,  1544,
       0,     0,  1536,  1561,     0,  1561,  1538,  1539,  1544,  1544,
    1541,  1556,     0,     0,  1623,     0,  1213,  1221,  1216,     0,
    2510,     0,  2540,     0,   825,   824,   823,   821,  2567,     0,
       0,     0,  2560,  2561,     0,     0,  2537,  2538,  2539,     0,
    2542,  2519,  2520,  2521,     0,  1921,     0,  1868,  1925,  1926,
       0,  1890,  1889,  1859,     0,  1882,  1840,  1922,  1858,  1620,
    1914,  1855,  1856,  1074,     0,  1057,     0,   321,     0,     0,
    2853,  2753,   136,   826,     0,   140,     0,     0,   178,  2830,
    2816,     0,     0,     0,     0,     0,     0,     0,   592,     0,
       0,   938,   183,   186,   184,     0,   185,     0,     0,   455,
     454,     0,  1912,   448,     0,     0,     0,     0,     0,     0,
       0,     0,   147,     0,     0,  1912,   428,   407,   408,   411,
     412,   413,  1034,  1787,  1034,     0,  1787,  1787,  1034,  1787,
       0,     0,  1787,  1787,     0,     0,  1787,     0,     0,  1034,
       0,  1787,     0,  1021,     0,     0,  1787,  1787,  1787,  1787,
    1787,  1034,     0,     0,  1787,  1787,   494,  1787,     0,     0,
    1052,     0,     0,  1787,  1787,  1787,  1787,     0,     0,  1787,
    1787,     0,  1787,   971,  1020,   594,   621,   622,   935,   970,
     972,   984,   490,     0,  1002,  1023,  1024,  1022,     0,  2802,
       0,   957,   959,  1104,     0,     0,   321,     0,     0,  1580,
     200,   321,     0,   350,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1141,     0,
       0,     0,     0,  1912,   437,     0,  1787,   397,   414,   415,
     418,   419,   420,   421,   422,   425,   423,   424,  1744,  1826,
    1544,  1620,  2111,  1620,     0,  1825,     0,     0,  1447,  1483,
       0,  1510,     0,  1337,   783,   783,   783,  1493,   768,  1497,
    1488,   783,  1489,   783,  1491,     0,     0,     0,  1296,  1312,
       0,     0,     0,     0,     0,  1454,  1451,     0,     0,     0,
       0,     0,  1477,     0,     0,     0,  1342,     0,  1437,  1459,
    1457,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1465,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   843,   849,   852,
     853,   855,   847,     0,  1419,  1330,  2758,  1200,  1620,  1219,
    2767,  2769,     0,  2749,  1552,  2761,   929,  1470,     0,  1257,
    1253,     0,  1251,  1626,  1272,  1271,     0,     0,     0,  1261,
    1220,  1433,  1219,     0,  1500,  2105,  1725,  2629,   469,   638,
    2687,  1723,    77,     0,  1955,     0,  1950,  1953,     0,     0,
    2702,     0,  2713,     0,  2692,  2693,     0,     0,  2689,     0,
       0,     0,     0,     0,     0,  2593,   321,  1797,     0,  1175,
    1179,  2017,  2586,  2587,  2585,     0,   361,   361,   361,   361,
       0,   510,   511,   513,  1220,   527,   505,     0,   497,   500,
       0,   509,     0,     0,  1089,  1095,     0,  1203,     0,  1789,
    1774,  1781,  1775,     0,     0,     0,  1773,  2095,  2094,  2101,
    2743,     0,  1586,     0,     0,  2614,  2691,     0,     0,     0,
    2746,   815,  1709,     0,     0,  1646,  1647,  1644,  1662,  1653,
       0,  1656,  1655,     0,  2749,  1554,     0,  1540,  1537,  1562,
       0,  1561,  1561,  1544,     0,  1520,  1519,  1613,  1546,  1203,
    1622,     0,  1624,  1639,  1212,     0,  1217,  1225,  1224,  2096,
    2103,  2508,  2548,     0,     0,     0,     0,  2565,  2559,  2556,
    2557,     0,  2518,  2524,  2523,  2526,  2528,  1684,  1685,  1683,
    1681,  1682,  1923,  1648,  1878,  1877,  1851,  1870,  1872,  1924,
    1073,     0,  1080,  1078,  1801,  1804,     0,     0,  2843,  2855,
       0,     0,  2824,     0,     0,     0,   156,     0,   920,   922,
     921,   906,   905,     0,   131,   133,     0,   679,   128,   481,
     490,   593,   596,   637,   636,   188,   187,   192,   193,  1688,
    1689,  1686,  1687,   461,   474,  1690,   475,   449,   151,   150,
     152,   153,   155,   154,   149,   954,     0,   462,   463,   429,
       0,   409,  1035,   927,   588,  1006,     0,   680,   588,   881,
     881,   586,     0,     0,  1144,     0,     0,  1746,     0,     0,
    1144,     0,     0,     0,  1787,     0,  1014,   966,     0,  1748,
       0,  1746,  1746,  1015,     0,     0,   967,  1787,     0,     0,
       0,     0,     0,  1746,  1144,     0,     0,     0,   492,     0,
    1144,   986,  1055,  1053,  1054,     0,  1144,  1144,     0,     0,
       0,     0,   627,   628,   626,     0,     0,     0,   619,   595,
     826,   968,   491,   969,   679,     0,  1049,   676,   682,  2106,
       0,  2804,  2726,     0,     0,   161,  1108,     0,  1107,   232,
     231,     0,   223,   300,   370,     0,   222,     0,  1583,     0,
    1584,  1581,  1582,   321,   354,   109,   113,   105,    90,    86,
     117,   118,    88,    89,    93,    92,    94,    95,    98,    99,
      96,    91,    97,    87,   121,   123,   122,   100,   119,   120,
      85,   468,   467,   466,   465,   438,     0,     0,  1912,   416,
       0,  1620,  1639,  2114,  1817,     0,  1371,  1511,     0,     0,
     784,  1484,  1485,  1495,     0,  1496,   770,   769,   785,  1487,
    1490,  1494,  1492,  1336,  1344,  1393,     0,  1310,  1394,     0,
    1424,  1339,  1338,     0,     0,     0,  1377,  1404,     0,  1378,
       0,  1475,     0,     0,  1351,     0,  1353,     0,     0,  1439,
    1408,  1430,  1380,  1412,     0,  1356,  1331,     0,  1381,     0,
    1386,  1384,     0,  1360,     0,     0,  1367,     0,  1365,     0,
    1366,     0,  1368,  1416,  1418,     0,     0,   854,   840,   841,
     842,     0,   844,   846,   848,     0,     0,  1628,  1553,  2768,
    1189,  2759,  1199,     0,     0,  1472,  1249,     0,  1258,  1255,
       0,  1252,  1221,  1444,  1434,  1979,     0,     0,   292,   287,
     295,   289,   291,   290,   296,   297,   298,   299,   293,   288,
     294,   286,   285,  2703,     0,  2622,     0,  2696,  2698,  2627,
    2684,  2683,  2706,  2706,  2706,     0,   340,     0,  1754,  1170,
    1175,  1179,     0,  1171,  2028,   329,   334,   364,   362,   376,
     379,   383,   381,   514,     0,     0,     0,   534,     0,   532,
     508,     0,  1151,  1100,   375,  1219,  1771,  1783,     0,  1791,
       0,     0,  1768,  1778,     0,     0,     0,  1777,   494,     0,
     254,     0,  2611,  2612,  2610,     0,  1716,  1706,  1645,  1652,
    2755,  1613,  1548,  1544,  1517,  1544,     0,     0,  1525,  1544,
    1521,  1523,  1578,  1219,  1632,  1645,     0,  1648,  1223,  1222,
       0,  2570,  2569,  2563,  2562,  2564,  2543,     0,     0,  1869,
    1648,  1865,     0,     0,     0,  1620,     0,   373,  2625,   202,
     652,   653,   651,   650,     0,  2831,     0,     0,     0,   129,
       0,     0,   482,     0,     0,     0,   654,   655,   657,   658,
    2028,   489,   826,   597,   148,   410,   681,   928,  1144,     0,
       0,     0,   881,   675,   588,   927,   882,   588,   588,     0,
    1004,  1030,  1031,     0,     0,   605,   602,     0,   614,   987,
     978,   988,   999,  1001,     0,   604,   629,     0,     0,   617,
    1746,     0,  1012,     0,     0,   599,     0,     0,   648,   649,
     647,   623,   630,  1032,  1033,   600,   601,     0,     0,  1635,
    1637,  1645,   607,   606,  1695,  1694,   616,     0,   603,     0,
    1018,   994,     0,   645,   643,   640,   642,   641,   646,   644,
     618,   609,   608,   611,   610,   613,   612,   615,   631,   983,
       0,  1034,  1034,  1003,     0,  2109,     0,  1051,  1005,     0,
     659,   677,   660,     0,     0,   635,   634,   632,   633,     0,
       0,  2727,     0,     0,     0,   956,     0,   164,   162,   172,
    1110,  1111,     0,     0,     0,     0,     0,     0,   218,     0,
    1178,     0,     0,     0,   110,   112,     0,   114,   116,     0,
     106,   108,   399,   464,   417,  1826,  1819,  1663,     0,  1512,
       0,     0,     0,     0,   831,     0,     0,   786,  1498,   748,
     783,  1307,   768,  1300,  1302,  1298,     0,   749,  1301,   783,
       0,  1304,  1306,  1297,     0,  1455,     0,     0,     0,  1478,
       0,     0,     0,     0,     0,     0,     0,  1334,     0,  1435,
       0,     0,     0,     0,     0,     0,  1364,  1362,  1363,   838,
    1421,     0,   851,   845,   843,   850,     0,  1623,  1188,  2762,
     930,  1254,     0,  1445,  1982,     0,  1980,  1956,  1983,     0,
    2697,  2695,  2694,     0,     0,  2711,  2711,  2711,  1796,  1795,
       0,  1794,   321,   336,   339,  1798,  1172,  1180,  2030,  2029,
       0,     0,   512,   515,     0,   507,     0,   531,     0,   498,
     576,     0,     0,     0,  1792,  1780,  2749,  1769,  1772,  2103,
    1543,  1587,  2613,   816,  2031,  1643,  1549,  1547,  1555,     0,
    1513,  1544,  1544,     0,  1513,     0,     0,  1545,  1575,  1557,
    1633,  1634,     0,  1629,  1631,  1625,  1696,  2097,  2525,  2527,
    1871,  1079,  1081,  1803,  1639,  1805,     0,   203,   205,   206,
       0,   213,   391,   390,     0,     0,     0,     0,     0,     0,
       0,   479,   476,   679,   478,   578,   598,   989,     0,   588,
     877,   878,   927,   902,  2106,   927,   927,     0,     0,     0,
     977,     0,  1130,     0,   982,   822,   624,     0,   973,  1013,
    1046,     0,   625,  1049,   975,     0,  1638,   493,   974,   996,
     980,  1975,  1007,  1050,   859,   762,   713,   704,   783,   707,
     706,   783,   718,   768,   764,     0,   768,   768,   741,   740,
     758,   744,   726,   831,   831,   725,   761,   831,   745,   743,
     747,     0,   749,   768,   754,   742,   746,   763,   739,     0,
     760,   783,   783,   783,   722,   759,   831,     0,   752,   783,
     683,   768,   831,   836,     0,     0,   783,   785,  2108,  2806,
       0,  2808,   171,   160,     0,     0,   958,   960,     0,     0,
     961,  1116,     0,   226,   301,   822,   302,     0,   229,  1174,
    1585,   321,   102,     0,   103,     0,   101,     0,     0,  1814,
    1372,   781,   779,   782,   780,   829,   834,   832,   830,     0,
     836,  1486,     0,     0,  1309,  1303,   750,  1308,  1299,   831,
    1397,  1375,  1376,  1405,     0,  1476,  1467,  1403,     0,  1352,
    1436,     0,     0,  1413,  1382,  1385,  1383,  1388,  1389,     0,
    1420,     0,  1639,  1256,  1978,     0,     0,  1954,  2714,  2699,
       0,     0,  2710,  2708,     0,  2709,  2707,  2675,     0,  2620,
    2621,  2619,  2603,     0,   321,   341,     0,     0,   335,  1219,
     520,     0,   537,   536,   533,  1199,  1782,  1784,  1790,  1779,
       0,  2039,     0,  1526,     0,  1530,  1535,  1531,     0,  1522,
       0,  1579,     0,  1199,  1645,     0,  1711,  1663,  2825,     0,
       0,  2823,   216,   214,   215,     0,   209,   211,     0,   394,
     392,   393,     0,     0,     0,     0,     0,  1645,   925,     0,
     483,  2749,   592,   656,   579,     0,   991,     0,   927,   902,
    2106,     0,   661,     0,   665,   667,   587,  1017,     0,  1049,
     979,  1000,  1019,  1011,  1010,     0,  1009,  1144,  1636,   995,
     997,  1092,     0,     0,   863,   712,   705,   723,   721,   772,
     765,     0,   772,   772,   732,   748,   727,     0,   831,   738,
     731,   750,   753,   755,   757,   772,     0,   831,   720,   719,
     729,   716,   772,   787,   766,   751,   831,   709,   837,   836,
     711,   831,   836,   772,   772,     0,  2805,     0,  2803,     0,
     158,   163,   173,   174,   948,     0,  1117,  1113,  1114,  1109,
       0,   806,     0,   224,   225,   237,   236,   228,     0,   321,
     111,   115,   107,  2427,  1664,  1820,   835,   828,   833,     0,
    1305,  1479,  1645,     0,  1438,  1440,   839,     0,  1648,  1981,
       0,  2681,  2680,  2679,  2676,     0,     0,     0,     0,     0,
       0,     0,  2712,  2716,  1793,     0,     0,     0,   528,     0,
       0,   562,   577,     0,     0,     0,     0,  2032,  2034,     0,
    1717,  1550,     0,     0,     0,     0,     0,  1567,  1568,     0,
       0,  1573,  1577,  1558,  1630,  1697,  1210,  1712,  1802,     0,
     204,   207,  2832,   213,   212,  1219,   169,     0,     0,   892,
       0,   924,     0,   894,   480,   490,     0,   485,     0,     0,
     990,   678,   673,   669,     0,   903,     0,   663,     0,     0,
       0,     0,     0,     0,     0,  1016,  2073,  1008,   494,   976,
       0,   981,   620,     0,   862,     0,   867,   776,   777,   778,
     733,   773,   775,     0,   931,   735,   703,   728,   756,   734,
       0,   730,   717,   795,     0,     0,     0,     0,   791,     0,
     857,     0,   798,   684,     0,   685,   788,   790,     0,     0,
       0,     0,   724,   708,   710,   714,   715,   701,   702,  2107,
    2807,  1195,  1184,  2812,   165,   962,   321,  1112,     0,  1119,
     245,   243,   321,   233,   241,   235,     0,   242,   303,   230,
    1665,     0,  1219,  1815,   771,     0,  1481,  1350,  1422,  1696,
    1984,  2677,  2717,  2720,  2718,  2719,  2722,  1667,     0,  2721,
    2715,     0,  1541,  1220,     0,   521,     0,   524,   526,   540,
       0,  1787,  1787,     0,     0,  1787,  1787,  1787,  1787,   555,
     563,   565,     0,     0,     0,     0,     0,  2033,     0,     0,
    2040,  2042,  1527,     0,  1532,     0,  1524,  1563,  1563,  1574,
       0,  1194,  2826,   181,   210,  2817,   161,   170,     0,   890,
       0,  1787,     0,  1025,   893,   918,   900,     0,  1645,     0,
    1025,   895,   917,   898,  2028,     0,  2743,   993,     0,     0,
       0,   671,     0,     0,     0,     0,  2075,  2074,   985,     0,
     860,     0,   864,   865,   866,     0,   858,   774,   831,     0,
     831,   801,   800,  1226,   793,   808,   688,     0,     0,   799,
       0,   789,   797,   792,     0,     0,  2810,     0,     0,  2809,
       0,   167,   175,  1118,  1123,     0,  1120,  1122,     0,   227,
     244,  1666,  1821,  1645,  1210,  1669,  1668,  1799,  1807,     0,
    2018,     0,   529,   522,     0,     0,   538,     0,     0,  1787,
    1787,     0,     0,     0,     0,     0,   535,   564,  1787,  2037,
    2038,     0,  2035,     0,     0,  2041,     0,     0,     0,  1571,
    1569,  1219,     0,  2833,     0,   172,     0,     0,     0,  1025,
     891,   916,   915,   896,   910,     0,     0,   132,  1027,  1026,
     901,     0,   923,   926,   134,   899,   477,   487,   486,   992,
       0,     0,     0,     0,     0,     0,     0,     0,   861,     0,
       0,   736,   932,   737,     0,   807,  1226,   796,  1219,   805,
     804,   802,   803,   767,  2749,     0,     0,     0,   166,     0,
     159,  1115,     0,   234,  1480,  1197,     0,     0,   815,   516,
     528,   525,   548,   541,   544,     0,   574,   568,     0,     0,
     570,   571,   569,   566,   559,     0,   557,     0,  2036,  2044,
    2043,  1529,  1534,     0,  1564,     0,     0,     0,     0,     0,
    1700,  1702,  2827,   190,   182,     0,   321,     0,     0,   146,
     908,   907,   130,   897,   909,   919,  1029,  1028,   914,   913,
     911,   912,  2749,     0,     0,     0,   890,     0,   892,   894,
       0,   873,     0,   872,     0,   869,   868,  1227,     0,   794,
       0,  2811,     0,  2813,     0,   168,  1121,  1806,  1808,  2019,
     523,   548,     0,   546,     0,   542,   539,   543,   572,   573,
       0,   556,     0,   567,  1566,  1565,  1580,     0,  1220,  1698,
    1219,   181,   191,  2834,  1219,   174,   488,     0,   890,     0,
     662,   890,   666,   668,   998,   875,   876,   874,     0,     0,
    1228,   689,  2814,  2815,  2045,   545,     0,   553,   549,   551,
     554,   562,   561,   558,     0,     0,  1703,  1701,  2828,  2818,
     157,   674,   670,   890,   664,     0,     0,   691,   690,   692,
       0,  2031,   547,     0,     0,   560,  1572,  1570,   321,     0,
     672,   871,   870,     0,   696,   686,   693,   695,     0,  2039,
     552,   550,  2829,     0,   698,   697,   694,     0,  2047,  2819,
    2046,     0,  2051,   321,     0,     0,  2058,  2820,  2049,  2050,
    2048,  2053,     0,     0,  2055,  2056,     0,  2020,  2057,  2052,
       0,  2059,  2061,     0,  2054,     0,  1219,  2060,     0,  1220,
    2062
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4291, -4291, -4291, -4291,  1706,  3429, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  1863, -4291, -4291, -4291, -4291, -4291,
    1512, -4291,   329, -4291,   337, -4291,   342, -2530,  -475,  3318,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
    -132,  1173,  3274, -4291,   227, -4291,  -122, -4291, -4291, -4291,
   -3527,  -243,  -410, -4291,    24,    20,  3258,  -405, -3576, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -3697, -4291,
   -4291, -4291,    54, -4291, -4291,  -567, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  -188,   365,  1953, -4291, -4291, -4291,
    4341, -4291,  3784, -4291, -1915,  2336, -4291, -4291, -4291, -4291,
   -4291,  2423, -1854, -4291, -4291, -4291,  1388, -4291, -4291, -4291,
    -920,    36, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,   565, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  2111, -4291,
   -4291,  3704, -4291, -4291, -4291,  1369, -4291, -4291, -4291, -4291,
   -4291, -4291, -1328, -4291,  1846,  1848, -4291,  1850, -4291,  -306,
     245, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  3224, -4291,
   -4291, -4291, -2297, -4291, -4291, -2632,  2716, -4291, -1954, -4291,
   -4291, -2109, -4291, -4291, -1869,   344, -4291, -4291,   975,  -336,
   -4291, -1593, -2123, -2112, -4291, -4291, -4291, -2170, -2169,  -804,
    2471, -1247, -2550, -4291, -4291, -4291, -4291,  -115, -4291, -4291,
      67,  1601,  2151, -4291, -2702, -4291, -4291,   747, -4291, -4291,
    1370,   572,  1368, -4291,   916,  2971, -1367, -4291, -4291, -4291,
   -4291, -4291, -4291,  -170,   129,  -263, -4291, -4058,   580, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4290, -4291, -4291,
   -4291,  -414, -4291, -4291,  -352, -4291, -4291,  -390, -4291,   -43,
   -2510, -4291, -4291, -4291, -4291,  2226, -1547, -4291,  -628, -4291,
     276,  1634, -2934, -2128, -4291, -1038, -1032, -3158, -4291, -4291,
   -4291, -4291,  1157, -4291,   529,  1635, -2603, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291,  1158, -4291, -4291, -3378, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  -409, -4291,  -222,   748,
   -4291, -3187,  1074,   479, -4291, -4291, -4291, -4291,  -909, -3189,
    -753, -4291,    75, -2641, -2705,   450, -4291, -4291,    52, -3896,
   -4291,  -601, -2293, -2565,  -227, -4291, -4291,    69, -3510,  1746,
   -4291,   418,  -908, -2742,  1511, -4291, -4291,  1037, -4291, -1940,
    1036, -4291, -4291, -4291,  1045, -4291,  -323, -4291, -4291, -4291,
   -4291, -3262, -4291, -1624, -2673, -4291, -4291,  4391,  4392, -2582,
    -269,  -268, -4291, -4291, -4291,   313, -4291, -4291, -1836,  -145,
     -38,   -28, -2614, -3731,   148, -2945, -4291,   274, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  1682, -1295, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -2686, -3082, -4291, -4291,  1215,
   -2959, -2217, -2206, -2600,  3419, -4291, -4291, -4291, -4291,  3357,
   -2430, -3610, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  2886,
    1169, -4291, -4291,  1811, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291,   312,  1922, -4291, -4291, -4291, -4291, -4291,
    2237, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  -175,
   -4291, -4291, -4291, -4291, -4291,   577,  2777, -4291, -4291, -4291,
   -4291,    -9, -4291, -4291, -4291, -4291,  2465, -4291, -4291, -4291,
   -4291,  2807, -4291, -4291, -4291, -4291, -4291, -4291,  1482, -4291,
    1964, -4291, -1620, -4291, -4291,  1027,  -147,  1907,  -627, -4291,
    2064, -4291,   104, -4291,  3422, -4291, -4291, -3272,  3532, -4291,
   -4291, -2640, -4291,  3533, -1487, -2871,  2424,   116,  -141, -2058,
    1079,  -127,  1442,   995,  4587, -4291, -1234, -1211, -4291, -4291,
      -2, -4291, -4291, -4291, -4291, -4291, -4291,  2169,  2178,  -647,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291,  1550, -4291, -4291, -4291, -4291, -1314, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  -924, -4291, -2231, -4291, -4291, -4291,
    -512, -4291,  3308, -4291, -4291, -4291, -2476, -1497,  1908,  1003,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291,  1911, -4291, -1706,
   -4291, -2929, -4291, -4291, -4291, -4291,  1576, -4291, -4291, -4291,
   -4291, -4291, -4291, -1845, -4291, -2139,    53, -4291,   230, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  -237,   822,  -232, -3039,
   -1212,  1632, -4291, -4291, -1357,  3351, -1908, -4291,   750, -4291,
    2076,  1125, -4291, -4291, -4291, -4291,   616, -2969,  2928, -4291,
   -4291, -3346, -1014, -4291,  2931, -4291, -1453,  1475,   429, -4291,
    -292, -1196, -1578, -3183, -2558, -4291,  1292,   120, -4291, -4291,
   -4291,  -220, -4291, -4291, -4291,  1488, -4291,   437,   438, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,  -578,
    -980, -4291, -4291,  2243, -2668,  -498,  4498,   -13, -4291, -4291,
      -4, -4291, -4291, -4291, -4291,  3166,  3115,  2040, -4291, -4291,
   -2587, -4291, -4291,  2003, -4291,   735,  -985,  -928,  1070, -4291,
   -4291,  1073, -3475, -4291, -4291,    -3, -4291, -4291, -4291,  1019,
   -4291,   -91,  3975,     0, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,  2856, -1141,  3885, -4291, -4291, -4291, -4291, -4291,
   -4291,  2426, -4291, -4291, -4291, -4291, -4291, -4291,  3045,  3992,
    -606, -1444, -4291,  -812,  2427,  1915,  -969, -4291, -4291, -4291,
    3489,  3997, -4291, -4291,  4494, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  2648,   660, -4291, -4291,   527, -4291,
   -4291, -4291, -4291,  3137, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291,  1120,  -226, -4291,
     310,  -240, -4291,   133, -4291, -4291, -4291, -4291, -4291,  -265,
   -4291, -4291,  -274, -4291, -1110,  3811, -1467,   233, -1352, -2763,
   -4291,  1106,  3109, -2985,  -703, -1262, -1270, -2886,   -15, -4291,
   -4291,  3755,    30,  -471, -1844,    -6,  -851,  -107,  -624,  -613,
    -863, -4291,  -515, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291,  1961, -4291, -4291, -4291,  1071, -4291,
    4026, -4291,  2746, -1481,  4029,  -586,  2507,  1976,  1982, -4291,
   -4291, -4291, -4291, -1970, -4291, -4291,   188, -4291,  2630, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291, -4291, -4291, -4291, -4291,  3014,  -492,  -476,  3154,
    4051,  3676, -4291,  3252, -4291, -4291, -4291, -4291, -4291,   370,
   -4291,  1159,  2050, -1550, -2515, -4291, -4291,  2134,   928, -4291,
    1650,  -328,  -572, -4291, -4291,   367, -4291, -4291, -4291,  1371,
    1574,  4061,  3681, -4291, -4291, -4291, -4291, -4291, -2992,  -975,
   -4291, -3700, -1562, -4291, -4291, -4291, -2333, -3278, -4291, -4291,
   -1095, -4291, -4291, -4291, -4291, -2224, -4291, -4291, -4291,    -1,
    4023,  4024,  4025, -4291,  -885, -4291, -4291, -4291, -4291, -4291,
   -4291, -4291,  3557, -4291, -4291, -4291, -4291, -4291,  3023,  3565,
   -4291, -4291, -4291, -4291, -4291,  3571, -4291, -4291, -4291, -4291,
   -4291,  1717, -4291, -4291, -4291, -4291, -4291, -4291, -4291, -4291,
   -4291
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    64,   637,  1639,    65,    66,    67,    68,    69,  1454,
      70,   868,  1358,  1950,  1951,    71,   571,    72,  1717,  2314,
    2315,  3739,  3740,  3733,  3734,  3736,  3737,  2316,   697,   698,
      73,  2718,  3907,  3590,  3591,  2208,   645,   646,  1110,  2712,
    2741,  2742,  1648,  3587,  3715,  4424,  3719,  4571,  4680,  4506,
    2821,  4020,  4425,  4426,   566,  2707,  1683,  4623,  2236,  4724,
    2237,    74,   690,  1160,  1710,  1711,  3896,  3897,  3898,  4140,
    4145,  4146,  4147,  4148,  2826,   930,  2272,  2827,  3725,  4250,
    4257,  4258,  3301,  4432,  4433,  4434,  4255,   974,  4435,    75,
     597,   598,   976,  1490,  1966,  1491,    76,    77,   565,  1381,
    1382,  1383,  1384,  2517,  1967,  2512,  2513,  3471,  3302,  4253,
     931,   932,    79,   572,   933,   934,   935,  1438,   936,   937,
     938,   939,  3035,   940,  1434,  3495,   909,   910,  2544,  3486,
    3834,    80,   535,   693,   694,  1716,  2289,   695,  2290,  2832,
    3732,   696,  1162,  2286,  1164,  3499,   941,  2559,   942,  1430,
      81,  1153,  1702,  1703,   943,  1082,  2200,   963,  2050,  3500,
    1443,   944,  2560,  2562,  2561,    82,   582,   623,   592,  3904,
    4152,   669,   670,   708,  2337,   671,  1178,  1128,  1685,  2261,
    2262,  2747,  2748,  2867,  2868,  2869,  2253,  2254,  2255,  2326,
    2327,  2328,  2243,  2244,  2245,  1689,  2240,  2241,   672,  1129,
    1139,  2256,  2257,  2258,  2873,  2330,  2331,  2332,  2333,  2259,
    1942,  2260,  3193,  3178,  4162,  4161,  3179,  3914,  4526,  4742,
    3600,  3601,  3282,  3667,  2278,    83,   585,   952,  1451,  2568,
    1452,  2570,  3040,  3041,  3042,  2032,  2033,  4110,  2037,  2567,
    4298,  4690,  4466,  4467,  3044,  4465,  3048,  3508,  3509,  3846,
    4112,  4301,  4695,  4595,  4776,  4693,  4772,  4694,  4774,  4844,
    4818,  4819,  4606,  4705,  4706,  4780,  4821,  4479,  4480,  4481,
    2590,  3057,  4115,  4165,  2702,  1675,  1676,  3620,  1102,    84,
    3180,  2804,  3181,  3182,  3690,  2806,  2807,  2998,  1565,  3680,
    3651,  3584,  3595,  3596,  3597,  3598,  3599,  4356,  4533,  4358,
    4359,  4530,  4652,  4529,  3700,  3613,  3216,  3217,  3287,  3703,
    4223,  4403,  4404,  4839,  4855,  4856,  4857,    85,   949,  4025,
    4001,  4002,  4003,  4004,  4005,  4006,  4007,  4412,  3365,  3366,
    4380,  4381,  4382,  3360,  3361,  3758,  4405,  4406,  4407,  4026,
    4554,  4049,  1530,  1531,  3536,  1543,  1544,  2655,  2116,  2656,
    1679,  4050,  4051,  4230,  3426,  4079,  3432,  3433,  3434,  2957,
    2958,  2959,  2960,  2961,  2454,  4408,  3702,  4194,  4373,  4376,
    4546,  4755,  3614,  3218,  3617,  1059,   647,  3219,  3220,  4629,
    4513,  4520,  4630,  4521,  4514,  4172,  2715,  4631,  4632,  4633,
    4523,  4516,  3171,  4156,  4157,  3606,  3445,  4383,    86,   142,
    2264,  1120,  1131,  1127,  1150,   676,  2268,  1132,  2822,  3295,
    4244,   659,  2808,  4187,  3932,  4191,  2809,  3630,  2810,  4166,
    4350,  2811,  3949,  4189,  4370,  3631,  3632,  2812,  2813,  2814,
    4637,  4638,  4639,  3221,  1418,   674,   675,  1143,  1144,  1145,
    2501,  3698,  3265,    87,  2196,  2191,    88,  1072,  1073,  1074,
    1610,  1611,  2194,  2195,  2695,  3153,    89,   700,  1721,  1464,
    2048,    90,   961,  2581,  2582,  2583,  3054,    91,  1152,  1699,
    1700,  2271,  3298,  3722,  4021,  4249,  4429,  4245,  4575,  4576,
      92,   702,  1171,    93,   540,  1729,  1730,  1731,  2319,    94,
    1445,   150,    95,   960,  1457,  1460,  1461,    96,   689,  1154,
    1155,  1156,  1157,  2274,    97,  2013,  2547,  2548,  2549,  2550,
    1707,  2828,  1708,  1709,  2283,  3493,    98,    99,   633,   634,
    2461,  2462,   603,   986,   604,   605,   606,  2966,  2967,  2968,
    2093,  1003,  1004,  1005,  1513,  1515,  1516,  1607,  1517,  2029,
    3116,  4665,  1214,  1210,   830,   831,   832,   833,  1305,  1306,
    3711,   834,  1315,  1906,  3377,  3773,  4059,  1764,  1765,   835,
     836,   837,   838,   839,   840,  1933,  3398,  3399,  3789,  2487,
    2488,  2489,   841,  2375,  3383,  2389,   842,  1298,  1891,  1821,
    3781,  3391,  4064,  4271,  1749,  2351,  2905,  3754,  3368,  2993,
    2456,  1237,  1238,  1195,  2358,  1755,  2094,  2095,  2096,  2097,
    2098,  3875,  3876,  4312,  4124,  4314,  4128,  2637,  2638,  2054,
    2055,  2099,  2100,  3093,  4122,  2457,  2458,  2459,  3094,  3543,
    3108,  3109,  4133,  2628,  2101,  3100,  4619,  4320,  4321,  4717,
    4716,  4322,  4131,  4132,  3877,  3878,  3309,  3310,  3311,  3071,
    1811,  1812,  1819,  1411,  1412,  1750,  2103,  2642,  3113,  3556,
    2478,  2644,  3554,  3883,  2817,  3659,  3660,   989,   990,  2079,
    2622,  3087,  1506,  1507,  1508,  2085,  3088,  3089,  4039,  4459,
    4256,  2962,  3142,  3194,  1782,  1783,  3666,  4136,  4500,  4719,
    4720,  4721,  2076,  2077,  2617,  2618,  2619,   991,   992,  1503,
    2078,  3081,  3864,   100,   547,   101,  1948,  2996,  1355,  2509,
    1169,  1469,  1736,  1737,   858,   854,   561,   102,   573,  2545,
     103,   593,  2052,   914,   966,  1470,  1471,  2591,  3058,  3065,
    2592,  3070,  3856,  3060,  3516,  3517,  2496,  2497,  3061,  3519,
    3853,  3830,  3831,  3488,  4106,   104,   621,  3575,  3154,  3155,
    4587,  4588,   967,   105,   546,  1182,  2881,  4265,  1742,  2339,
    4443,  1183,  1184,  2342,   713,   714,   106,  1077,   617,  1589,
    1590,  1591,  2178,   107,   609,  1060,  3143,  3570,  2162,   956,
    1352,  1570,  1063,  1571,  2148,  2677,  1554,   108,  1116,  1115,
     686,   109,   110,   654,   151,  1671,   111,   869,  1374,  1962,
    3006,  3007,  3456,  1375,  1376,  2510,  2506,  3815,  3816,  4087,
     112,   594,   971,   972,  1475,  1473,  2602,  2057,   113,   587,
     957,  2043,   114,   576,   919,  1422,  2012,   115,   116,   117,
     921,  3494,  4688,  4814,   580,  2015,  1426,  3915,  4121,  4307,
    4308,  4310,  4490,  4491,  4841,  4872,  4880,  4876,  4883,  4884,
    4887,  4891,  4892,   844,  1088,  1089,   845,  4365,   846,   847,
     848,  3066,  3067,  2623,   849,  3068,   850,  3288,  1170,  1739,
     569,   531,   666,  1090,  2614,   852,   946,  1123,  1458,  1982,
    1983,   533,   534,   118,   608,  1007,  2111,  1520,  1021,  1548,
    1538,  1547,  2136,  2672,  2139,  2673,  2674,  3567,  3134,  3568,
    3135,  1066,  2132,  1521,  3136,  1522,  2125,  2126,  2127,  2128,
    3128,  1536,  2122,  2145,   119,   922,   539,  1428,  1429,  2556,
     120,   620,   121,  1413,  2003,  2004,  2541,  3024,  2542,   122,
     980,   981,   123,   897,  2705,  2525,  1938,  1126,  1939,  1989,
     900,  1387,   901,   902,  1402,  1396,  1405,  1399,  4285,  4096,
    4097,  2529,  1946,  1984,  2066,  3016,  3823,  1985,  1976,  2519,
    2520,  3825,  4099,  3475,  4292,  4293,   124,   155,   125,  4725,
     542,   705,  1177,  1498,   126,   127,   128,   129,  1501,  1632,
    2612,  1633,  1634,  1635,  1636,  2206,  2073,  1887,  1888,  3443,
    1295,  1296,  2464,  2969,  2970,  1006,  1105,  1659,  1650,   143,
     144,   145,   146,  1147,  1148,  3291,  3710,  4010,  4238,  4239,
    4423,  4569,  1652,  3165,  4624,  4849,  4873,  1653,  1654,  1655,
    3579,  4329,  4622,  4791,  4848,  1656,  3164,  3901,  4503,  4726,
     130,  1091,   631,  1630,  1625,  1627,  2203,  2700,   131,   132,
     133
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     532,   154,   677,  1062,   681,  1096,  1672,  1019,  1058,   568,
    1440,  1502,   563,  1103,   562,  1875,  1104,  1781,   570,  2080,
    1826,  1567,  1024,  1874,   583,   962,   530,  1969,  1532,  1535,
     586,   591,  2340,   668,   157,   843,    78,  1124,   599,  1549,
    2087,   602,  1440,  1597,  1744,  1849,   599,  2815,  1125,  2647,
    2648,   855,   856,   622,  2086,   860,   861,   862,  2816,  1351,
     864,   865,   866,  1239,  1563,  1968,  2137,   947,  2906,   600,
    2016,  1190,  3001,  1897,   898,  1435,  1436,   947,  3527,  3064,
    2913,  1905,  1677,  2035,  3258,  2282,  3645,  2279,  1678,  1598,
     899,  3337,  2246,  2210,   656,  2543,  1459,  1619,  3438,  3538,
    3172,  3895,  2018,   657,  1943,  1907,  1908,  3706,   898,  1911,
    1912,  1913,  1914,  2511,  1916,  1917,  1919,  1921,  1922,  1923,
    1924,  1925,  1168,  2199,   982,  1172,  3555,  1790,  2224,   660,
    2975,   532,  2169,   532,   667,   673,  2805,  1069,   682,  2750,
    1076,  2329,  2652,  2914,  3557,   678,  2604,   683,   684,  3215,
    2751,   685,  2182,  3096,  3223,  3184,  4119,   662,  3227,   664,
    2185,  2186,  3105,  3646,  3152,  3809,  3720,  2874,  2875,  3242,
    3808,  4247,  1701,  3195,  3548,  1291,  1292,  1293,  4159,  3757,
    4284,  3253,  1300,  1301,  3821,  3195,  3195,  1334,  4016,  3771,
    3362,  3363,  3865,  3207,  3208,  1409,  3369,  4228,  3371,  3013,
    2251,  4045,  2030,  3262,   704,  2251,  1300,  1301,  1403,  3884,
    1300,  1301,  3428,  -484,  2871,  4853,  4046,    14,  2864,   581,
     611,  1651,  1660,  1300,  1301,  2872,  4090,   590,  3563,   614,
    4047,  2615,  1674,  4045,  1674,  2971,  3349,  1300,  1301,  4211,
    2451,  1028,  1009,  2041,  4331,  1300,  1301,  1599,  3603,  1300,
    1301,  3334,  3053,  1300,  1301,  1534,  2641,  3367,  3004,  2024,
    1986,  4045,  2251,  3168,  -937,  1698,  -580,  1751,  1752,  1753,
    2318,  3292,  2499,  1028,  1009,  3609,  4046,  3928,  1552,  3943,
    4775,  1300,  1301,  1774,  1771,  1335,  3838,  1572,  2499, -1576,
    4047,  4528,  1300,  1301,  1300,  1301,   905,   917,  3785,  1674,
    2746,  1028,  1009,  3195,  3195,  2067,  1300,  1301,  2753,  4837,
    4457,  3343,  3344,  1117,   577,  3946,  4090,  1835,  2322,  2129,
    1839,  1335,  1613,  1300,  1301,  1173, -2678,  3607,    27,  3429,
   -1576,  -581,  4806,  4186,  1300,  1301,  1524,  3623,   680, -1616,
    1622,  1858,  1859,  1424, -1912,  1863,  1718,  1775,  1084,  1070,
   -2110,  3390,  3696,  1300,  1301,  1300,  1301,  1885,  3838,  2238,
    3476,  4510,  1877,  1878,  3144,  3713,  1409,  1528,  1141,  1356,
    1179,  1747,  1747,  1338,  1084,  2733,  1776,  4117,   574,  1300,
    1301,  1300,  1301,  3747,  2089,   618,  2515,   543,  1218,   148,
    1747,  2130,  1300,  1301,  4045,  1747,  2192,   537,  1271,  3540,
     538, -1912,  4773,  1300,  1301,  4777,  3610,  2428,  2361,  4046,
    3296,   947,   947,  2356,  1568,   947,  2242,  3515,  4091,  2866,
    2477,  2242,  4488,  4047,  4338,  4182,  4659,  2523,  3902,  2443,
    2713,  4149,  3717,  3169,  1028,  4205,  2955,   578,  2248,   156,
    1578,   156,  4330,   950,  1300,  1301,  1777,   947,  3718,   158,
    3211,  4334,  3903,  2714,  1644,  2524,  4489,  2362,  1337,   896,
    3541,  4344,  2956,   701,   908,  2947,   541,  1569,   536,  3553,
    1300,  1301,  3297,  3409,   149,  1987,  3522,  2193,  2242,  3056,
    1219,  1665,   575,  1666,  1667,  1668,  1669,  2335,   544,   619,
    1272,  1945,  2516,   896,  2252,  2452,  3104,  1300,  1301,  2252,
    2359,  1300,  1301,  1477,  3839,  1748,  1770,  3335,  4091,  1400,
     291,  1142,   293,  2201,  2239,  4251,  3714,  1529,  1789,  2025,
    2068,  3477,  4092,  1347,  1834,  1778,  4842,  4838,  1886,  1838,
    1525,  1085,  1086,  1239,  3697,  1977,    42,  2112, -2596,   673,
    1453,  4511,  4150,  1937,  1118,  3428,  1940,  3618,  1071,  1425,
     673,  1302,  1528,  4179,  1303,  2133,  2252,  1085,  1086,  3627,
     667,   903,  3532,  3533,  3534,   667,   699,    48,   915,  4367,
    4807,  1119,  1151,  3643,  3644,  1302,  3839,  1592,  1303,  1614,
    1300,  1301,   958,  2778,  3609,  3657,  4317,  1300,  1301,  4458,
     918,  1719,  1302,  1722,   667,  1303,  1714,  2323,  2131,  4750,
    1336,  2164,  1020,  1940,  2167,   916,  1302,  3786,  2170,  1303,
    2173,  4771,  1078,   959,  1302,  1988,  3870,  1303,  1302,  3929,
    3874,  1303,  1302,  1337,  2750,  1303,  3611,  4318,  4294,  2650,
    1553,  2064,  1100,  1174,   907,  2751,  1336,  1677,  2188,  2189,
    2190, -1616,   699,  1678,  3850,   699,  3336,  1645,   947,  1079,
    1302,  2246, -2596,  1303,  2949,   667,   545,  1130,   906,  3430,
    1988,  1302,  3429,  1302,  1303,  3293,  1303,  3594,  3916,  2749,
    3923,  2118,  1910,   667,  1158,  1302,  1970,  2805,  1303,  2026,
    2500,  1602,  3879,   657,    58,  1161,  1758,  1759,  4093,  1931,
    1943,  3005,  1302,  3170,   657,  1303,  2500,   657,  2874,  2875,
    1130, -1576,  1529,  1302,  2479,  4094,  1303,  1185,  3031,  1969,
    1720,   612,  -484,  1814,  1404,  2482,  3744,  2090,  2485,  1055,
     615,  1827,  1302,  1829,  1302,  1303,  4722,  1303,   703,  3607,
    4854,  1720,  3195,  3564,  2329,  1842,  1843,  1844,    63,  2689,
    2317,  3931,  1779,  1848,  2870,  2871,  3439,  1968,  1302,   867,
    1302,  1303,  1573,  1303,  3345,  1350,  2872,  3939,  3940,  3263,
    1240,  1302,   984,  -937,  1303,  -580,  1300,  1301,  1300,  1301,
    3014,   948,  1302,  3822,  4048,  1303,  1055,  1947, -1616,  2218,
    3015,  3148,  1981,  3095,  2031,   613,  2042,  4207,  4324,  3195,
    2184,  3209,  4212, -2678,  1440,  4094,  4095,  3743,  4225,  1300,
    1301,  4653,  1941,  4655,  4656,  1304,  4048,  3612,  1080,  4507,
    3721,  4341,  1780,  1302,  2476,  4248,  1303,  3359,  3757,  3145,
    1410,  1297,  1720,  1299,  2349, -2678,  3860,  2465,  3264,  1304,
    -581,  1333,  3210,  1304,  4048,   579,  3359,  2745, -1616,  1302,
    2565,  3431,  1303,  4302,  4311,  2373,  1304,  2883,  1342,   532,
    1344,  4181,  1346,  1130,   532,  2027,   667,   898,   532,  1941,
    1304,  4323,  1646,  3197,  1385,  2429,  1302,  2028,  1304,  1303,
    1302,  1124,  1304,  1303,  1087,  1343,  1304,  1720,  2578,  2453,
    1348,  2247,  2065,  2357,  1353,  1349,  2444,  2049,  2091,  1354,
    1882,  1883,  2092,  4660,  3348,  2374,  1958,  4134,  4151, -1939,
    1279,  1414,  1300,  1301,  1304,  1579,  1533,  1427,  1537,  4512,
    2402,  1540,  1545,  3605,  2406,  1304,   657,  1304,  1431,  4743,
    4744,   154,  1437,  4747,  1723,  4137,  4446,  1566,  2152,  1304,
    2334,  3030,  3452,  3410,  3107,  1882,  2393,  3857,  2430,  3921,
    1300,  1301,  4125,  4126,  1401,  1462,  1304,  2432,  2433,  1302,
    1124,  1472,  1303,   667,   657,  3938,  1302,  1304,  3699,  1303,
     657,  2168,  3546,  3547,  2348,  1649,  1649,  4048,   681,  1146,
    3863,  3012,  3937,  3352,  4761,  3354,  1304,  4169,  1304,  1926,
    4174,  4175, -1616,  1455, -2672,  1420,  3505,  4206,  3998,  2578,
   -2655,  1410,  3430,  2626,  2449,  2450,  2360,  2248,  4319,  4542,
    2058,  1020,  1304, -2596,  1304,  1552,  4348,   667,   954,   667,
   -1939,  3064,   667,   667,  4799,  1304,  3862,  2213,  2214,  1981,
    2980,  2981,  3387,  3388,  1647,  1628,  1304,  1603,   667,  2217,
    1300,  1301,   898,  3394,  3395,  3272,  3607, -2596,  2662,  3607,
    3607,  3750,  4796,  3892,  3411,  3412,  1724,  4723,  2113, -2659,
    1725,  4183,  1300,  1301,  1593,  4054,  4751,  1378,  1300,  1301,
    3437,  1726,    48,  2815,  4057, -2799,  4303,  1304,  2267,  3869,
    2469,   657,  3935,  3873,  2816,  4510,  4304, -2658,  2226,  4272,
    2335,  3163,   699,  3824,   699,  3449,  3450,  2750,  3215, -2656,
    2877,  4316,  3242,  1304,  1300,  1301,  1641, -2751,  2751,  1640,
   -2657,  4878,   682,   584, -2662,  1300,  1301,  1664,  1317,   564,
    1673,   683,   684,  4278,  1747,   685,  1432,  4142,  2074,  2265,
    1304,  3367,  1511,  2579,  1304,  1693,  4143,  1642,  1643,  2400,
    1300,  1301, -2513,  2658,   657,  1302,  1317,  1302,  1303,  2246,
    1303,  1815,  2364,   532,  1816,  3241,   657,  2546,  3774,  1465,
     898,   588,  2805, -2597,  2749,  2511,  2224,  2087,  3530,  2087,
    2087,  3566,  1604,  2251,  2685,   657,  1738,  2123,  1302,  1697,
    1677,  1303,  4642,  3091,  3092,  1740,  1678,  3580,  2874,  2875,
    1448,  2573,  2574,  1449,  2786,  2159,  1605,   607,  2928,   710,
    2701,  1892,  2634,  1727,  1940,  1300,  1301,  4543,  1927,   947,
    2683,  3049,   616,  1304,  3751,  2885, -2751,  3866,  1467,  2251,
    1304,  1512,  4768,  2688,  3550,  1240,  2691,  2692, -1939,  2322,
    3273,  1928,  2347,  4352,   291,  2871,   293,  1629,  1930,  2365,
    1240,  3036,  2789,    63,  2579,  2553,  2872,  4684,   968,  2266,
    2979,  2071,   896,   964,  1556,  2160,  3149,   711,  1862, -1939,
    1300,  1301,  4723,  4197,  2470,  4511,  4198,  1300,  1301,  1300,
    1301,  4349,  3321,  4190,  4144,   632, -2672, -2597,  2984,  2985,
    2329,  1302, -2655,  1971,  1303,  2870,  1433,  2627,  1505,  1876,
     691,  2484,  3607,  3752,   955,  2524,  4217,  4218,  4219,  1701,
    4305,  1728,   667,   156,  4222,  2663,  4879,  2719,  2720,  3581,
    4544,  4233,  2580,  1557,  1320,  2251, -2513,  1902,  4268,  1302,
    1300,  1301,  1303,  2090,  2731,  4195,  4196,  1300,  1301,  1875,
    2866,  1421,  3367,  2743,  2744,  3367,  3367,  1621,  1657,   667,
    1450, -2659,  1320,  1558,  1934,  1300,  1301,  1300,  1301,  1300,
    1301,  2124,  3367,   667,  1300,  1301,  2040,   134,   667,   657,
    1300,  1301,   969,  3045,  1720,  2075,  4221,  1553,  1970, -2658,
    3367,  4226,  4229,  4231,  4232,  1594, -1939,   635,  2585,  4752,
    2502, -2656,  2554,  1240,   667,  2072,  1300,  1301,  2978,  2242,
     712,  4670, -2657,  3351,  3726,  1929, -2662,   988,  2988,  1304,
    1133,  1304,   667,   156,  2859,  2860,  2861,  2862,  4756,  1302,
     667,   699,  1303,  1472,   965,  1999,  3727,  2002,  2367,  3491,
    2370,  3441,   657,  2580,  1300,  1301,  1500,   896,  4700,  4701,
   -1939,  1302,  1304,  4899,  1303,  2242,  1875,  1302,  2020,   970,
    1303,  2090,  4421,  2161,  3156,  1300,  1301,  1300,  1301,   657,
    2247,  2371,  3280,  3746,  1134,  2594,  3551,   667,  3662,  2008,
    1941,  1300,  1301,  1472,  4616,   636,  4617,  2252,  4739,   657,
    4583,   658,   657,  1302,  4753,  3187,  1303,  2471,   136,  4306,
    2577,  3482,  3483,  3484,  1302,  1300,  1301,  1303,  1690,  1691,
   -2751,  3582,  2507,  2472,  2091,  2248,  4675,  4414,   667,   667,
    4416,  3802,  2070,  1961,  1190,  3804,  4754,  4676,  2323,  1302,
    3753,  2088,  1303,  2252,  1940,   699,  2215,  1300,  1301,  2595,
    4184,  2109,  1300,  1301,  1300,  1301,  1300,  1301,   667,  2114,
     709,  2242,  1720,  2334,  1735,  1304,  2242,  4456,   667,  3025,
    -208,   863,  3542,  2876,  4648,   896,  1135,   638,  2596,  4346,
    2134,  1020,   911,  1646,  2372,  2156,  2669,  2158,  1559,  4783,
   -1219,   532,   532,   532,   657,   532,   657,  4355,  2219,  4357,
    4173,  4644, -2140,  1304,  1302,  2165,   532,  1303,   667,  2119,
     898,  4582,   532,  4851,  4852,  2228,  2555,  2153,  2154,  2155,
   -1711,  2157,  2379,  2706,  2183,  3188,  2605,  2710,  2711, -2751,
    3583,  1817,  2166,   657,  1818,  3616,  3616,  2120,  2172,  2252,
    4536,  4537,  2091,  4422,  3648,   663,  2092,  2171,  2597,  3085,
    1327,  1328,  1329,  1330,  1331,  1332,  2335,  2749, -2597,  1302,
     601,  2877,  1303,  2087,  4377, -2292,  1302,  2394,  1302,  1303,
     987,  1303,   912,  2697,  4040,  3000,   667,   667,  2038,  3704,
    1329,  1330,  1331,  1332,  1175,  2630,  1940,  3625,  1300,  1301,
    1146,  1940, -2597,  1304,  2223,  4347,  1300,  1301,   136,   667,
    2220,  2221,  2222,   657,  3342,  1677,  4538,  3894,  2149,  2150,
    4732,  1678,  2380,  3655,  3656,  1304,   667,  1055,  4354,  1302,
    3649,  1304,  1303,  2039,  3131,   947,  1302,  2598,  1560,  1303,
    2277,  1608,  3750,  1275,  2386,   152,   153,  3137,  2275,   657,
    2391,   661,  4585,   913,  1302,  1647,  1302,  1303,  1302,  1303,
    1561,  1303, -2140,  1302,   657,  4677,  1303,  1304,  2250,  1302,
    2394,  1969,  1303,  4378,  1176, -1912,  3086,  4074,  1304,   688,
    1300,  1301, -2140,  1211,  1212,  1185,  2392,  2346,  1300,  1301,
    4531,  3353,  1300,  1301,  1945,  1302, -2799,  2396,  1303,  1136,
    3552,  1562,  3448,  1304,  4713,  2870,  4267,  3704,  2121,  1968,
    1941,  3138,  1300,  1301,  2600,  4379,   988,  4510,  2280,  1300,
    1301,  1609,  2408,  1300,  1301, -2292,   679,  1440,  1300,  1301,
    3650,  4586,  2704,  1302,  2631,  1276,  1303,   687,  1875,  2490,
    3122,  2281,  2486,  1300,  1301, -2292,  3518,  2491,  1300,  1301,
    4714,  2632,  2242,  2490,  1302,   691,  1302,  1303,  1282,  1303,
    2495,  3560,   291,  2633,   293,  1137,   993,  1138,  1304,  1055,
    1302,  1300,  1301,  1303,  1055,  3222,  1240,  2401,  3225,  3226,
    2983,  3228,  3125,  3290,  3231,  3232,  4525,  2415,  3235, -2317,
    1300,  1301,  2503,  3244,  1302,  1300,  1301,  1303,  3248,  3249,
    3250,  3251,  3252,  3126,  3510,  3751,  3256,  3257,  2910,  3259,
    3139,  1300,  1301,  2915,   692,  3268,  3269,  3270,  3271,  1394,
    3030,  3275,  3276,  1304,  3278,  1511,  1302,  2922, -1712,  1303,
    1304,  1302,  1304,  1302,  1303,  1302,  1303,  2468,  1303,  3127,
    2564,  3844,  2419,  1300,  1301,  2634,   704,  1981,   706,  2420,
    1981,  2422,  1941,   707,  2599,  4469,  3305,  1941,  1300,  1301,
     853,  2937,  1300,  1301,  1300,  1301,   291,  4123,   293,  1300,
    1301,  2493, -1940,  1300,  1301,  4470,  4715,  1940,  2247,  2492,
     657,  1300,  1301,  1304,  3755,  3474,  3845,   857,  3347,  3140,
    1304,  1898,   657,   667,   859,  1300,  1301,  4511,  3376,   870,
     994,   904,  2423,  1300,  1301,   896,   657,  2734,  1304,  2427,
    1304,  1385,  1304,  2524,  1512,  2006,  1385,  1304,   951,  2518,
    2620,  2527,  2527,  1304,  2527,   920,  2366,  3026,  2994,  2445,
    2528,  2528,  3689,  2528,  1124,  1875,  3392,   699,  3616, -2317,
     147,   953,  3393,  3661,   962,  3076,   973,   596,  2551,  1304,
    1300,  1301,  1427,   898,   667,   596,  3195,   657,  2657, -2317,
    2635,   657,  3729,  4730,  4731,  1300,  1301,  1302,  3404,  2997,
    1303,   537,  1300,  1301,   538,  1302,   975,   995,  1303,   947,
     965,  1462,  2576, -1940,  1068,  1300,  1301,  1304,   667,   667,
     657,   657,   657,  3195,  3195,   947,   947,   537,  1300,  1301,
     538,  1075,  2527,  2527,  2527,  1240,   667,  4142,  1304,  2334,
    1304,  2528,  2528,  2528,  2876,  1097,  4143,  2735,  3241,  1098,
   -2437,   667,  2572,  1019,  1304,   148,  1101,  3414,  1099,  3415,
    1300,  1301,  2636,  3195,  1109,  2640,  2629,  3889,  1024,  1300,
    1301,  1580,  1111,  4068,   657,  1502,  2363,  1337,  1304,  1302,
    1055,  2877,  1303,  1112,  1020,  4213,  1440,  1302,  4214,   667,
    1303,  1302,  1113,  1463,  1303,  1114,  2381,  1681, -1826,   152,
     153,  1300,  1301,  1581,   907,  1899,  1020,  1300,  1301,  3569,
    1304,  1302,  1300,  1301,  1303,  1304,  1140,  1304,  1302,  1304,
    1121,  1303,  1302,  3748,  1146,  1303,  2681,  1302,  2382,   537,
    1303,  3753,   538,  2390,  1149,  2404,  3141,  2405,  1300,  1301,
     149,  2963,  1302,  1159,  4800,  1303,  1180,  1302, -1826,  2690,
    1303,  3576,  3776,  3777,  2341,  1163,  1582,  2675,   657,  2678,
    3571,  1583,   947,  1941,  3867,  3498,  3498,  3498,  3498,  3512,
    1302,  1167,  2682,  1303,  1774,  3791,  1337,  1300,  1301,   589,
    2630,  1300,  1301,  1774,  4144,  1300,  1301,  2708,   532,  1302,
    1187,   532,  1303,  1340,  1302,  1188,  4832,  1303,  2732,  4834,
   -2437,  1251,  3880,  3881,  1300,  1301,  1300,  1301,  1189,  3799,
    1302,  1300,  1301,  1303,  2709,  2736,  1300,  1301,  1612,  3379,
   -2437, -1940,  1191,  1270,  1617,  1618,  2737,  1300,  1301,  3882,
     624,  4850,  2819,  2738,  1533,  1875,  1283,  1284,  1775,  2722,
    1192,   657,  1302,   657,  3313,  1303,  1533,  1775,  2729,  2730,
    4627,  1304, -1940,  2951,  2368,  2369,  1193,  1302,   746,  1304,
    1303,  1302,  1196,  1302,  1303,  2585,  1303,  1776,  1302,  2409,
    1197,  1303,  1302,  4628,  1198,  1303,  1776,  2413,  1199,  2585,
    1302,   625,  1200,  1303,  1875,  1201,  3638,  2586, -1826,  1028,
    1009,   947,  3156,  1202,  1302,  3212,   947,  1303,  1203,  3647,
    2225,   134,  1302,   996,   997,  1303,   999,  1978,  1001,  3930,
    1979,  1204,  2879,  1980,  1584,  2882,  1307,  1205,  1900,  2631,
    1389,  1341,   751,  1092,  1093,  1002,  1094, -1144,  1095,  1206,
   -1144,  1207,  2739,  1304,  1901,   667,  2632,  1777, -1826,  2976,
    1208,  1304,  1209,  3944,  2884,  1304,  1777,   667,  2633,  1302,
    1970,  2414,  1303,  1308,  3948,  1300,  1301,  3950,   626,  2418,
    2387,  1337,  1087,  2421,  1302,  1304,  1055,  1303,   896, -1940,
    2999,  1302,  1304,  1440,  1303,  1213,  1304,  1981,  1981,  1981,
    1215,  1304,  1345,  2424,  1302,  4591,  3158,  1303,  1216,  1585,
    2436,  1217,  2587,  2588,  2455,  1220,  1304,  1302,  2631,  3356,
    1303,  1304,  4737,  1390,   135,  1309,  2587,  2588,  1391,  2395,
    1337,  3238,  4736,  1357,  3380,  2632,  1778,  1310,  3934,  3386,
    1221,   765,   136, -1940,  1304,  1778,  3202,  3101,  2740,  1302,
    2634,  1222,  1303,  1124,  1124,  1124,  3521,  2322,  1302,  1223,
     667,  1303,  3389,  1304,  2065,  2065,  2065,  1224,  1304,  3447,
    2589,  1225,  1392,  1586,  2890,  2280,  2397,  1337,  2398,  1832,
    3535,  3396,  1226, -2794,  1304,  2995,  3400,  1227,  1393,   667,
    1302,   667,   667,  1303,  1228,  2474,  1302,  2322,  2281,  1303,
    1229,  1302,  3401,  4515,  1303,  2410,  1337,  4522,  1386,  3082,
    1230,   947,  1233,   137,  1234,   667,  1304,  1235,   667,  1388,
     781,   947,   947,   947,   947,  1241,  1311,  1302,  1723,  1242,
    1303,  1304,  1243,  3852,  3402,  1304,  1124,  1304,  2411,  1337,
   -1912,  1244,  1304,  3886,  2876,  3318,  1304,  3578,  1395,  3403,
    3323,  3358,  1397,  3405,  1304,  3408,  3890,  3043,  3331,  3332,
    3413,  2412,  1337,  1398,  3339,  2635,  1302,  1245,  1304,  1303,
    1302,  2087,  3416,  1303,  1302,  1406,  1304,  1303,  3212,  2416,
    1337,  1875,  1246,  3069,  1247,  4264,  3608,  3072,  1248,  3518,
    3615,  2594,  1587,  1302,  3418,  1302,  1303,   138,  1303,  2986,
    1302,   667,   667,  1303,  3353,  1302,   993,  1249,  1303,  1252,
     667,  1253,  2657,  1533,  2965,  1337,  1302,  2242,  2088,  1303,
    2088,  2088,  2894,  1304,  1254,  1317,  3010,  3011,  3205,  3206,
     627,  1588,  3637,  2296,  2297,  3239,  3458,  2636,  1304,  3375,
    2369,  3118,  1774,  3120,  3102,  1304,  3459,   667,  2895,  2310,
    1724,  3240,   628,  1779,  1725,  2595,  3420,  2242,  1304,  1255,
    3460,  1256,  1779,  3422,  1257,  1726,  3378,  1337,  1020,  1258,
    4065,  1304,  3461,  3462,  3463,  1875,  3423,  3117,  4515,  4286,
    3406,  1337,  1259,  3661,  2596,  4522,  1409,    78,   629,  3424,
    1876,  3464,  3524,  3525,  3238,  4497,  4498,  3528,  3529,  1260,
    3161,  3174,  3175,  1304,  2896,   532,  1775,  2897,  1028,  1009,
     657,   657,  1304,   667,   667,  2898,  2636,  1261,  1316,  3811,
    1337,  3796,  1407,  4757,  -679,  3832,  3833,  1262,   139,  1317,
    4826,  3166,  3501,  3502,  2899,  3189,  2323,   810,  2280,  3212,
     994,  3641,  1940,  1263,  1304,   291,  1264,   293,   630,  1265,
    1304,  3213,  3847,  3848,  2597,  1304,  4590,  3544,  4032,  4033,
    -679,  2281,  3797,  1266,  3198,  3199,  3200,  3201,  3798,  3203,
    3204, -1616,  1408,  4063,  1267,  3212,  2323,  1268,  2312,  2313,
    1269,  1304,  1940,  1273,  4287,  4288,  1274,  3213,  1277,  4289,
    4290,  4291,  3274,  3151,  1278,  2296,  2297,  1727,   947,  4067,
    1317,   140,  4240,  4034,  4035,  3190,  1415,  3289,  4036,  4037,
    1281,  2310,  2324,  1312,  1313,  1314,  1285,   995,  1286,  3303,
    1304,  1320,  1287,  3312,  1304,  1417,  4366,  1288,  1304,  1289,
   -1616,  1317,  1290,  2598,  1339, -2794,  1419,  2900,  4073,  4501,
    1423,  4900,  4075,  1446,  1795,  1441,  4076,  1304,  1456,  1304,
    1474,  2486,  2324,  4055,  1304,  -679,  1444,  2594,  1476,  1304,
    3664,   640, -1616,  1492, -1616,  4077,   141,  4078,  3319,  3320,
    1304,  3322,  4351,  3324,  3325,  3326,  3327,  3328,  3329,  3330,
    1494, -1616,  3333,  3784,  3191,  3338, -1616,  1495,  4447,  3341,
    1497,  -679,  1496,  1317,  1500,  1728,  -687,   640,  1504,  2280,
    4043,  4052,  1505, -1616,  4393,  1865,  1866,  1124,  1509,  3478,
   -1616,  3465,  4515,  4522,  3240,  1055,  1514, -1616,  2065,  4069,
    1337,  2595,  2281,  4083,  1337,  1320,  1523, -1616,  1546,  3466,
    1550, -2794,  1551,  2594,  3626,  2280,  3628,  1318,  3812, -1616,
    2312,  2313,  2901,  3639, -1616,  4084,  4085,  1799,  1555,  4394,
    2596,  4102,  4103, -1616,  1574,  1055,  1575,  3652,  2281,  4395,
    1319,  4236,  4237,  1576,  3663,  3665,  1019,  2325,  4339,  4340,
    1577,  1774,  4343,  4340,  1322,  1323,  2620,  3682,  3684,  3686,
     595,  1024,  1596,  3687,  3665,  1600,  3922,  4427,  4428,  3925,
    3926,  4496,  3529,  4509,  4340,  1601,  1320,  2595,  1941,  2417,
    4540,  4541,  1615,  1385,  1606,  2518,  1616,  2325,  4396,  1623,
     667,  4548,  4549,  3490,  1414,   667,   667,   667,  4550,  4549,
    2597, -1616,   657,  3735,  3738,  3741,  2596,  1320,  1624,  3496,
    4593,  4594,  1626,  2863,  1631,  1775,  4649,  3848,  1941,  4681,
    4682,  1638,  3467, -1616,  4366,  3043,   667,   152,   153,  1674,
    2599,  1800,  1876, -1616,  4199,  1803,  1680,  4202,  4203,  3214,
    3468,  1682,  1804,  1684,  3189,  4204,  4209,  1240,  1687,  4210,
    1688,   667,   667,   667,  4215,  -679,  1692,   667,  1322,  1323,
    4711,  3529,  1695,  4397,  2088, -1616,  3045,  2902,  4220,  1320,
    1696,  4384,  4224,  1704,  4227,  1705,  2597,  4685,  1706,  2598,
    1732,  3192,  4712,  3529,  4729,  3206,  4384,  1715,   291,  3559,
     293,  -679,  4471,   996,   997,   998,   999,  1000,  1001,  1733,
    4472,  1743,  3469,  1741,  1321,  1325,  1326,  1327,  1328,  1329,
    1330,  1331,  1332,  1335,  3190,  1002, -1616,  2999,  3759,  3470,
    -856,  4746,  4340,  1805,  3806,  3558,  2530,  4473,  2531,  1322,
    1323,  4270,  4527,  1747,   667,  3826,  3827,  2903,  3589,   532,
   -1616,  3592,  1773,  3814,  4748,  4340,  1754,   657,  4749,  4340,
     657,  3289,  1784,   642,  1820,  2598,  4781,  4782,  4797,  4340,
    1322,  1323,  4798,  4340,  1440,  3586,  2904,  4801,  4340,  4804,
    3848,  1875,  4815,  4816,  3760, -1912,  1324,  3761,  1831,  4589,
    1832,  1807,  4833,  4340,   719,  3762,  1856,  3289, -1616,   642,
    4847,  3731,  1833,  3191,  1873,  3624,  3622,  3289,  1884,  2594,
    1893,  3634,  3681,  3633,  3763,  1909,  2609,  2610,  2611,  1325,
    1326,  1327,  1328,  1329,  1330,  1331,  1332,  1915,   667,  3633,
     152,   153,  1322,  1323,  3654,  3658,  4398,  4889,  4890,  1876,
    3670,  3669,  1935,  4399,  4100,  4101,  -679,  3671,  3672,   657,
    1936,  3635,  3636, -1616,  4449,  4104,  1944,  1949,  4592,  3764,
    4474,  3633,  1952,  1953, -1616, -1616,  1954,  1955,  3289,  3695,
     872,  1956,  1957,  2595,  3708,  1959,  1960,  4360,  1972,  3668,
    1973,  4168,  -679,  4400,   746, -1616,  2594, -1616,  1974,  3683,
    4387,  3633,  1327,  1328,  1329,  1330,  1331,  1332,  1975,  4391,
    2009,  1410,  2596,  2005,  2014,  2017,  2599,   947,  4413,  2019,
    3707,  2036,  2022,  4415, -1616, -1616,  2023,  3765, -1616, -1616,
    2044,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1440,
    3742,  2045,  2594,  1808,  3745,  3685,  2046,  2047, -2488,  4475,
    2053,   750,  2056,  2061,  2060,  2062,  2102,  2063,   751,  1810,
    2595,  2104,  2105,   639,  2106,  1525,  4401,  2115,  4476,  2532,
     873,  2110,  2138,  4609,  4610,  2146,  4612,  2147,  1317,  2174,
    2175,  2151,  2597,  2533,  2176,  2177,  2181,   756,   757,  2596,
    2179,  4477,  2599,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
    1332,  2180,   875,  2197,  2202,  2207,  2595,  4702,  2211,  2216,
    2227,  2249,  1409,  2270,  2269,  2284,  1875,  2287,   876,  2285,
    3673,  2288,  3674,  2229,  4589,  4564,  2320,  2336,  1533,  3766,
    3192,  2338,  3767,  2344,  2377,  2596,  2350,  2230,  3810,  4662,
    1990,  2352,  2353,  2354,  1991,  2534,  3118,  2535,  2376,  4385,
    4386,   640,  2378,  2383,  2384,  2385,  1992,   765,  2388,  2597,
    2394,  2598,  4389,  2403,  4259,  2399,  3675,  2460,  4758,  4392,
    2407,  1317,  2425,  2426,  4402,  2431,  2463,  2434,  2446,   880,
    4417,  4418,  3117,  2435,  2467,  2447,  2448,  1332, -1295,  -886,
    3676,  2473,  2483,  2505, -1441,  1218,  2495, -1616,  3043,  2498,
    2504,  4708,  1271,  4709,  4710,  2597,  4572,   881,  1275,  3768,
    2521, -2133,  4579,   882,  2522,  2552,   947,  1720,  2563,  3069,
    3859,   776,  2558,  3861,  2566,   667,  3677,  2569,  2593,   667,
    1533,  4553,  4641,  2601,  2606,   780,   781,  2607,  2598,  2536,
    2608,  2624,  2613,  4597,  4598,  2625,  2639,  4601,  4602,  4603,
    4604,  1502,  2643,   883,  2995,  4393, -1616,  2645,  2649,  2659,
    2651,  1020,  1020,  4820,  2653,  2660,  2661,  2680,  1876,  2666,
    1055,  2664,  2665,  3899,  1320,  2676,  2667,  3397,  3910,  2668,
    2684,  2693,  2694,  4635,  2598,  2696,  4478,   657,  2698,   947,
   -1616,  2699,  2524,  2716,  2537,  2717,  2721,  2723,  2728,  3917,
    4394,  1317,  3891,  2724,  4687,  1875,  2231, -1616,  2725,  3924,
    4395,  2726, -1616,  4885,  2727,  2630,  1875,  3927,  3633,  2820,
    1875,  3289,  2824,  2825,  4893,  1875,  2829,  2831,  4885,  2857,
    2834,   667,  4820,  4893,  2865,  3633, -1616,  3289,  3289,  2835,
    4661,  2858,  4663, -1616,  2836,  2837,  2630,  3769,  2838,  2839,
    2840,  3289,  3633, -1616,  2841,  2842,  2843,  2844,  2845,  4396,
    2846,  2847,  2848,  3633,  2849, -1616,  3633,  1320,  3936,  2850,
   -1616,  4698,  4699,  2880,  2893,  2917,  3770,  3942,  2599, -1616,
    4707,  2851,  2232,  2852,  3954,  2853,  1993,  2854,  2855,  2856,
    3953,  2884,  2888,   657,  2918,  4482,  2491,  2916,  4008,  3017,
    2974,  3021,  3022,  4009,  2929,   548,   886,  2233,  2930,  2942,
     532,  2964,  2973,  2982,  1994,  2992,  2991,  3019,  4024,   641,
    3023,  3003,  1995,  3032,  3009,  3312,  3008,  1322,  1323,  3678,
     802,  3020,  2229,  3028,  4361,  3033,  4017,  4362,  3046,  3034,
    -143,  3735,  3050,  3738,   947,  3741,  2230, -1616,   808,  3047,
    1300,  1301,   889,   810,  2631,  2599,   811,  4870,  2031,   291,
    3051,   293,  3052,   642,   549,   890,  1996,  3059,  3074, -1616,
    2234,  2632,  3073,  3679,  3077,  3078,  3079,  3090,  3083, -1616,
    3084,  3099,  3097,  2633,  3098,  2631,  3111,  3112,  3114,  4277,
   -2726,  -856,  3123,  3814,   550,  4567,  3124,  1320,  2123,  4154,
    2124,  2599,  2632,  3146,  3133,  3159,  4793, -1750,  3160,  3162,
     557, -1616,  3167,  3173,  2633,  4363,  4364,  1997,  3185,  3186,
    1322,  1323,  3212,  2538,  2539,  2540,  3233,  3224,  3229,  3230,
    3234,   551,  3236,  3237,  3243,  4108,  3245,  3246,  3247,  1478,
    4113,  3254,  3255,  3260,  3261,  1876,   643,   893,  3294,  1479,
    3266,  3267,  3306,  4089,   644,  3277,  1791,  1792,  1793,  1794,
    1795,  3346, -1616,  1480,  3307,  2634,  2235,  3315,  3316,   894,
    3350,   895,  3317,  2345,  4482,  1481,  1482,  1483,   552,  1326,
    1327,  1328,  1329,  1330,  1331,  1332, -1616,  4127,  3370,  3372,
    3359,   152,   153,  3364,  1484,  3373,  2634,  4398,  3374,  3381,
     667,  3425,  4158,  4158,  4399,  3382,  3455,  3289,  4896,  3440,
     719,   947,  3435,  3457,  3436,  2231,  4170,   947,  3446,  3289,
    3289,  3444,  3451,  3454,  3480,  3289,  3479,  3633,  4862,  3487,
    4141,  3289,  3485,  3492, -1616,  3503,  1448,  3507,  3504,  1876,
    3514,  3513,  1533,  3633,  4400,   657,  3520,  3523,  3526,  3531,
    1322,  1323,  3545,  4877,  3549,   988,  3561,  3562,  3565,  3572,
    1796,  1797,  1798,  1799,  3573,  3574,  3163,  3585,  4297,  3577,
    3588,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  2786,
    2635,  3619,  3640,  3642,  3704,  2756,  3709,  2757,  3716, -1616,
    3723,  2232,  3724,  4360,  3728,  4453,  4454,  4455,  3779,  3730,
     746, -1616,  3731,  3775,   -69,  3756,  3780,  3787,  3788,   553,
    3800,  2635,  2452,   152,   153,  4246,  2233,  4401,  3430,  -826,
    -826, -1616,  2759, -1616,  3817,  3818,  3819,  3820,  3835,  3837,
    -826,  3841,  2088,  3843,  3849,  2585,  3871,  1410,  3851,  3872,
    2762,  3900,  3905,   667,  3906,  3908,  3909,  3918,  2763,  4242,
   -1616, -1616,  2636,  3911, -1616, -1616,  3913,   750,  3912,  3919,
    3920,   554,  3933,  3945,   751,  3941,  3952,  1800,  3951,  1801,
    1802,  1803,  4011,  4012,  4015,  2765,  4018,  4019,  1804,  2234,
    4022,  4023,   555,  2636,  4027,  4028,  4038,  3535,  4029,  1674,
    4031,  4041,  2766,   756,   757,  4042,  4043,  4044,  4053,  4056,
    4058,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  4070,
    4060,  4439,  4071,  4061,  1485,  4062,  4066,  4072,  4080,  1302,
    4081,  4086,  1303,  2771,  3072,  4402,  4088,  4098,  4107,  4325,
    4109,  4103,  1486,  3899,  4118,  4120,  3560, -1528,  4138, -1533,
    4130,  4135,  3899,  4139,  4153,  4155,  4164,   556,  4160,  4158,
    4176,  4177,   557,  4171,  4178,  4185,  4193,  4200,  4201,  1805,
    4216,  3292,  3289,   765,  4241,  4243,  4252,  4235,  4228,  4269,
    4368,   558,  4052,  4274,  4275,  2235,  4280,  4276,  4369,   657,
    4295,  4281,  4282,  4283,  4296,  4309,   987,  4374,  4299,   291,
    4300,   293,  4313,  4315,  4505,  4332,   559,  4333,  2775,  4335,
    4337,  4372,  4342,  4411,  4225,  2776,  4375,  4388,  4440,  4441,
    4442,   947,   560,  4444,  4448,  4482,  1806,  1807,  4445,  4450,
    2777,  4409,  4452,  4461,  4464,  4483,  4484,   776,  4485,  4419,
    4486,  4420,  4502,  4493,  4519,  4539,  4495,  4508,  4532,  4534,
    4556,   780,   781,  4535,  4437,  4545,  4557,  4558,  4436,  4559,
    4560,  4562,  4563,  4565,  4568,  4570,  4580,  4581,  4605,  4599,
    4600,  4596,  4608,  1487,  2756,  4611,  2757,  4613,  4614,  4618,
    4621,  4650,  4636,  4666,  4673,  4667,  4651,  2779,  4704,  4643,
    4647,  4462,  4674,  4654,  4657,  4664,  4668,  2657,  4679,  4686,
     657,  4689,  4692,  4468,  2778,  2753,  2780, -1699,  -826,  -826,
    4762,  2759,   851,  4763,  4745,  4764,  3691,  4784,  4771,  -826,
    4785,  4786,  2753,  4787,  2754,  4792,  4794,  4789,  4795,  2762,
    4805,  4790,  4808,  4809,  4810,  1488,  4811,  2763,  2756,  4835,
    2757,  4812,  3699,   947,  4158,  4813,  4836,   945,  4843,  4840,
    4846,  4858,  1489,  4734,  4861,  4863,  4865,   945,  4867,  4869,
    4871,  2784,  4874,  2785,  2765,  4875,  4886,  3121,   947,  1808,
    2758,  2787,  4895,  1442,  1065,  2759,  4262,  3002,  1674,  3340,
    4260,  2766,  1595,  1304,  1809,  1810,  4626,  4261,   851,  3604,
    4336,  1658,  4728,  2762,  4625,  4830,  4828,  4504,   667,  1686,
    4683,  2763,  4254,   610,  1067,  2514,  2603,  3472,  4105,  1166,
    2833,  2764,  2771,  1734,  4409,  3497,  3037,  2263,  2494,  4646,
    3039,  3038,  4524,  3281,  3947,  2803,  3506,  4111,  2765,  3511,
    3842,  2034,  4573,  4577,  4691,  4552,  4463,  4770,  4114,  4860,
    4823,  4845,  1674,  2793,  2703,  2766,   802,  4607,  4345,  3279,
    4361,  3694,  4163,  4362,  2767,  3701,  4760,  4866,  3286,   851,
    3772,  4000,  3692,  4208,   808,  1876,  4547,  4234,  4561,   810,
    2770,  4769,   811,  4551,  4266,  3183,  2771,  3427,   291,  3803,
     293,  3805,  3801,   851,  4831,   648,   649,  2775,   851,  4802,
    4718,  4803,  4353,  4645,  2776,  4733,  4640,  3072,  4518,  3072,
    4390,  2794,  2795,  2796,  3283,  3693,  2773,  4703,  2797,  2777,
    1620,  1694,  2198,  4371,  3150,  3055,  2823,  4766,  2321,  4180,
    3489,  2575,  2276,  3176,  2798,  3029,   851,  2799,  3836,  3080,
    1637,  4363,  4364,  1510,  2972,  4566,  4158,   950,  4158,  4158,
    2646,  3813,   291,   851,   293,  4658,  2800,  1518,  2909,  4759,
    4634,  2775,  3453,  2907,  1830,  3103,  3868,  3106,  2776,  4824,
    3442,  4620,  4499,  4030,  2802,  4825,  2779,  4082,  4672,  1772,
    2989,  4188,  3807,  2777,  2204,  3539,  4328,  2205,  3688,  4584,
    4827,  3537,  4437,  4326,  4327,  2780,  4436,   851,   851,   851,
     851,  2878,   650,  2051,  2007,  3027,  4116,  2778,  4468,   851,
    3855,  3062,  3854,  3893,  4671,  4767,  1081,  2343,   667,  1186,
    2999,  1061,  3147,   655,  1670,  2686,  1064,  2687,  2508,  4727,
    2163,  4192,  4279,  2059,  3840,  4859,  3602,  4487,   657,  4868,
    2779,  4897,  1280,  4615,  1377,  4894,  2108,  4696,  4697,  4555,
    2784,  3858,  2785,  3132,  1022,  4741,  2466,  1023,  3888,  2780,
    2787,  3130,  2671,  2781,  4158,  4158,  3129,  2557,  4158,  4718,
    2069,   983,  2291,  4829,  1493,  4451,  2209,  3075,  3018,  4460,
    1998,  3473,   985,  3712,  1661,   851,  1499,  2212,  1106,  1107,
    1108,  4740,  1662,  4822,     0,     0,  4577,     0,  1663,     0,
    1876,   945,   945,     0,     0,   945,     0,  2783,     0,     0,
       0,     0,     0,     0,  2784,     0,  2785,     0,     0,     0,
       0,   667,     0,     0,  2787,   851,     0,     0,     0,     0,
       0,     0,  2793,     0,     0,     0,     0,   945,  1359,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4778,  4779,
       0,     0,     0,     0,     0,     0,     0,     0,  2292,  4158,
    2293,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2790,     0,     0,     0,     0,  4898,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2794,  2795,  2796,     0,   667,  4888,  2793,  2797,     0,     0,
    3312,  3312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2798,     0,     0,  2799,     0,  2294,     0,
    2295,  2296,  2297,  2298,  2299,     0,  2300,  2301,  2302,  2303,
    2304,  2305,  2306,  2307,  2308,  2800,  2309,  2310,  2311,     0,
       0,  1360,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2802,  2794,  2795,  2796,     0,     0,     0,
       0,  2797,     0,     0,     0,     0,     0,  1361,     0,     0,
    1362,     0,     0,     0,     0,     0,     0,  2798,     0,     0,
    2799,     0,     0,     0,     0,     0,     0,     0,     0,  1876,
       0,     0,     0,     0,     0,     0,   667,     0,     0,  2800,
    1876,     0,     0,  4864,  1876,     0,     0,  1363,     0,  1876,
       0,     0,     0,  3177,     0,     0,     0,  2802,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1364,     0,     0,
       0,     0,     0,   291,   851,   293,     0,   851,   945,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1791,  1792,  1793,  1794,  1795,     0,     0,     0,
       0,     0,   851,   851,     0,     0,  2312,  2313,     0,     0,
       0,   851,   851,   851,   851,   851,   851,   851,   851,   851,
     851,   851,   851,     0,     0,     0,     0,     0,     0,     0,
    1365,   851,   851,     0,   851,   851,     0,     0,     0,   851,
     851,     0,     0,   851,   851,   851,   851,     0,   851,   851,
     851,     0,     0,     0,  1366,     0,     0,   851,   851,     0,
     851,   851,   851,   851,   851,     0,     0,   851,   851,   851,
     851,   851,   851,   851,   851,   851,   851,   851,     0,   851,
       0,     0,   851,   851,     0,     0,     0,   851,     0,     0,
       0,   851,   851,   851,     0,     0,  1796,  1797,  1798,  1799,
       0,  2752,     0,   851,   851,   851,     0,  2753,     0,  2754,
       0,  2755,   851,     0,     0,     0,     0,     0,     0,   851,
     851,   851,   851,  2756,     0,  2757,     0,     0,     0,     0,
     851,   851,   851,     0,   851,   851,   851,   851,   851,     0,
     851,   851,   851,   851,   851,   851,   851,   851,     0,     0,
       0,   851,   851,     0,     0,  2758,     0,     0,     0,  1367,
    2759,  2760,     0,     0,     0,     0,  2761,     0,  1368,     0,
       0,     0,     0,     0,     0,     0,     0,  1359,  2762,     0,
       0,     0,     0,  1369,     0,     0,  2763,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2764,     0,     0,     0,
       0,  1370,     0,  1800,     0,  1801,  1802,  1803,     0,     0,
       0,     0,     0,  2765,  1804,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1674,     0,     0,
    2766,     0,     0,     0,     0,     0,     0,   851,     0,  2767,
    2768,     0,     0,     0,     0,  1371,     0,  2769,  1372,     0,
       0,     0,     0,   851,     0,  2770,     0,     0,     0,  -965,
       0,  2771,     0,     0,     0,     0,     0,     0,     0,     0,
    1083,  2772,     0,     0,     0,     0,     0,     0,  1373,     0,
    1360,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2773,     0,     0,     0,  1805,     0,   537,     0,     0,
     538,     0,     0,     0,     0,     0,  1361,     0,     0,  1362,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   291,     0,   293,
       0,     0,   851,     0,  2774,     0,  2775,     0,     0,     0,
       0,  1165,     0,  2776,     0,     0,  1363,   851,     0,  3955,
    3956,     0,  1806,  1807,     0,  3957,     0,  3958,  2777,  3959,
    3960,     0,     0,     0,   851,     0,  1364,     0,     0,     0,
    1194,     0,   291,     0,   293,     0,  3759,     0,     0,     0,
       0,     0,  2778,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1232,     0,
       0,     0,     0,     0,     0,  2779,     0,     0,     0,     0,
       0,   851,     0,     0,     0,  1250,     0,     0,     0,  1365,
       0,     0,  3961,     0,  2780,  3962,     0,     0,  2781,     0,
       0,     0,     0,  3963,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1366,     0,     0,     0,     0,     0,     0,
       0,     0,  3964,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1294,     0,     0,     0,     0,  2782,     0,     0,
    3965,     0,  2783,     0,     0,     0,     0,     0,     0,  2784,
       0,  2785,     0,     0,     0,  1808,  2786,     0,     0,  2787,
       0,     0,     0,     0,     0,  3966,     0,  3967,     0,     0,
    1809,  1810,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3968,  3969,     0,     0,     0,     0,     0,     0,   945,
    2788,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2789,  2790,  2791,  2792,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1416,  1367,     0,
       0,     0,     0,     0,     0,  3970,     0,  1368,     0,   851,
       0,  2793,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1369,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3971,     0,     0,  1447,     0,     0,
    1370,     0,     0,  3972,  3973,     0,  3974,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2794,
    2795,  2796,     0,     0,     0,     0,  2797,     0,     0,     0,
    3975,  3976,  3977,     0,  1371,     0,     0,  1372,     0,     0,
       0,     0,  2798,     0,     0,  2799,     0,     0,     0,  3978,
    3979,  3980,     0,     0,     0,     0,     0,  3981,     0,     0,
    3982,     0,     0,     0,  2800,     0,     0,  1373,     0,  2801,
       0,     0,     0,   851,   851,   851,  3983,  3984,     0,     0,
       0,     0,  2802,     0,     0,     0,     0,     0,   851,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3985,  3986,   851,     0,     0,     0,     0,     0,
     851,     0,     0,   851,     0,   851,     0,     0,     0,     0,
       0,   851,     0,   851,   851,     0,     0,  3987,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -965,     0,
       0,     0,     0,     0,     0,  2756,     0,  2757,     0,     0,
       0,     0,     0,     0,     0,  1377,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -826,
    -826,     0,  2759,  3988,     0,     0,  1712,  3989,     0,  1713,
    -826,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2762,  3990,     0,     0,     0,     0,     0,     0,  2763,     0,
       0,     0,     0,     0,  1745,  1746,     0,     0,     0,     0,
       0,     0,     0,  1756,  1757,     0,     0,  1760,  1761,  1762,
    1763,  1766,  1767,  1768,  1769,  2765,   851,     0,     0,     0,
       0,     0,     0,  1785,  1786,   851,  1787,  1788,     0,  1674,
       0,  1813,  2766,     0,     0,  1822,  1823,  1824,  1825,  3991,
       0,  1828,  3992,     0,     0,  3993,  3994,  3995,  3996,  1836,
    1837,     0,  1840,  1841,   851,     0,     0,     0,     0,  1845,
    1846,  1847,     0,  2771,  1850,  1851,  1852,  1853,  1854,  1855,
       0,  1857,     0,     0,  1860,  1861,     0,     0,  1025,  1864,
       0,     0,     0,  1867,  1871,  1872,     0,   851,  3997,  3998,
       0,  1026,     0,     0,     0,  1879,  1880,  1881,     0,     0,
       0,     0,   954,  1027,  1889,     0,     0,     0,   851,     0,
       0,  1894,  1895,  1896,     0,  3999,   851,     0,     0,     0,
       0,     0,     0,     0,     0,   851,     0,  1028,  1009,   291,
       0,   293,     0,     0,     0,     0,     0,     0,  2775,  1029,
       0,     0,     0,     0,  1932,  2776,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2777,     0,     0,     0,     0,  1030,     0,  1031,     0,  1032,
       0,     0,     0,     0,     0,   945,     0,     0,     0,     0,
       0,  1033,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    15,    16,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2779,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2011,
   -1912,  1034,     0,     0,     0,  1035,  2780,     0,  1036,  2818,
       0,     0,     0,     0,     0,  2021,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     0,     0,     0,     0,     0,  1037,     0,  1038,
       0,     0,     0,     0,     0,     0,     0,  1039,     0,  1040,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2784,     0,  2785,     0,     0,     0,   291,     0,   293,
       0,  2787,     0,     0,     0,  1041,  1042,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   851,     0,  2107,     0,   851,  1043,     0,     0,
       0,   851,   851,     0,     0,     0,     0,     0,     0,  2117,
     851,     0,   851,     0,   851,   851,   851,   851,     0,  1044,
     851,     0,     0,     0,     0,     0,  2144,     0,     0,     0,
     851,   851,     0,   851,   851,     0,   851,   851,   851,   851,
       0,   851,     0,  2793,   851,     0,     0,     0,  1045,     0,
       0,     0,     0,   851,     0,     0,     0,     0,     0,     0,
     851,     0,   851,     0,   851,   851,     0,   851,   851,     0,
       0,     0,   851,   851,   851,     0,     0,     0,   851,   851,
     851,     0,   851,  2187,   851,     0,   851,     0,   851,     0,
     851,     0,  2756,     0,  2757,   851,     0,     0,     0,     0,
       0,  2794,  2795,  2796,     0,     0,     0,     0,  2797,     0,
       0,     0,   851,     0,     0,     0,  1046,     0,     0,   851,
       0,     0,   851,     0,  2798,     0,     0,  2799,   851,  2759,
       0,   851,     0,     0,     0,   851,     0,     0,     0,     0,
       0,     0,  1047,     0,     0,     0,  2800,  2762,     0,     0,
       0,     0,     0,  1048,  1049,  2763,     0,  1050,  1051,     0,
       0,     0,     0,     0,  2802,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1052,     0,
       0,     0,  2765,     0,     0,     0,     0,     0,     0,   945,
       0,     0,     0,     0,     0,     0,  1674,     0,     0,  2766,
       0,     0,     0,     0,     0,   945,   945,   851,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1053,     0,     0,     0,
    2771,  2355,     0,     0,     0,     0,     0,     0,     0,  1054,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -2532,     0,     0,     0,  1055,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   851,     0,     0,
       0,     0,     0,     0,  1056,     0,   291,     0,   293,     0,
       0,     0,     0,     0,     0,  2775,     0,     0,     0,     0,
       0,     0,  2776,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2777,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   945,     0,     0,  2438,  2440,  2442,     0,     0,
       0,     0, -2532,     0,     0,     0,     0,     0,     0,     0,
    1057,     0,     0,  2818,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3196,     0,     0,     0,
       0,     0,     0,     0,  2779,     0,  2475,     0,  3196,  3196,
       0,     0,     0,     0,     0,  2480,     0,  2481,     0,     0,
       0,     0,     0,  2780,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2818,     0,     0,     0,     0,     0,     0,     0,  2784,     0,
    2785,     0,     0,     0,     0,     0,     0,     0,  2787,     0,
       0,   945,     0,     0,     0,     0,   945,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3196,  3196,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2571,     0,
       0,     0,     0,     0,     0,     0,     0,  2584,     0,     0,
       0,   851,     0,     0,     0,   851,     0,     0,     0,     0,
    2793,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2621,     0,     0,     0,
       0,     0,   851,   851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   851,     0,     0,     0,     0,     0,  2144,
       0,     0,   851,     0,   851,     0,   851,     0,  2794,  2795,
    2796,     0,     0,     0,     0,  2797,     0,     0,     0,     0,
    2670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2798,     0,     0,  2799,     0,   851,  2679,     0,     0,
       0,   851,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2800,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2802,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   945,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   945,   945,   945,   945,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   851,     0,     0,     0,
       0,     0,  2830,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   851,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2887,     0,     0,  2818,  2889,     0,
       0,     0,     0,  2891,  2892,     0,     0,     0,     0,     0,
       0,     0,  1763,     0,  2908,     0,  1763,     0,  2911,  2912,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2919,  2920,     0,  2921,     0,     0,  2923,  2924,
    2925,  2926,     0,  2927,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2931,     0,     0,     0,     0,
       0,     0,  2932,     0,  2933,     0,  2934,  2935,     0,  2936,
       0,     0,     0,     0,  2939,  2940,  2941,     0,     0,     0,
    2943,  2944,  2945,     0,  2946,     0,  2948,     0,  2950,     0,
    2952,     0,  2953,     0,     0,  2818,     0,  2954,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2977,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   945,     0,
    2987,     0,     0,  2990,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3196,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     2,     0,     0,     0,     0,
       0,     0,     0,   851,     0,     0,     0,   851,   851,  1083,
     851,     0,     0,     3,     0,     0,     0,     4,     0,   851,
       0,     0,     0,     0,   851,     0,     0,   851,     0,   851,
     851,     5,     6,     0,     0,     7,     0,     0,     0,     8,
       0,     0,     0,     0,     9,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    11,   851,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,     0,     0,     0,  3110,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     0,     0,     0,     0,     0,    13,     0,     0,
       0,     0,     0,     0,     0,    14,     0,    15,    16,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      17,    18,     0,     0,   851,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    20,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   851,     0,     0,    21,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      22,   851,    23,     0,     0,     0,    24,     0,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,     0,     0,  2818,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,    32,     0,     0,     0,     0,     0,  3314,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   851,   851,
       0,     0,     0,  3355,     0,     0,     0,  3357,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,  3384,  3385,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
      35,     0,     0,     0,     0,  3407,     0,     0,     0,     0,
       0,     0,     0,    36,  3417,     0,  3419,     0,  3421,     0,
       0,     0,     0,     0,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,    39,
       0,    40,     0,    41,    42,     0,     0,    43,    44,     0,
       0,     0,     0,     0,     0,     0,     0,   945,    45,     0,
       0,    46,     0,     0,     0,     0,     0,     0,     0,    47,
       0,     0,     0,     0,     0,    48,     0,   851,     0,     0,
       0,     0,     0,    49,     0,     0,     0,     0,    50,    51,
      52,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     0,     0,     0,     0,     0,   851,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2621,     0,   851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     2,     0,     0,  2621,     0,
       0,     0,     0,    55,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     3,     0,    56,     0,     4,  2144,    57,
       0,     0,    58,     0,     0,     0,     0,    59,     0,     0,
       0,     5,     6,     0,     0,     7,     0,     0,     0,     8,
       0,     0,     0,     0,     9,    10,     0,     0,     0,    60,
       0,     0,     0,     0,     0,     0,     0,    61,     0,     0,
       0,     0,     0,    62,    11,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    63,     0,     0,     0,
       0,     0,     0,    12,     0,     0,   945,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    13,     0,     0,
       0,     0,     0,     0,     0,    14,     0,    15,    16,   851,
       0,     0,     0,   851,     0,     0,     0,     0,     0,     0,
      17,    18,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    20,   851,   945,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    21,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      22,     0,    23,     0,     0,     0,    24,     0,     0,     0,
      25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    26,     0,     0,  2818,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,    28,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    29,  3749,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    30,     0,     0,     0,    31,     0,     0,     0,
       0,     0,     0,    32,     0,  3778,     0,     0,  4410,  3782,
    3783,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3790,     0,     0,     0,     0,  3792,     0,     0,  3793,
       0,  3794,  3795,     0,     0,     0,     0,   851,     0,     0,
       0,     0,     0,     0,   945,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   851,     0,     0,     0,     0,     0,     0,     0,
       0,    33,     0,     0,     0,     0,     0,   851,     0,   851,
       0,     0,  3829,     0,     0,     0,     0,     0,    34,     0,
      35,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,  4517,     0,     0,     0,  4517,     0,
       0,     0,     0,     0,    37,     0,  3829,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    38,     0,     0,    39,
       0,    40,     0,    41,    42,     0,     0,    43,    44,     0,
       0,     0,     0,  3885,     0,     0,     0,     0,    45,     0,
       0,    46,     0,     0,     0,     0,     0,     0,     0,    47,
       0,  4410,     0,  3829,     0,    48,     0,     0,     0,     0,
       0,     0,     0,    49,     0,     0,     0,     0,    50,    51,
      52,   945,     0,     0,     0,     0,     0,   945,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     851,     0,     1,     0,     2,     0,     0,     0,     0,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,    54,
       0,     0,     0,     0,     0,     0,     4,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       5,     6,     0,     0,     0,     0,     0,     0,     8,     0,
       0,     0,     0,     9,    10,     0,     0,     0,     0,     0,
       0,     0,     0,    55,  4517,     0,     0,     0,     0,  4517,
       0,     0,     0,    11,     0,    56,  4517,     0,     0,    57,
       0,     0,    58,     0,     0,     0,     0,    59,     0,     0,
       0,     0,    12,     0,     0,     0,     0,     0,     0,     0,
    4013,  4014,     0,     0,     0,     0,     0,     0,     0,    60,
       0,     0,     0,     0,     0,     0,    13,    61,     0,     0,
       0,     0,     0,    62,    14,   851,    15,    16,     0,     0,
       0,     0,     0,     0,     0,     0,    63,     0,     0,    17,
      18,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    20,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    21,     0,  4517,     0,     0,     0,     0,
       0,  4735,     0,     0,     0,     0,     0,     0,     0,    22,
       0,    23,     0,     0,     0,    24,     0,     0,     0,    25,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   851,    27,     0,    28,     0,  3829,
       0,     0,   851,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    29,     0,     0,     0,     0,     0,     0,
       0,     0,  4129,     0,     0,     0,     0,     0,     0,  2621,
       0,    30,     0,   851,     0,    31,     0,     0,     0,     0,
       0,   945,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4517,     0,  4517,  4517,  4167,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   851,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4517,     0,     0,  4517,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    34,  4517,    35,
       0,     0,     0,     0,     0,     0,     0,     0,   851,     0,
       0,     0,    36,   945,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   945,     0,
       0,     0,     0,     0,     0,    38,     0,     0,    39,     0,
      40,     0,     0,    42,     0,     0,    43,    44,     0,     0,
       0,  2621,     0,   851,     0,  4273,     0,    45,     0,     0,
      46,     0,     0,     0,     0,     0,     0,     0,    47,     0,
       0,     0,     0,     0,    48,     0,     0,     0,     0,     0,
       0,     0,    49,     0,     0,     0,     0,    50,    51,    52,
    3829,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,    54,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    55,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    56,     0,     0,     0,    57,     0,
       0,    58,     0,     0,     0,     0,    59,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    61,     0,     0,     0,
       0,     0,    62,     0,     0,     0,     0,     0,     0,  4438,
       0,     0,     0,     0,     0,    63,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4492,
       0,  4494,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2621,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4678,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4765,     0,     0,     0,
       0,     0,     0,     0,  3829,   159,     0,   160,   715,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   716,     0,   169,   170,   171,   172,   173,   174,
     175,   717,   177,     0,   178,  4788,     0,   718,   179,   719,
     720,   721,   180,   722,     0,   181,   182,   183,  1868,   184,
       0,   185,   186,     0,     0,   187,   723,   724,   188,   189,
       0,   190,   725,   726,   192,   193,     0,   194,   195,   196,
     197,   727,   199,     0,   728,   201,   729,   730,   731,   732,
     733,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   734,   221,     0,
     222,   735,   736,   223,     0,     0,   224,   737,   225,   738,
     739,   226,     0,   227,   740,   741,     0,   228,   229,   230,
     742,   743,   744,     0,     0,     0,     0,   745,   233,   746,
       0,     0,   747,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,  3829,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
     761,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
    1869,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,  1870,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,  2140,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,  2141,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,  2142,   234,     0,   235,     0,     0,     0,
       0,   236,     0,   237,   238,   239,   240,   241,     0,     0,
       0,     0,   242,     0,     0,   243,   244,   245,     0,     0,
       0,   246,     0,   247,   248,     0,   249,   250,   251,     0,
     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,
     748,     0,   261,   262,   263,   264,   749,   750,   265,   266,
       0,   267,   268,   269,   751,     0,   270,     0,     0,     0,
     752,   272,     0,   273,     0,   274,     0,   275,   276,   753,
     278,   754,   280,   281,     0,   282,     0,   755,   283,   284,
     285,     0,   286,   756,   757,     0,   287,   288,     0,     0,
       0,   758,   290,   291,   292,   293,   759,     0,     0,   294,
     295,   296,     0,     0,   297,     0,     0,     0,   760,   298,
     299,   761,     0,     0,   300,     0,   301,   302,     0,   303,
     304,     0,     0,     0,   305,     0,     0,   306,   307,   762,
       0,     0,   309,     0,   763,   310,   311,     0,     0,     0,
       0,     0,   764,   313,     0,   314,     0,   315,     0,   316,
     317,     0,     0,   765,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   334,   335,   336,   337,   766,   338,
     339,   340,   341,   767,   342,   343,   344,     0,     0,     0,
       0,   345,   346,   347,   348,   768,   350,     0,     0,   769,
     352,   770,   353,     0,   354,   771,   772,   773,   774,   775,
     359,   360,   361,   362,   363,   364,     0,   776,   365,     0,
       0,   366,   367,   368,   369,   777,   778,   779,   370,   371,
       0,   780,   781,   372,     0,   373,   374,   782,  2143,   376,
     377,   378,   379,     0,   380,   381,     0,     0,     0,     0,
       0,     0,     0,     0,   382,   383,   384,     0,   783,   385,
       0,   386,     0,   387,   388,   784,   390,   391,   392,   393,
     785,   786,   396,   787,     0,   397,   398,   399,     0,   400,
       0,   401,   402,   403,   404,   405,     0,   788,   407,   408,
       0,     0,   409,     0,     0,     0,   410,   411,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,   422,   423,   424,   789,   790,   425,     0,   426,
       0,   427,   428,     0,   429,   430,     0,   431,     0,   791,
       0,   792,   433,   434,   435,   436,   437,   438,   793,   794,
     441,   442,   443,   444,     0,   795,   446,     0,     0,     0,
     447,   448,   449,   450,     0,     0,     0,   451,     0,     0,
       0,   452,     0,   453,   454,   455,   456,   457,   458,     0,
     459,   460,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,     0,     0,   468,     0,
       0,     0,   469,   470,   471,     0,     0,     0,   472,   796,
     797,   473,   474,     0,   475,   476,   798,   478,   479,   480,
     799,   800,   481,   482,   483,   484,   801,   485,   486,     0,
       0,   487,   488,   489,   490,     0,   802,   491,   492,     0,
     803,   804,   805,   806,     0,     0,     0,     0,     0,   497,
     498,   499,     0,   807,   808,   809,   501,   502,   503,   810,
     504,   505,   811,   506,   507,     0,   508,   509,     0,     0,
     510,     0,     0,   511,     0,   512,     0,   812,   514,     0,
       0,   813,   814,   815,   816,   515,     0,     0,   516,   817,
       0,   818,   517,   518,   519,   520,   521,   819,   820,     0,
       0,     0,     0,     0,     0,   524,   525,     0,   526,   527,
     528,     0,     0,   821,     0,     0,     0,     0,     0,     0,
       0,   822,   823,     0,     0,     0,     0,   824,   825,     0,
       0,   826,   827,     0,     0,   828,   829,   159,     0,   160,
     715,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   716,     0,   169,   170,   171,   172,
     173,   174,   175,   717,   177,     0,   178,     0,     0,   718,
     179,   719,   720,   721,   180,   722,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,   723,   724,
     188,   189,     0,   190,   725,   726,   192,   193,     0,   194,
     195,   196,   197,   727,   199,     0,   728,   201,   729,   730,
     731,   732,   733,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   734,
     221,     0,   222,   735,   736,   223,     0,     0,   224,   737,
     225,   738,   739,   226,     0,   227,   740,   741,     0,   228,
     229,   230,   742,   743,   744,     0,     0,     0,     0,   745,
     233,   746,     0,     0,   747,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   748,     0,   261,   262,   263,   264,   749,   750,   265,
     266,     0,   267,   268,   269,   751,     0,   270,     0,     0,
       0,   752,   272,  2437,   273,     0,   274,     0,   275,   276,
     753,   278,   754,   280,   281,     0,   282,     0,   755,   283,
     284,   285,     0,   286,   756,   757,     0,   287,   288,     0,
       0,     0,   758,   290,   291,   292,   293,   759,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,   760,
     298,   299,   761,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     762,     0,     0,   309,     0,   763,   310,   311,     0,     0,
       0,     0,     0,   764,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,   765,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,   766,
     338,   339,   340,   341,   767,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   768,   350,     0,     0,
     769,   352,   770,   353,     0,   354,   771,   772,   773,   774,
     775,   359,   360,   361,   362,   363,   364,     0,   776,   365,
       0,     0,   366,   367,   368,   369,   777,   778,   779,   370,
     371,     0,   780,   781,   372,     0,   373,   374,   782,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,   783,
     385,     0,   386,     0,   387,   388,   784,   390,   391,   392,
     393,   785,   786,   396,   787,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   788,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,   789,   790,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     791,     0,   792,   433,   434,   435,   436,   437,   438,   793,
     794,   441,   442,   443,   444,     0,   795,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
     796,   797,   473,   474,     0,   475,   476,   798,   478,   479,
     480,   799,   800,   481,   482,   483,   484,   801,   485,   486,
       0,     0,   487,   488,   489,   490,     0,   802,   491,   492,
       0,   803,   804,   805,   806,     0,     0,     0,     0,     0,
     497,   498,   499,     0,   807,   808,   809,   501,   502,   503,
     810,   504,   505,   811,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   812,   514,
       0,     0,   813,   814,   815,   816,   515,     0,     0,   516,
     817,     0,   818,   517,   518,   519,   520,   521,   819,   820,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,   822,   823,     0,     0,     0,     0,   824,   825,
       0,     0,   826,   827,     0,     0,   828,   829,   159,     0,
     160,   715,   162,   163,   164,   165,     0,     0,   166,     0,
       0,     0,   167,     0,     0,   716,     0,   169,   170,   171,
     172,   173,   174,   175,   717,   177,     0,   178,     0,     0,
     718,   179,   719,   720,   721,   180,   722,     0,   181,   182,
     183,     0,   184,     0,   185,   186,     0,     0,   187,   723,
     724,   188,   189,     0,   190,   725,   726,   192,   193,     0,
     194,   195,   196,   197,   727,   199,     0,   728,   201,   729,
     730,   731,   732,   733,     0,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,   216,     0,   217,   218,   219,
     734,   221,     0,   222,   735,   736,   223,     0,     0,   224,
     737,   225,   738,   739,   226,     0,   227,   740,   741,     0,
     228,   229,   230,   742,   743,   744,     0,     0,     0,     0,
     745,   233,   746,     0,     0,   747,   234,     0,   235,     0,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,   748,     0,   261,   262,   263,   264,   749,   750,
     265,   266,     0,   267,   268,   269,   751,     0,   270,     0,
       0,     0,   752,   272,  2439,   273,     0,   274,     0,   275,
     276,   753,   278,   754,   280,   281,     0,   282,     0,   755,
     283,   284,   285,     0,   286,   756,   757,     0,   287,   288,
       0,     0,     0,   758,   290,   291,   292,   293,   759,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
     760,   298,   299,   761,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   762,     0,     0,   309,     0,   763,   310,   311,     0,
       0,     0,     0,     0,   764,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,   765,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
     766,   338,   339,   340,   341,   767,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   768,   350,     0,
       0,   769,   352,   770,   353,     0,   354,   771,   772,   773,
     774,   775,   359,   360,   361,   362,   363,   364,     0,   776,
     365,     0,     0,   366,   367,   368,   369,   777,   778,   779,
     370,   371,     0,   780,   781,   372,     0,   373,   374,   782,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
     783,   385,     0,   386,     0,   387,   388,   784,   390,   391,
     392,   393,   785,   786,   396,   787,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   788,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,   789,   790,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   791,     0,   792,   433,   434,   435,   436,   437,   438,
     793,   794,   441,   442,   443,   444,     0,   795,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,   796,   797,   473,   474,     0,   475,   476,   798,   478,
     479,   480,   799,   800,   481,   482,   483,   484,   801,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   802,   491,
     492,     0,   803,   804,   805,   806,     0,     0,     0,     0,
       0,   497,   498,   499,     0,   807,   808,   809,   501,   502,
     503,   810,   504,   505,   811,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   812,
     514,     0,     0,   813,   814,   815,   816,   515,     0,     0,
     516,   817,     0,   818,   517,   518,   519,   520,   521,   819,
     820,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   821,     0,     0,     0,     0,
       0,     0,     0,   822,   823,     0,     0,     0,     0,   824,
     825,     0,     0,   826,   827,     0,     0,   828,   829,   159,
       0,   160,   715,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   716,     0,   169,   170,
     171,   172,   173,   174,   175,   717,   177,     0,   178,     0,
       0,   718,   179,   719,   720,   721,   180,   722,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
     723,   724,   188,   189,     0,   190,   725,   726,   192,   193,
       0,   194,   195,   196,   197,   727,   199,     0,   728,   201,
     729,   730,   731,   732,   733,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   734,   221,     0,   222,   735,   736,   223,     0,     0,
     224,   737,   225,   738,   739,   226,     0,   227,   740,   741,
       0,   228,   229,   230,   742,   743,   744,     0,     0,     0,
       0,   745,   233,   746,     0,     0,   747,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   748,     0,   261,   262,   263,   264,   749,
     750,   265,   266,     0,   267,   268,   269,   751,     0,   270,
       0,     0,     0,   752,   272,  2441,   273,     0,   274,     0,
     275,   276,   753,   278,   754,   280,   281,     0,   282,     0,
     755,   283,   284,   285,     0,   286,   756,   757,     0,   287,
     288,     0,     0,     0,   758,   290,   291,   292,   293,   759,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,   760,   298,   299,   761,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   762,     0,     0,   309,     0,   763,   310,   311,
       0,     0,     0,     0,     0,   764,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,   765,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,   766,   338,   339,   340,   341,   767,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   768,   350,
       0,     0,   769,   352,   770,   353,     0,   354,   771,   772,
     773,   774,   775,   359,   360,   361,   362,   363,   364,     0,
     776,   365,     0,     0,   366,   367,   368,   369,   777,   778,
     779,   370,   371,     0,   780,   781,   372,     0,   373,   374,
     782,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,   783,   385,     0,   386,     0,   387,   388,   784,   390,
     391,   392,   393,   785,   786,   396,   787,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     788,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,   789,   790,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   791,     0,   792,   433,   434,   435,   436,   437,
     438,   793,   794,   441,   442,   443,   444,     0,   795,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,   796,   797,   473,   474,     0,   475,   476,   798,
     478,   479,   480,   799,   800,   481,   482,   483,   484,   801,
     485,   486,     0,     0,   487,   488,   489,   490,     0,   802,
     491,   492,     0,   803,   804,   805,   806,     0,     0,     0,
       0,     0,   497,   498,   499,     0,   807,   808,   809,   501,
     502,   503,   810,   504,   505,   811,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     812,   514,     0,     0,   813,   814,   815,   816,   515,     0,
       0,   516,   817,     0,   818,   517,   518,   519,   520,   521,
     819,   820,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,   822,   823,     0,     0,     0,     0,
     824,   825,     0,     0,   826,   827,     0,     0,   828,   829,
     159,     0,   160,   715,   162,   163,   164,   165,     0,     0,
     166,     0,     0,     0,   167,     0,     0,   716,     0,   169,
     170,   171,   172,   173,   174,   175,   717,   177,     0,   178,
       0,     0,   718,   179,   719,   720,   721,   180,   722,     0,
     181,   182,   183,     0,   184,     0,   185,   186,     0,     0,
     187,   723,   724,   188,   189,     0,   190,   725,   726,   192,
     193,     0,   194,   195,   196,   197,   727,   199,     0,   728,
     201,   729,   730,   731,   732,   733,     0,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,   216,     0,   217,
     218,   219,   734,   221,     0,   222,   735,   736,   223,     0,
       0,   224,   737,   225,   738,   739,   226,     0,   227,   740,
     741,     0,   228,   229,   230,   742,   743,   744,     0,     0,
       0,     0,   745,   233,   746,     0,     0,   747,   234,     0,
     235,     0,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,   748,     0,   261,   262,   263,   264,
     749,   750,   265,   266,     0,   267,   268,   269,   751,     0,
     270,     0,     0,     0,   752,   272,     0,   273,     0,   274,
       0,   275,   276,   753,   278,   754,   280,   281,     0,   282,
       0,   755,   283,   284,   285,     0,   286,   756,   757,     0,
     287,   288,     0,     0,     0,   758,   290,   291,   292,   293,
     759,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,   760,   298,   299,   761,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   762,     0,     0,   309,     0,   763,   310,
     311,     0,     0,     0,     0,     0,   764,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,   765,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,   766,   338,   339,   340,   341,   767,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   768,
     350,     0,     0,   769,   352,   770,   353,     0,   354,   771,
     772,   773,   774,   775,   359,   360,   361,   362,   363,   364,
       0,   776,   365,     0,     0,   366,   367,   368,   369,   777,
     778,   779,   370,   371,     0,   780,   781,   372,     0,   373,
     374,   782,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,   783,   385,     0,   386,     0,   387,   388,   784,
     390,   391,   392,   393,   785,   786,   396,   787,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   788,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,   789,
     790,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   791,     0,   792,   433,   434,   435,   436,
     437,   438,   793,   794,   441,   442,   443,   444,     0,   795,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,   796,   797,   473,   474,     0,   475,   476,
     798,   478,   479,   480,   799,   800,   481,   482,   483,   484,
     801,   485,   486,     0,     0,   487,   488,   489,   490,     0,
     802,   491,   492,     0,   803,   804,   805,   806,     0,     0,
       0,     0,     0,   497,   498,   499,     0,   807,   808,   809,
     501,   502,   503,   810,   504,   505,   811,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   812,   514,     0,     0,   813,   814,   815,   816,   515,
       0,     0,   516,   817,     0,   818,   517,   518,   519,   520,
     521,   819,   820,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,   822,   823,     0,     0,     0,
       0,   824,   825,     0,     0,   826,   827,     0,     0,   828,
     829,   159,     0,   160,   715,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   716,     0,
     169,   170,   171,   172,   173,   174,   175,   717,   177,     0,
     178,     0,     0,   718,   179,   719,   720,   721,   180,   722,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,   723,   724,   188,   189,     0,   190,   725,   726,
     192,   193,     0,   194,   195,   196,   197,   727,   199,     0,
     728,   201,   729,   730,   731,   732,   733,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   734,   221,     0,   222,   735,   736,   223,
       0,     0,   224,   737,   225,   738,   739,   226,     0,   227,
     740,   741,     0,   228,   229,   230,   742,   743,   744,     0,
       0,     0,     0,   745,   233,   746,     0,     0,   747,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,   748,     0,   261,   262,   263,
     264,   749,   750,   265,   266,     0,   267,   268,   269,   751,
       0,   270,     0,     0,     0,   752,   272,     0,   273,     0,
     274,     0,   275,   276,   753,   278,   754,   280,   281,     0,
     282,     0,   755,   283,   284,   285,     0,   286,   756,   757,
       0,   287,   288,     0,     0,     0,   758,   290,   291,   292,
     293,   759,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,   760,   298,   299,   761,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   762,     0,     0,   309,     0,   763,
     310,   311,     0,     0,     0,     0,     0,   764,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,   765,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,   766,   338,   339,   340,   341,   767,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     768,   350,     0,     0,   769,   352,   770,   353,     0,   354,
     771,   772,   773,   774,   775,   359,   360,   361,   362,   363,
     364,     0,   776,   365,     0,     0,   366,   367,   368,   369,
     777,   778,   779,   370,   371,     0,   780,   781,   372,     0,
     373,   374,   782,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,   783,   385,     0,   386,     0,   387,   388,
     784,   390,   391,   392,   393,   785,   786,   396,   787,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   788,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
     789,   790,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   791,     0,   792,   433,   434,   435,
     436,   437,   438,   793,   794,   441,   442,   443,   444,     0,
     795,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,   796,   797,   473,   474,     0,   475,
     476,   798,   478,   479,   480,   799,   800,   481,   482,   483,
     484,   801,   485,   486,     0,     0,   487,   488,   489,   490,
       0,   802,   491,   492,     0,   803,   804,   805,   806,     0,
       0,     0,     0,     0,   497,   498,   499,     0,   807,   808,
     809,   501,   502,   503,   810,   504,   505,   811,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   812,   514,     0,     0,   813,   814,   815,   816,
     515,     0,     0,   516,   817,     0,   818,   517,   518,   519,
     520,   521,   819,   820,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   821,     0,
       0,     0,     0,     0,     0,     0,   822,   823,     0,     0,
       0,     0,   824,  1231,     0,     0,   826,   827,     0,     0,
     828,   829,   159,     0,   160,   715,   162,   163,   164,   165,
    1903,     0,   166,     0,     0,     0,  1904,     0,     0,   716,
       0,   169,   170,   171,   172,   173,   174,   175,   717,   177,
       0,   178,     0,     0,   718,   179,   719,   720,   721,   180,
     722,     0,   181,   182,   183,     0,   184,     0,   185,   186,
       0,     0,   187,   723,   724,   188,   189,     0,   190,   725,
     726,   192,   193,     0,   194,   195,   196,   197,   727,   199,
       0,   728,   201,   729,   730,   731,   732,   733,     0,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,   216,
       0,   217,   218,   219,   734,   221,     0,   222,   735,   736,
     223,     0,     0,   224,   737,   225,   738,   739,   226,     0,
     227,   740,   741,     0,   228,   229,   230,   742,   743,   744,
       0,     0,     0,     0,   745,   233,   746,     0,     0,   747,
     234,     0,   235,     0,     0,     0,     0,   236,     0,   237,
     238,   239,   240,   241,     0,     0,     0,     0,   242,     0,
       0,   243,   244,   245,     0,     0,     0,   246,     0,   247,
     248,     0,   249,   250,   251,     0,   252,   253,     0,   254,
     255,   256,   257,   258,   259,   260,   748,     0,   261,   262,
     263,   264,   749,   750,   265,   266,     0,   267,   268,   269,
     751,     0,   270,     0,     0,     0,   752,   272,     0,   273,
       0,   274,     0,   275,   276,   753,   278,   754,   280,   281,
       0,   282,     0,   755,   283,   284,   285,     0,   286,   756,
     757,     0,   287,   288,     0,     0,     0,   758,   290,   291,
     292,   293,   759,     0,     0,   294,   295,   296,     0,     0,
     297,     0,     0,     0,   760,   298,   299,   761,     0,     0,
     300,     0,   301,   302,     0,   303,   304,     0,     0,     0,
     305,     0,     0,   306,   307,   762,     0,     0,   309,     0,
     763,   310,   311,     0,     0,     0,     0,     0,   764,   313,
       0,   314,     0,   315,     0,   316,   317,     0,     0,   765,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     334,   335,   336,   337,   766,   338,   339,   340,   341,   767,
     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,
     348,   768,   350,     0,     0,   769,   352,   770,   353,     0,
     354,   771,   772,   773,   774,   775,   359,   360,   361,   362,
     363,   364,     0,   776,   365,     0,     0,   366,   367,   368,
     369,   777,     0,   779,   370,   371,     0,   780,   781,   372,
       0,   373,   374,   782,     0,   376,   377,   378,   379,     0,
     380,   381,     0,     0,     0,     0,     0,     0,     0,     0,
     382,   383,   384,     0,   783,   385,     0,   386,     0,   387,
     388,   784,   390,   391,   392,   393,   785,   786,   396,   787,
       0,   397,   398,   399,     0,   400,     0,   401,   402,   403,
     404,   405,     0,   788,   407,   408,     0,     0,   409,     0,
       0,     0,   410,   411,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,   422,   423,
     424,   789,   790,   425,     0,   426,     0,   427,   428,     0,
     429,   430,     0,   431,     0,   791,     0,   792,   433,   434,
     435,   436,   437,   438,   793,   794,   441,   442,   443,   444,
       0,   795,   446,     0,     0,     0,   447,   448,   449,   450,
       0,     0,     0,   451,     0,     0,     0,   452,     0,   453,
     454,   455,   456,   457,   458,     0,   459,   460,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,     0,     0,   468,     0,     0,     0,   469,   470,
     471,     0,     0,     0,   472,   796,   797,   473,   474,     0,
     475,   476,   798,   478,   479,   480,   799,   800,   481,   482,
     483,   484,   801,   485,   486,     0,     0,   487,   488,   489,
     490,     0,   802,   491,   492,     0,   803,   804,   805,   806,
       0,     0,     0,     0,     0,   497,   498,   499,     0,   807,
     808,   809,   501,   502,   503,   810,   504,   505,   811,   506,
     507,     0,   508,   509,     0,     0,   510,     0,     0,   511,
       0,   512,     0,   812,   514,     0,     0,   813,   814,   815,
     816,   515,     0,     0,   516,   817,     0,   818,   517,   518,
     519,   520,   521,   819,   820,     0,     0,     0,     0,     0,
       0,   524,   525,     0,   526,   527,   528,     0,     0,   821,
       0,     0,     0,     0,     0,     0,     0,   822,   823,     0,
       0,     0,     0,   824,   825,     0,     0,   826,   827,     0,
       0,   828,   829,   159,     0,   160,   715,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     716,     0,   169,   170,   171,   172,   173,   174,   175,   717,
     177,     0,   178,     0,     0,   718,   179,   719,   720,   721,
     180,   722,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,   723,   724,   188,   189,     0,   190,
     725,   726,   192,   193,     0,   194,   195,   196,   197,   727,
     199,     0,   728,   201,   729,   730,   731,   732,   733,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   734,   221,     0,   222,   735,
     736,   223,     0,     0,   224,   737,   225,   738,   739,   226,
       0,   227,   740,   741,     0,   228,   229,   230,   742,   743,
     744,     0,     0,     0,     0,   745,   233,   746,     0,     0,
     747,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,   748,     0,   261,
     262,   263,   264,   749,   750,   265,   266,     0,   267,   268,
     269,   751,     0,   270,     0,     0,     0,   752,   272,     0,
     273,     0,   274,     0,   275,   276,   753,   278,   754,   280,
     281,     0,   282,     0,   755,   283,   284,   285,     0,   286,
     756,   757,     0,   287,   288,     0,     0,     0,   758,   290,
     291,   292,   293,   759,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,   760,   298,   299,   761,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   762,     0,     0,   309,
       0,   763,   310,   311,     0,     0,     0,     0,     0,   764,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
     765,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,   766,   338,   339,   340,   341,
     767,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   768,   350,     0,     0,   769,   352,   770,   353,
       0,   354,   771,   772,   773,   774,   775,   359,   360,   361,
     362,   363,   364,     0,   776,   365,     0,     0,   366,   367,
     368,   369,   777,   778,   779,   370,   371,     0,   780,   781,
     372,     0,   373,   374,   782,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,   783,   385,     0,   386,     0,
     387,   388,   784,   390,   391,   392,   393,   785,   786,   396,
     787,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   788,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,   789,   790,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   791,     0,   792,   433,
     434,   435,   436,   437,   438,   793,   794,   441,   442,   443,
     444,     0,   795,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,   796,   797,   473,   474,
       0,   475,   476,   798,   478,   479,   480,   799,   800,   481,
     482,   483,   484,   801,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   802,   491,   492,     0,   803,   804,   805,
     806,     0,     0,     0,     0,     0,   497,   498,   499,     0,
     807,   808,   809,   501,   502,   503,   810,   504,   505,   811,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,  2010,   514,     0,     0,   813,   814,
     815,   816,   515,     0,     0,   516,   817,     0,   818,   517,
     518,   519,   520,   521,   819,   820,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,     0,
     821,     0,     0,     0,     0,     0,     0,     0,   822,   823,
       0,     0,     0,     0,   824,   825,     0,     0,   826,   827,
       0,     0,   828,   829,   159,     0,   160,   715,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
       0,   716,     0,   169,   170,   171,   172,   173,   174,   175,
     717,   177,     0,   178,     0,     0,   718,   179,   719,   720,
     721,   180,   722,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,   723,   724,   188,   189,     0,
     190,   725,   726,   192,   193,     0,   194,   195,   196,   197,
     727,   199,     0,   728,   201,   729,   730,   731,   732,   733,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   734,   221,     0,   222,
     735,   736,   223,     0,     0,   224,   737,   225,   738,   739,
     226,     0,   227,   740,   741,     0,   228,   229,   230,   742,
     743,   744,     0,     0,     0,     0,   745,   233,   746,     0,
       0,   747,   234,     0,   235,     0,     0,     0,     0,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     242,     0,     0,   243,   244,   245,     0,     0,     0,   246,
       0,   247,   248,     0,   249,   250,   251,     0,   252,   253,
       0,   254,   255,   256,   257,   258,   259,   260,   748,     0,
     261,   262,   263,   264,   749,   750,   265,   266,     0,   267,
     268,   269,   751,     0,   270,     0,     0,     0,   752,   272,
       0,   273,     0,   274,     0,   275,   276,   753,   278,   754,
     280,   281,     0,   282,     0,   755,   283,   284,   285,     0,
     286,   756,   757,     0,   287,   288,     0,     0,     0,   758,
     290,   291,   292,   293,   759,     0,     0,   294,   295,   296,
       0,     0,   297,     0,     0,     0,   760,   298,   299,  2886,
       0,     0,   300,     0,   301,   302,     0,   303,   304,     0,
       0,     0,   305,     0,     0,   306,   307,   762,     0,     0,
     309,     0,   763,   310,   311,     0,     0,     0,     0,     0,
     764,   313,     0,   314,     0,   315,     0,   316,   317,     0,
       0,   765,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,   334,   335,   336,   337,   766,   338,   339,   340,
     341,   767,   342,   343,   344,     0,     0,     0,     0,   345,
     346,   347,   348,   768,   350,     0,     0,   769,   352,   770,
     353,     0,   354,   771,   772,   773,   774,   775,   359,   360,
     361,   362,   363,   364,     0,   776,   365,     0,     0,   366,
     367,   368,   369,   777,   778,   779,   370,   371,     0,   780,
     781,   372,     0,   373,   374,   782,     0,   376,   377,   378,
     379,     0,   380,   381,     0,     0,     0,     0,     0,     0,
       0,     0,   382,   383,   384,     0,   783,   385,     0,   386,
       0,   387,   388,   784,   390,   391,   392,   393,   785,   786,
     396,   787,     0,   397,   398,   399,     0,   400,     0,   401,
     402,   403,   404,   405,     0,   788,   407,   408,     0,     0,
     409,     0,     0,     0,   410,   411,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
     422,   423,   424,   789,   790,   425,     0,   426,     0,   427,
     428,     0,   429,   430,     0,   431,     0,   791,     0,   792,
     433,   434,   435,   436,   437,   438,   793,   794,   441,   442,
     443,   444,     0,   795,   446,     0,     0,     0,   447,   448,
     449,   450,     0,     0,     0,   451,     0,     0,     0,   452,
       0,   453,   454,   455,   456,   457,   458,     0,   459,   460,
     461,   462,   463,   464,     0,     0,     0,     0,     0,     0,
     465,   466,     0,   467,     0,     0,   468,     0,     0,     0,
     469,   470,   471,     0,     0,     0,   472,   796,   797,   473,
     474,     0,   475,   476,   798,   478,   479,   480,   799,   800,
     481,   482,   483,   484,   801,   485,   486,     0,     0,   487,
     488,   489,   490,     0,   802,   491,   492,     0,   803,   804,
     805,   806,     0,     0,     0,     0,     0,   497,   498,   499,
       0,   807,   808,   809,   501,   502,   503,   810,   504,   505,
     811,   506,   507,     0,   508,   509,     0,     0,   510,     0,
       0,   511,     0,   512,     0,   812,   514,     0,     0,   813,
     814,   815,   816,   515,     0,     0,   516,   817,     0,   818,
     517,   518,   519,   520,   521,   819,   820,     0,     0,     0,
       0,     0,     0,   524,   525,     0,   526,   527,   528,     0,
       0,   821,     0,     0,     0,     0,     0,     0,     0,   822,
     823,     0,     0,     0,     0,   824,   825,     0,     0,   826,
     827,     0,     0,   828,   829,   159,     0,   160,   715,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   716,     0,   169,   170,   171,   172,   173,   174,
     175,   717,   177,     0,   178,     0,     0,   718,   179,   719,
     720,   721,   180,   722,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,   723,   724,   188,   189,
       0,   190,   725,   726,   192,   193,     0,   194,   195,   196,
     197,   727,   199,     0,   728,   201,   729,   730,   731,   732,
     733,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   734,   221,     0,
     222,   735,   736,   223,     0,     0,   224,   737,   225,   738,
     739,   226,     0,   227,   740,   741,     0,   228,   229,   230,
     742,   743,   744,     0,     0,     0,     0,   745,   233,   746,
       0,     0,   747,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,   748,
       0,   261,   262,   263,   264,   749,   750,   265,   266,     0,
     267,   268,   269,   751,     0,   270,     0,     0,     0,   752,
     272,     0,   273,     0,   274,     0,   275,   276,   753,   278,
     754,   280,   281,     0,   282,     0,   755,   283,   284,   285,
       0,   286,   756,   757,     0,   287,   288,     0,     0,     0,
     758,   290,   291,   292,   293,   759,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,   760,   298,   299,
    2938,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   762,     0,
       0,   309,     0,   763,   310,   311,     0,     0,     0,     0,
       0,   764,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,   765,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,   766,   338,   339,
     340,   341,   767,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   768,   350,     0,     0,   769,   352,
     770,   353,     0,   354,   771,   772,   773,   774,   775,   359,
     360,   361,   362,   363,   364,     0,   776,   365,     0,     0,
     366,   367,   368,   369,   777,   778,   779,   370,   371,     0,
     780,   781,   372,     0,   373,   374,   782,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,   783,   385,     0,
     386,     0,   387,   388,   784,   390,   391,   392,   393,   785,
     786,   396,   787,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   788,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,   789,   790,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   791,     0,
     792,   433,   434,   435,   436,   437,   438,   793,   794,   441,
     442,   443,   444,     0,   795,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,   796,   797,
     473,   474,     0,   475,   476,   798,   478,   479,   480,   799,
     800,   481,   482,   483,   484,   801,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   802,   491,   492,     0,   803,
     804,   805,   806,     0,     0,     0,     0,     0,   497,   498,
     499,     0,   807,   808,   809,   501,   502,   503,   810,   504,
     505,   811,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   812,   514,     0,     0,
     813,   814,   815,   816,   515,     0,     0,   516,   817,     0,
     818,   517,   518,   519,   520,   521,   819,   820,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   821,     0,     0,     0,     0,     0,     0,     0,
     822,   823,     0,     0,     0,     0,   824,   825,     0,     0,
     826,   827,     0,     0,   828,   829,   159,     0,   160,   715,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   716,     0,   169,   170,   171,   172,   173,
     174,   175,   717,   177,     0,   178,     0,     0,   718,   179,
     719,   720,   721,   180,   722,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,   723,   724,   188,
     189,     0,   190,   725,   726,   192,   193,     0,   194,   195,
     196,   197,   727,   199,     0,   728,   201,   729,   730,   731,
     732,   733,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   734,   221,
       0,   222,   735,   736,   223,     0,     0,   224,   737,   225,
     738,   739,   226,     0,   227,   740,   741,     0,   228,   229,
     230,   742,   743,   744,     0,     0,     0,     0,   745,   233,
     746,     0,     0,  3828,   234,     0,   235,     0,     0,     0,
       0,   236,     0,   237,   238,   239,   240,   241,     0,     0,
       0,     0,   242,     0,     0,   243,   244,   245,     0,     0,
       0,   246,     0,   247,   248,     0,   249,   250,   251,     0,
     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,
     748,     0,   261,   262,   263,   264,   749,   750,   265,   266,
       0,   267,   268,   269,   751,     0,   270,     0,     0,     0,
     752,   272,     0,   273,     0,   274,     0,   275,   276,   753,
     278,   754,   280,   281,     0,   282,     0,   755,   283,   284,
     285,     0,   286,   756,   757,     0,   287,   288,     0,     0,
       0,   758,   290,   291,   292,   293,   759,     0,     0,   294,
     295,   296,     0,     0,   297,     0,     0,     0,   760,   298,
     299,   761,     0,     0,   300,     0,   301,   302,     0,   303,
     304,     0,     0,     0,   305,     0,     0,   306,   307,   762,
       0,     0,   309,     0,   763,   310,   311,     0,     0,     0,
       0,     0,   764,   313,     0,   314,     0,   315,     0,   316,
     317,     0,     0,   765,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   334,   335,   336,   337,   766,   338,
     339,   340,   341,   767,   342,   343,   344,     0,     0,     0,
       0,   345,   346,   347,   348,   768,   350,     0,     0,   769,
     352,   770,   353,     0,   354,   771,   772,   773,   774,   775,
     359,   360,   361,   362,   363,   364,     0,   776,   365,     0,
       0,   366,   367,   368,   369,   777,   778,   779,   370,   371,
       0,   780,   781,   372,     0,   373,   374,   782,     0,   376,
     377,   378,   379,     0,   380,   381,     0,     0,     0,     0,
       0,     0,     0,     0,   382,   383,   384,     0,   783,   385,
       0,   386,     0,   387,   388,   784,   390,   391,   392,   393,
     785,   786,   396,   787,     0,   397,   398,   399,     0,   400,
       0,   401,   402,   403,   404,   405,     0,   788,   407,   408,
       0,     0,   409,     0,     0,     0,   410,   411,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,   422,   423,   424,   789,   790,   425,     0,   426,
       0,   427,   428,     0,   429,   430,     0,   431,     0,   791,
       0,   792,   433,   434,   435,   436,   437,   438,   793,   794,
     441,   442,   443,   444,     0,   795,   446,     0,     0,     0,
     447,   448,   449,   450,     0,     0,     0,   451,     0,     0,
       0,   452,     0,   453,   454,   455,   456,   457,   458,     0,
     459,   460,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,     0,     0,   468,     0,
       0,     0,   469,   470,   471,     0,     0,     0,   472,   796,
     797,   473,   474,     0,   475,   476,   798,   478,   479,   480,
     799,   800,   481,   482,   483,   484,   801,   485,   486,     0,
       0,   487,   488,   489,   490,     0,   802,   491,   492,     0,
     803,   804,   805,   806,     0,     0,     0,     0,     0,   497,
     498,   499,     0,   807,   808,   809,   501,   502,   503,   810,
     504,   505,   811,   506,   507,     0,   508,   509,     0,     0,
     510,     0,     0,   511,     0,   512,     0,   812,   514,     0,
       0,   813,   814,   815,   816,   515,     0,     0,   516,   817,
       0,   818,   517,   518,   519,   520,   521,   819,   820,     0,
       0,     0,     0,     0,     0,   524,   525,     0,   526,   527,
     528,     0,     0,   821,     0,     0,     0,     0,     0,     0,
       0,   822,   823,     0,     0,     0,     0,   824,   825,     0,
       0,   826,   827,     0,     0,   828,   829,   159,     0,   160,
     715,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   716,     0,   169,   170,   171,   172,
     173,   174,   175,   717,   177,     0,   178,     0,     0,   718,
     179,   719,   720,   721,   180,   722,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,   723,   724,
     188,   189,     0,   190,   725,   726,   192,   193,     0,   194,
     195,   196,   197,   727,   199,     0,   728,   201,   729,   730,
     731,   732,   733,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   734,
     221,     0,   222,   735,   736,   223,     0,     0,   224,   737,
     225,   738,   739,   226,     0,   227,   740,   741,     0,   228,
     229,   230,   742,   743,   744,     0,     0,     0,     0,   745,
     233,   746,     0,     0,   747,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,   748,     0,   261,   262,   263,   264,   749,   750,   265,
     266,     0,   267,   268,   269,   751,     0,   270,     0,     0,
       0,   752,   272,     0,   273,     0,   274,     0,   275,   276,
     753,   278,   754,   280,   281,     0,   282,     0,   755,   283,
     284,   285,     0,   286,   756,   757,     0,   287,   288,     0,
       0,     0,   758,   290,   291,   292,   293,   759,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,   760,
     298,   299,   761,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     762,     0,     0,   309,     0,   763,   310,   311,     0,     0,
       0,     0,     0,   764,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,   765,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,   766,
     338,   339,   340,   341,   767,   342,   343,   344,  4817,     0,
       0,     0,   345,   346,   347,   348,   768,   350,     0,     0,
     769,   352,   770,   353,     0,   354,   771,   772,   773,   774,
     775,   359,   360,   361,   362,   363,   364,     0,   776,   365,
       0,     0,   366,   367,   368,   369,   777,     0,   779,   370,
     371,     0,   780,   781,   372,     0,   373,   374,   782,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,   783,
     385,     0,   386,     0,   387,   388,   784,   390,   391,   392,
     393,   785,   786,   396,   787,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   788,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,   789,   790,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     791,     0,   792,   433,   434,   435,   436,   437,   438,   793,
     794,   441,   442,   443,   444,     0,   795,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
     796,   797,   473,   474,     0,   475,   476,   798,   478,   479,
     480,   799,   800,   481,   482,   483,   484,   801,   485,   486,
       0,     0,   487,   488,   489,   490,     0,   802,   491,   492,
       0,   803,   804,   805,   806,     0,     0,     0,     0,     0,
     497,   498,   499,     0,   807,   808,   809,   501,   502,   503,
     810,   504,   505,   811,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   812,   514,
       0,     0,   813,   814,   815,   816,   515,     0,     0,   516,
     817,     0,   818,   517,   518,   519,   520,   521,   819,   820,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,     0,   821,     0,     0,     0,     0,     0,
       0,     0,   822,   823,     0,     0,     0,     0,   824,   825,
       0,     0,   826,   827,     0,     0,   828,   829,   159,     0,
     160,   715,   162,   163,   164,   165,     0,     0,   166,     0,
       0,     0,   167,     0,     0,   716,     0,   169,   170,   171,
     172,   173,   174,   175,   717,   177,     0,   178,     0,     0,
     718,   179,   719,   720,   721,   180,   722,     0,   181,   182,
     183,     0,   184,     0,   185,   186,     0,     0,   187,   723,
     724,   188,   189,     0,   190,   725,   726,   192,   193,     0,
     194,   195,   196,   197,   727,   199,     0,   728,   201,   729,
     730,   731,   732,   733,     0,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,   216,     0,   217,   218,   219,
     734,   221,     0,   222,   735,   736,   223,     0,     0,   224,
     737,   225,   738,   739,   226,     0,   227,   740,   741,     0,
     228,   229,   230,   742,   743,   744,     0,     0,     0,     0,
     745,   233,   746,     0,     0,   747,   234,     0,   235,     0,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,   748,     0,   261,   262,   263,   264,   749,   750,
     265,   266,     0,   267,   268,   269,   751,     0,   270,     0,
       0,     0,   752,   272,     0,   273,     0,   274,     0,   275,
     276,   753,   278,   754,   280,   281,     0,   282,     0,   755,
     283,   284,   285,     0,   286,   756,   757,     0,   287,   288,
       0,     0,     0,   758,   290,   291,   292,   293,   759,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
     760,   298,   299,   761,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   762,     0,     0,   309,     0,   763,   310,   311,     0,
       0,     0,     0,     0,   764,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,   765,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
     766,   338,   339,   340,   341,   767,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   768,   350,     0,
       0,   769,   352,   770,   353,     0,   354,   771,   772,   773,
     774,   775,   359,   360,   361,   362,   363,   364,     0,   776,
     365,     0,     0,   366,   367,   368,   369,   777,     0,   779,
     370,   371,     0,   780,   781,   372,     0,   373,   374,   782,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
     783,   385,     0,   386,     0,   387,   388,   784,   390,   391,
     392,   393,   785,   786,   396,   787,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   788,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,   789,   790,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   791,     0,   792,   433,   434,   435,   436,   437,   438,
     793,   794,   441,   442,   443,   444,     0,   795,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,   796,   797,   473,   474,     0,   475,   476,   798,   478,
     479,   480,   799,   800,   481,   482,   483,   484,   801,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   802,   491,
     492,     0,   803,   804,   805,   806,     0,     0,     0,     0,
       0,   497,   498,   499,     0,   807,   808,   809,   501,   502,
     503,   810,   504,   505,   811,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   812,
     514,     0,     0,   813,   814,   815,   816,   515,     0,     0,
     516,   817,     0,   818,   517,   518,   519,   520,   521,   819,
     820,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   821,     0,     0,     0,     0,
       0,     0,     0,   822,   823,     0,     0,     0,     0,   824,
     825,     0,     0,   826,   827,     0,     0,   828,   829,   159,
       0,   160,   715,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   716,     0,   169,   170,
     171,   172,   173,   174,   175,   717,   177,     0,   178,     0,
       0,   718,   179,   719,   720,   721,   180,   722,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
     723,   724,   188,   189,     0,   190,   725,   726,   192,   193,
       0,   194,   195,   196,   197,   727,   199,     0,   728,   201,
     729,   730,   731,   732,   733,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   734,   221,     0,   222,   735,   736,   223,     0,     0,
     224,   737,   225,   738,   739,   226,     0,   227,   740,   741,
       0,   228,   229,   230,   742,   743,   744,     0,     0,     0,
       0,   745,   233,   746,     0,     0,   747,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,   748,     0,   261,   262,   263,   264,   749,
     750,   265,   266,     0,   267,   268,   269,   751,     0,   270,
       0,     0,     0,   752,   272,     0,   273,     0,   274,     0,
     275,   276,   753,   278,   754,   280,   281,     0,   282,     0,
     755,   283,   284,   285,     0,   286,   756,   757,     0,   287,
     288,     0,     0,     0,   758,   290,   291,   292,   293,   759,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,   760,   298,   299,  1918,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   762,     0,     0,   309,     0,   763,   310,   311,
       0,     0,     0,     0,     0,   764,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,   765,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,   766,   338,   339,   340,   341,   767,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   768,   350,
       0,     0,   769,   352,   770,   353,     0,   354,   771,   772,
     773,   774,   775,   359,   360,   361,   362,   363,   364,     0,
     776,   365,     0,     0,   366,   367,   368,   369,   777,     0,
     779,   370,   371,     0,   780,   781,   372,     0,   373,   374,
     782,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,   783,   385,     0,   386,     0,   387,   388,   784,   390,
     391,   392,   393,   785,   786,   396,   787,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     788,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,   789,   790,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   791,     0,   792,   433,   434,   435,   436,   437,
     438,   793,   794,   441,   442,   443,   444,     0,   795,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,   796,   797,   473,   474,     0,   475,   476,   798,
     478,   479,   480,   799,   800,   481,   482,   483,   484,   801,
     485,   486,     0,     0,   487,   488,   489,   490,     0,   802,
     491,   492,     0,   803,   804,   805,   806,     0,     0,     0,
       0,     0,   497,   498,   499,     0,   807,   808,   809,   501,
     502,   503,   810,   504,   505,   811,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     812,   514,     0,     0,   813,   814,   815,   816,   515,     0,
       0,   516,   817,     0,   818,   517,   518,   519,   520,   521,
     819,   820,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   821,     0,     0,     0,
       0,     0,     0,     0,   822,   823,     0,     0,     0,     0,
     824,   825,     0,     0,   826,   827,     0,     0,   828,   829,
     159,     0,   160,   715,   162,   163,   164,   165,     0,     0,
     166,     0,     0,     0,   167,     0,     0,   716,     0,   169,
     170,   171,   172,   173,   174,   175,   717,   177,     0,   178,
       0,     0,   718,   179,   719,   720,   721,   180,   722,     0,
     181,   182,   183,     0,   184,     0,   185,   186,     0,     0,
     187,   723,   724,   188,   189,     0,   190,   725,   726,   192,
     193,     0,   194,   195,   196,   197,   727,   199,     0,   728,
     201,   729,   730,   731,   732,   733,     0,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,   216,     0,   217,
     218,   219,   734,   221,     0,   222,   735,   736,   223,     0,
       0,   224,   737,   225,   738,   739,   226,     0,   227,   740,
     741,     0,   228,   229,   230,   742,   743,   744,     0,     0,
       0,     0,   745,   233,   746,     0,     0,   747,   234,     0,
     235,     0,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,   748,     0,   261,   262,   263,   264,
     749,   750,   265,   266,     0,   267,   268,   269,   751,     0,
     270,     0,     0,     0,   752,   272,     0,   273,     0,   274,
       0,   275,   276,   753,   278,   754,   280,   281,     0,   282,
       0,   755,   283,   284,   285,     0,   286,   756,   757,     0,
     287,   288,     0,     0,     0,   758,   290,   291,   292,   293,
     759,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,   760,   298,   299,  1920,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   762,     0,     0,   309,     0,   763,   310,
     311,     0,     0,     0,     0,     0,   764,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,   765,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,   766,   338,   339,   340,   341,   767,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   768,
     350,     0,     0,   769,   352,   770,   353,     0,   354,   771,
     772,   773,   774,   775,   359,   360,   361,   362,   363,   364,
       0,   776,   365,     0,     0,   366,   367,   368,   369,   777,
       0,   779,   370,   371,     0,   780,   781,   372,     0,   373,
     374,   782,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,   783,   385,     0,   386,     0,   387,   388,   784,
     390,   391,   392,   393,   785,   786,   396,   787,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   788,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,   789,
     790,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   791,     0,   792,   433,   434,   435,   436,
     437,   438,   793,   794,   441,   442,   443,   444,     0,   795,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,   796,   797,   473,   474,     0,   475,   476,
     798,   478,   479,   480,   799,   800,   481,   482,   483,   484,
     801,   485,   486,     0,     0,   487,   488,   489,   490,     0,
     802,   491,   492,     0,   803,   804,   805,   806,     0,     0,
       0,     0,     0,   497,   498,   499,     0,   807,   808,   809,
     501,   502,   503,   810,   504,   505,   811,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   812,   514,     0,     0,   813,   814,   815,   816,   515,
       0,     0,   516,   817,     0,   818,   517,   518,   519,   520,
     521,   819,   820,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,     0,   821,     0,     0,
       0,     0,     0,     0,     0,   822,   823,     0,     0,     0,
       0,   824,   825,     0,     0,   826,   827,     0,     0,   828,
     829,   159,     0,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,   719,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,  1963,     0,
       0,     0,     0,   232,   233,   746,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,   750,   265,   266,     0,   267,   268,   269,   751,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,   756,   757,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,   765,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   776,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,   780,   781,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,   802,   491,   492,     0,  1964,   494,   495,  1965,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,   808,
     500,   501,   502,   503,   810,   504,   505,   811,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,     0,     0,     0,   159,     0,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
     828,   829,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,  3213,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,   640,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,  2280,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,  2281,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,  3593,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,  2585,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,   642,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,     0,   159,     0,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,  3285,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,  3213,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,   640,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,  2280,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,  2281,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,   642,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,     0,   529,     0,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,  3285,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
    2585,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   529,     0,     0,     0,
       0,   159,     0,   160,   161,   162,   163,   164,   165,     0,
       0,   166,  3063,     0,     0,   167,     0,     0,   168,   829,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,     0,     0,     0,   159,     0,   160,   161,   162,
     163,   164,   165,     0,  4881,   166,     0,     0,     0,   167,
    4882,   829,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,  1236,     0,   166,
       0,     0,     0,   167,     0,   829,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,  1468,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   529,     0,     0,     0,
       0,   159,     0,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,   567,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2526,   159,
       0,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,   567,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   529,     0,     0,     0,
       0,     0,     0,   159,     0,   160,   161,   162,   163,   164,
     165,  3284,     0,   166,     0,     0,     0,   167,     0,  3285,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,     0,
     529,     0,     0,     0,     0,     0,     0,   159,     0,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,  4882,   829,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,     0,   529,     0,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,   567,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   651,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   652,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   653,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   529,     0,     0,     0,
       0,   159,     0,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,   567,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,     0,   159,     0,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,   829,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,     0,
     529,     0,     0,     0,     0,   159,     0,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,  3285,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,  1008,  1009,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,  1010,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,  1011,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,  1012,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,  1013,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,  1014,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,  1015,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,  1016,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,  1017,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,     0,   529,     0,     0,     0,   159,     0,   160,   161,
     162,   163,   164,   165,     0,     0,   166,     0,     0,     0,
     167,     0,     0,   168,  1018,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
       0,   236,     0,   237,   238,   239,   240,   241,     0,     0,
       0,     0,   242,     0,     0,   243,   244,   245,     0,     0,
       0,   246,     0,   247,   248,     0,   249,   250,   251,     0,
     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
       0,   267,   268,   269,     0,     0,   270,     0,     0,     0,
     271,   272,     0,   273,     0,   274,     0,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,     0,   283,   284,
     285,     0,   286,     0,     0,     0,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,     0,   294,
     295,   296,     0,     0,   297,     0,     0,     0,     0,   298,
     299,     0,     0,     0,   300,     0,   301,   302,     0,   303,
     304,     0,     0,     0,   305,     0,     0,   306,   307,   308,
       0,     0,   309,     0,     0,   310,   311,   665,     0,     0,
       0,     0,   312,   313,     0,   314,     0,   315,     0,   316,
     317,     0,     0,     0,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   334,   335,   336,   337,     0,   338,
     339,   340,   341,     0,   342,   343,   344,     0,     0,     0,
       0,   345,   346,   347,   348,   349,   350,     0,     0,   351,
     352,     0,   353,     0,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,     0,
       0,   366,   367,   368,   369,     0,     0,     0,   370,   371,
       0,     0,     0,   372,     0,   373,   374,   375,     0,   376,
     377,   378,   379,     0,   380,   381,     0,     0,     0,     0,
       0,     0,     0,     0,   382,   383,   384,     0,     0,   385,
       0,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,     0,   400,
       0,   401,   402,   403,   404,   405,     0,   406,   407,   408,
       0,     0,   409,     0,     0,     0,   410,   411,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,   422,   423,   424,     0,     0,   425,     0,   426,
       0,   427,   428,     0,   429,   430,     0,   431,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,     0,   445,   446,     0,     0,     0,
     447,   448,   449,   450,     0,     0,     0,   451,     0,     0,
       0,   452,     0,   453,   454,   455,   456,   457,   458,     0,
     459,   460,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,     0,     0,   468,     0,
       0,     0,   469,   470,   471,     0,     0,     0,   472,     0,
       0,   473,   474,     0,   475,   476,   477,   478,   479,   480,
       0,     0,   481,   482,   483,   484,     0,   485,   486,     0,
       0,   487,   488,   489,   490,     0,   156,   491,   492,     0,
     493,   494,   495,   496,     0,     0,     0,     0,     0,   497,
     498,   499,     0,     0,     0,   500,   501,   502,   503,     0,
     504,   505,     0,   506,   507,     0,   508,   509,     0,     0,
     510,     0,     0,   511,     0,   512,     0,   513,   514,     0,
       0,     0,     0,     0,     0,   515,     0,     0,   516,     0,
       0,     0,   517,   518,   519,   520,   521,   522,   523,     0,
       0,     0,     0,     0,     0,   524,   525,     0,   526,   527,
     528,     0,     0,   529,     0,     0,     0,   159,     0,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,  1539,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,   665,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,   156,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,     0,   529,     0,     0,     0,   159,     0,
     160,   161,   162,   163,   164,   165,     0,     0,   166,     0,
       0,     0,   167,     0,     0,   168,  1890,   169,   170,   171,
     172,   173,   174,   175,   176,   177,     0,   178,     0,     0,
       0,   179,     0,     0,     0,   180,     0,     0,   181,   182,
     183,     0,   184,     0,   185,   186,     0,     0,   187,     0,
       0,   188,   189,     0,   190,   191,     0,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,   222,     0,     0,   223,     0,     0,   224,
       0,   225,     0,     0,   226,     0,   227,     0,     0,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,     0,
     232,   233,     0,     0,     0,     0,   234,     0,   235,     0,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   529,     0,     0,     0,   159,
       0,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,  2616,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,  1008,  1009,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,  1010,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,  1011,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,  1012,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,  1013,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,  1014,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,  1015,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,  1016,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,     0,   529,     0,     0,     0,
     159,     0,   160,   161,   162,   163,   164,   165,     0,     0,
     166,     0,     0,     0,   167,     0,     0,   168,  1018,   169,
     170,   171,   172,   173,   174,   175,   176,   177,     0,   178,
       0,     0,     0,   179,     0,     0,     0,   180,     0,     0,
     181,   182,   183,     0,   184,     0,   185,   186,     0,     0,
     187,     0,     0,   188,   189,     0,   190,   191,     0,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,   200,
     201,   202,   203,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,  1379,   215,   216,     0,   217,
     218,   219,   220,   221,     0,   222,     0,     0,   223,     0,
       0,   224,     0,   225,     0,     0,   226,     0,   227,     0,
       0,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,     0,   232,   233,     0,     0,     0,     0,   234,     0,
     235,     0,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,     0,   267,   268,   269,     0,     0,
     270,     0,     0,     0,   271,   272,     0,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,     0,   283,   284,   285,     0,   286,     0,     0,     0,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   308,     0,     0,   309,     0,     0,   310,
     311,     0,     0,     0,     0,     0,   312,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,     0,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,
     350,     0,     0,   351,   352,     0,   353,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,     0,     0,   366,   367,   368,   369,     0,
       0,     0,   370,   371,     0,     0,     0,   372,     0,   373,
     374,   375,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,     0,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,     0,
       0,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,     0,   445,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,   479,   480,     0,     0,   481,   482,   483,   484,
       0,   485,   486,     0,     0,   487,   488,   489,   490,     0,
       0,   491,   492,     0,   493,   494,   495,   496,     0,     0,
       0,     0,     0,   497,   498,   499,     0,     0,     0,   500,
     501,   502,   503,     0,   504,   505,     0,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   513,   514,     0,     0,     0,     0,     0,     0,   515,
       0,     0,   516,     0,     0,     0,   517,   518,   519,   520,
     521,   522,   523,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,     0,   529,     0,     0,
       0,   159,     0,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,  1380,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,     0,   529,     0,
       0,     0,   159,     0,   160,   161,   162,   163,   164,   165,
       0,     0,   166,     0,     0,     0,   167,     0,     0,     0,
    1380,   169,   170,   171,   172,   173,   174,   175,   176,     0,
       0,   923,     0,     0,     0,   179,     0,     0,     0,   180,
       0,     0,   181,   182,   183,     0,   184,     0,     0,     0,
       0,     0,   187,     7,     0,   188,   189,     0,   190,     0,
       0,     0,     0,     0,   194,   195,   196,   924,   198,   199,
       0,   200,   201,     0,     0,     0,     0,     0,     0,   207,
       0,   209,     0,   211,   212,   213,   214,     0,   215,   216,
       0,   217,   218,   219,     0,   221,     0,   222,     0,     0,
     223,     0,     0,   224,     0,   225,     0,     0,   226,     0,
     227,     0,     0,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,     0,   232,     0,     0,     0,     0,     0,
     234,     0,   235,     0,     0,     0,     0,   236,     0,   237,
     238,   239,   240,   241,     0,     0,     0,     0,     0,     0,
       0,   243,   244,   245,     0,     0,     0,   246,     0,     0,
     248,     0,   249,   250,   251,     0,   252,   253,     0,   254,
     255,   256,   257,   258,     0,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   925,   267,   268,   269,
       0,     0,     0,     0,     0,     0,     0,   272,     0,   273,
       0,   274,     0,   275,   276,   277,   278,   279,     0,   281,
       0,   282,     0,     0,     0,   284,   285,     0,     0,     0,
       0,     0,     0,   288,     0,     0,     0,   289,   290,   291,
     292,   293,    26,     0,     0,   294,   295,   296,     0,     0,
     297,     0,     0,     0,     0,   298,     0,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,   926,     0,     0,
     305,     0,     0,     0,   307,   308,     0,     0,   309,   927,
       0,   310,   311,     0,     0,     0,     0,     0,   312,   313,
       0,   314,     0,   315,     0,   316,   317,     0,     0,     0,
       0,    32,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     334,   335,   336,   337,     0,   338,   339,   340,   341,     0,
     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,
     348,   349,   350,     0,     0,   351,   352,     0,   353,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,     0,     0,   366,   367,   368,
     369,     0,     0,     0,     0,   371,     0,     0,     0,   372,
       0,   373,   374,   375,     0,   376,   377,   378,   928,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   383,   384,     0,     0,     0,     0,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,     0,
       0,     0,   398,   399,     0,   400,     0,   401,   402,   403,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
       0,     0,   410,   411,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,     0,   420,     0,     0,   422,     0,
     424,    41,     0,   425,     0,     0,     0,   427,     0,     0,
     429,   430,     0,   431,   929,   432,     0,     0,   433,     0,
     435,   436,   437,   438,   439,   440,   441,     0,   443,   444,
       0,   445,     0,     0,     0,     0,   447,   448,   449,     0,
       0,     0,     0,   451,     0,     0,     0,     0,     0,     0,
     454,     0,     0,   457,   458,     0,   459,     0,   461,     0,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,     0,     0,   468,     0,     0,     0,   469,     0,
     471,     0,     0,     0,   472,     0,     0,     0,   474,     0,
     475,   476,   477,   478,   479,   480,     0,     0,   481,   482,
     483,   484,     0,   485,   486,     0,     0,   487,   488,   489,
     490,     0,     0,   491,   492,     0,   493,   494,   495,   496,
       0,     0,     0,     0,     0,   497,   498,   499,     0,     0,
       0,     0,   501,   502,   503,     0,   504,   505,     0,   506,
     507,     0,     0,     0,     0,     0,   510,     0,     0,   511,
       0,     0,     0,   513,   514,     0,     0,     0,     0,     0,
       0,   515,     0,     0,   516,     0,     0,     0,   517,   518,
     519,   520,   521,   522,   523,     0,     0,    60,     0,     0,
       0,   524,     0,     0,   526,     0,   528,     0,   159,   529,
     160,   161,   162,   163,   164,   165,     0,     0,   166,     0,
       0,     0,   167,     0,     0,   168,  4578,   169,   170,   171,
     172,   173,   174,   175,   176,   177,     0,   178,     0,     0,
       0,   179,     0,     0,     0,   180,     0,     0,   181,   182,
     183,     0,   184,     0,   185,   186,     0,     0,   187,     0,
       0,   188,   189,     0,   190,   191,     0,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,   222,     0,     0,   223,     0,     0,   224,
       0,   225,  1122,     0,   226,     0,   227,     0,     0,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,     0,
     232,   233,     0,     0,     0,     0,   234,     0,   235,     0,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,     0,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,   159,   529,   160,   161,   162,   163,
     164,   165,     0,     0,   166,     0,     0,     0,   167,     0,
    1281,   168,     0,   169,   170,   171,   172,   173,   174,   175,
     176,   177,     0,   178,     0,     0,     0,   179,     0,     0,
       0,   180,     0,     0,   181,   182,   183,     0,   184,     0,
     185,   186,     0,     0,   187,     0,     0,   188,   189,     0,
     190,   191,     0,   192,   193,     0,   194,   195,   196,   197,
     198,   199,     0,   200,   201,   202,   203,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,   222,
       0,     0,   223,     0,     0,   224,     0,   225,     0,     0,
     226,     0,   227,     0,     0,     0,   228,   229,   230,     0,
       0,   231,     0,     0,     0,     0,   232,   233,     0,     0,
       0,     0,   234,     0,   235,     0,     0,     0,     0,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     242,     0,     0,   243,   244,   245,     0,     0,     0,   246,
       0,   247,   248,     0,   249,   250,   251,     0,   252,   253,
       0,   254,   255,   256,   257,   258,   259,   260,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,     0,   267,
     268,   269,     0,     0,   270,     0,     0,     0,   271,   272,
       0,   273,     0,   274,     0,   275,   276,   277,   278,   279,
     280,   281,     0,   282,     0,     0,   283,   284,   285,     0,
     286,     0,     0,     0,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,     0,   294,   295,   296,
       0,     0,   297,     0,     0,     0,     0,   298,   299,     0,
       0,     0,   300,     0,   301,   302,     0,   303,   304,     0,
       0,     0,   305,     0,     0,   306,   307,   308,     0,     0,
     309,     0,     0,   310,   311,     0,     0,     0,     0,     0,
     312,   313,     0,   314,     0,   315,     0,   316,   317,     0,
       0,     0,     0,     0,     0,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,     0,   334,   335,   336,   337,     0,   338,   339,   340,
     341,     0,   342,   343,   344,     0,     0,     0,     0,   345,
     346,   347,   348,   349,   350,     0,     0,   351,   352,     0,
     353,     0,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,   365,     0,     0,   366,
     367,   368,   369,     0,     0,     0,   370,   371,     0,     0,
       0,   372,     0,   373,   374,   375,     0,   376,   377,   378,
     379,     0,   380,   381,     0,     0,     0,     0,     0,     0,
       0,     0,   382,   383,   384,     0,     0,   385,     0,   386,
       0,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,     0,     0,   397,   398,   399,     0,   400,     0,   401,
     402,   403,   404,   405,     0,   406,   407,   408,     0,     0,
     409,     0,     0,     0,   410,   411,   412,   413,   414,     0,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
     422,   423,   424,     0,     0,   425,     0,   426,     0,   427,
     428,     0,   429,   430,     0,   431,     0,   432,     0,     0,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,     0,   445,   446,     0,     0,     0,   447,   448,
     449,   450,     0,     0,     0,   451,     0,     0,     0,   452,
       0,   453,   454,   455,   456,   457,   458,     0,   459,   460,
     461,   462,   463,   464,     0,     0,     0,     0,     0,     0,
     465,   466,     0,   467,     0,     0,   468,     0,     0,     0,
     469,   470,   471,     0,     0,     0,   472,     0,     0,   473,
     474,     0,   475,   476,   477,   478,   479,   480,     0,     0,
     481,   482,   483,   484,     0,   485,   486,     0,     0,   487,
     488,   489,   490,     0,     0,   491,   492,     0,   493,   494,
     495,   496,     0,     0,     0,     0,     0,   497,   498,   499,
       0,     0,     0,   500,   501,   502,   503,     0,   504,   505,
       0,   506,   507,     0,   508,   509,     0,     0,   510,     0,
       0,   511,     0,   512,     0,   513,   514,     0,     0,     0,
       0,     0,     0,   515,     0,     0,   516,     0,     0,     0,
     517,   518,   519,   520,   521,   522,   523,     0,     0,     0,
       0,     0,     0,   524,   525,     0,   526,   527,   528,     0,
     159,   529,   160,   161,   162,   163,   164,   165,     0,     0,
     166,  2345,     0,     0,   167,     0,     0,   168,     0,   169,
     170,   171,   172,   173,   174,   175,   176,   177,     0,   178,
       0,     0,     0,   179,     0,     0,     0,   180,     0,     0,
     181,   182,   183,     0,   184,     0,   185,   186,     0,     0,
     187,     0,     0,   188,   189,     0,   190,   191,     0,   192,
     193,     0,   194,   195,   196,   197,   198,   199,     0,   200,
     201,   202,   203,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,   216,     0,   217,
     218,   219,   220,   221,     0,   222,     0,     0,   223,     0,
       0,   224,     0,   225,     0,     0,   226,     0,   227,     0,
       0,     0,   228,   229,   230,     0,     0,   231,     0,     0,
       0,     0,   232,   233,     0,     0,     0,     0,   234,     0,
     235,     0,     0,     0,     0,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   242,     0,     0,   243,
     244,   245,     0,     0,     0,   246,     0,   247,   248,     0,
     249,   250,   251,     0,   252,   253,     0,   254,   255,   256,
     257,   258,   259,   260,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,     0,   267,   268,   269,     0,     0,
     270,     0,     0,     0,   271,   272,     0,   273,     0,   274,
       0,   275,   276,   277,   278,   279,   280,   281,     0,   282,
       0,     0,   283,   284,   285,     0,   286,     0,     0,     0,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,     0,   294,   295,   296,     0,     0,   297,     0,
       0,     0,     0,   298,   299,     0,     0,     0,   300,     0,
     301,   302,     0,   303,   304,     0,     0,     0,   305,     0,
       0,   306,   307,   308,     0,     0,   309,     0,     0,   310,
     311,     0,     0,     0,     0,     0,   312,   313,     0,   314,
       0,   315,     0,   316,   317,     0,     0,     0,     0,     0,
       0,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,     0,   334,   335,
     336,   337,     0,   338,   339,   340,   341,     0,   342,   343,
     344,     0,     0,     0,     0,   345,   346,   347,   348,   349,
     350,     0,     0,   351,   352,     0,   353,     0,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,   365,     0,     0,   366,   367,   368,   369,     0,
       0,     0,   370,   371,     0,     0,     0,   372,     0,   373,
     374,   375,     0,   376,   377,   378,   379,     0,   380,   381,
       0,     0,     0,     0,     0,     0,     0,     0,   382,   383,
     384,     0,     0,   385,     0,   386,     0,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,     0,     0,   397,
     398,   399,     0,   400,     0,   401,   402,   403,   404,   405,
       0,   406,   407,   408,     0,     0,   409,     0,     0,     0,
     410,   411,   412,   413,   414,     0,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,   422,   423,   424,     0,
       0,   425,     0,   426,     0,   427,   428,     0,   429,   430,
       0,   431,     0,   432,     0,     0,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,     0,   445,
     446,     0,     0,     0,   447,   448,   449,   450,     0,     0,
       0,   451,     0,     0,     0,   452,     0,   453,   454,   455,
     456,   457,   458,     0,   459,   460,   461,   462,   463,   464,
       0,     0,     0,     0,     0,     0,   465,   466,     0,   467,
       0,     0,   468,     0,     0,     0,   469,   470,   471,     0,
       0,     0,   472,     0,     0,   473,   474,     0,   475,   476,
     477,   478,   479,   480,     0,     0,   481,   482,   483,   484,
       0,   485,   486,     0,     0,   487,   488,   489,   490,     0,
       0,   491,   492,     0,   493,   494,   495,   496,     0,     0,
       0,     0,     0,   497,   498,   499,     0,     0,     0,   500,
     501,   502,   503,     0,   504,   505,     0,   506,   507,     0,
     508,   509,     0,     0,   510,     0,     0,   511,     0,   512,
       0,   513,   514,     0,     0,     0,     0,     0,     0,   515,
       0,     0,   516,     0,     0,     0,   517,   518,   519,   520,
     521,   522,   523,     0,     0,     0,     0,     0,     0,   524,
     525,     0,   526,   527,   528,     0,   159,   529,   160,   161,
     162,   163,   164,   165,     0,     0,   166,  3119,     0,     0,
     167,     0,     0,   168,     0,   169,   170,   171,   172,   173,
     174,   175,   176,   177,     0,   178,     0,     0,     0,   179,
       0,     0,     0,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   185,   186,     0,     0,   187,     0,     0,   188,
     189,     0,   190,   191,     0,   192,   193,     0,   194,   195,
     196,   197,   198,   199,     0,   200,   201,   202,   203,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,   222,     0,     0,   223,     0,     0,   224,     0,   225,
       0,     0,   226,     0,   227,     0,     0,     0,   228,   229,
     230,     0,     0,   231,     0,     0,     0,     0,   232,   233,
       0,     0,     0,     0,   234,     0,   235,     0,     0,     0,
       0,   236,     0,   237,   238,   239,   240,   241,     0,     0,
       0,     0,   242,     0,     0,   243,   244,   245,     0,     0,
       0,   246,     0,   247,   248,     0,   249,   250,   251,     0,
     252,   253,     0,   254,   255,   256,   257,   258,   259,   260,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
       0,   267,   268,   269,     0,     0,   270,     0,     0,     0,
     271,   272,     0,   273,     0,   274,     0,   275,   276,   277,
     278,   279,   280,   281,     0,   282,     0,     0,   283,   284,
     285,     0,   286,     0,     0,     0,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,     0,   294,
     295,   296,     0,     0,   297,     0,     0,     0,     0,   298,
     299,     0,     0,     0,   300,     0,   301,   302,     0,   303,
     304,     0,     0,     0,   305,     0,     0,   306,   307,   308,
       0,     0,   309,     0,     0,   310,   311,     0,     0,     0,
       0,     0,   312,   313,     0,   314,     0,   315,     0,   316,
     317,     0,     0,     0,     0,     0,     0,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,     0,   334,   335,   336,   337,     0,   338,
     339,   340,   341,     0,   342,   343,   344,     0,     0,     0,
       0,   345,   346,   347,   348,   349,   350,     0,     0,   351,
     352,     0,   353,     0,   354,     0,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,   365,     0,
       0,   366,   367,   368,   369,     0,     0,     0,   370,   371,
       0,     0,     0,   372,     0,   373,   374,   375,     0,   376,
     377,   378,   379,     0,   380,   381,     0,     0,     0,     0,
       0,     0,     0,     0,   382,   383,   384,     0,     0,   385,
       0,   386,     0,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,     0,     0,   397,   398,   399,     0,   400,
       0,   401,   402,   403,   404,   405,     0,   406,   407,   408,
       0,     0,   409,     0,     0,     0,   410,   411,   412,   413,
     414,     0,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,   422,   423,   424,     0,     0,   425,     0,   426,
       0,   427,   428,     0,   429,   430,     0,   431,     0,   432,
       0,     0,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,     0,   445,   446,     0,     0,     0,
     447,   448,   449,   450,     0,     0,     0,   451,     0,     0,
       0,   452,     0,   453,   454,   455,   456,   457,   458,     0,
     459,   460,   461,   462,   463,   464,     0,     0,     0,     0,
       0,     0,   465,   466,     0,   467,     0,     0,   468,     0,
       0,     0,   469,   470,   471,     0,     0,     0,   472,     0,
       0,   473,   474,     0,   475,   476,   477,   478,   479,   480,
       0,     0,   481,   482,   483,   484,     0,   485,   486,     0,
       0,   487,   488,   489,   490,     0,     0,   491,   492,     0,
     493,   494,   495,   496,     0,     0,     0,     0,     0,   497,
     498,   499,     0,     0,     0,   500,   501,   502,   503,     0,
     504,   505,     0,   506,   507,     0,   508,   509,     0,     0,
     510,     0,     0,   511,     0,   512,     0,   513,   514,     0,
       0,     0,     0,     0,     0,   515,     0,     0,   516,     0,
       0,     0,   517,   518,   519,   520,   521,   522,   523,     0,
       0,     0,     0,     0,     0,   524,   525,     0,   526,   527,
     528,     0,   159,   529,   160,   161,   162,   163,   164,   165,
       0,     0,   166,  3481,     0,     0,   167,     0,     0,   168,
       0,   169,   170,   171,   172,   173,   174,   175,   176,   177,
       0,   178,     0,     0,     0,   179,     0,     0,     0,   180,
       0,     0,   181,   182,   183,     0,   184,     0,   185,   186,
       0,     0,   187,     0,     0,   188,   189,     0,   190,   191,
       0,   192,   193,     0,   194,   195,   196,   197,   198,   199,
       0,   200,   201,   202,   203,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,   216,
       0,   217,   218,   219,   220,   221,     0,   222,     0,     0,
     223,     0,     0,   224,     0,   225,     0,     0,   226,     0,
     227,     0,     0,     0,   228,   229,   230,     0,     0,   231,
       0,     0,     0,     0,   232,   233,     0,     0,     0,     0,
     234,     0,   235,     0,     0,     0,     0,   236,     0,   237,
     238,   239,   240,   241,     0,     0,     0,     0,   242,     0,
       0,   243,   244,   245,     0,     0,     0,   246,     0,   247,
     248,     0,   249,   250,   251,     0,   252,   253,     0,   254,
     255,   256,   257,   258,   259,   260,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,     0,   267,   268,   269,
       0,     0,   270,     0,     0,     0,   271,   272,     0,   273,
       0,   274,     0,   275,   276,   277,   278,   279,   280,   281,
       0,   282,     0,     0,   283,   284,   285,     0,   286,     0,
       0,     0,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,     0,   294,   295,   296,     0,     0,
     297,     0,     0,     0,     0,   298,   299,     0,     0,     0,
     300,     0,   301,   302,     0,   303,   304,     0,     0,     0,
     305,     0,     0,   306,   307,   308,     0,     0,   309,     0,
       0,   310,   311,     0,     0,     0,     0,     0,   312,   313,
       0,   314,     0,   315,     0,   316,   317,     0,     0,     0,
       0,     0,     0,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,     0,
     334,   335,   336,   337,     0,   338,   339,   340,   341,     0,
     342,   343,   344,     0,     0,     0,     0,   345,   346,   347,
     348,   349,   350,     0,     0,   351,   352,     0,   353,     0,
     354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,   365,     0,     0,   366,   367,   368,
     369,     0,     0,     0,   370,   371,     0,     0,     0,   372,
       0,   373,   374,   375,     0,   376,   377,   378,   379,     0,
     380,   381,     0,     0,     0,     0,     0,     0,     0,     0,
     382,   383,   384,     0,     0,   385,     0,   386,     0,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,     0,
       0,   397,   398,   399,     0,   400,     0,   401,   402,   403,
     404,   405,     0,   406,   407,   408,     0,     0,   409,     0,
       0,     0,   410,   411,   412,   413,   414,     0,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,   422,   423,
     424,     0,     0,   425,     0,   426,     0,   427,   428,     0,
     429,   430,     0,   431,     0,   432,     0,     0,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
       0,   445,   446,     0,     0,     0,   447,   448,   449,   450,
       0,     0,     0,   451,     0,     0,     0,   452,     0,   453,
     454,   455,   456,   457,   458,     0,   459,   460,   461,   462,
     463,   464,     0,     0,     0,     0,     0,     0,   465,   466,
       0,   467,     0,     0,   468,     0,     0,     0,   469,   470,
     471,     0,     0,     0,   472,     0,     0,   473,   474,     0,
     475,   476,   477,   478,   479,   480,     0,     0,   481,   482,
     483,   484,     0,   485,   486,     0,     0,   487,   488,   489,
     490,     0,     0,   491,   492,     0,   493,   494,   495,   496,
       0,     0,     0,     0,     0,   497,   498,   499,     0,     0,
       0,   500,   501,   502,   503,     0,   504,   505,     0,   506,
     507,     0,   508,   509,     0,     0,   510,     0,     0,   511,
       0,   512,     0,   513,   514,     0,     0,     0,     0,     0,
       0,   515,     0,     0,   516,     0,     0,     0,   517,   518,
     519,   520,   521,   522,   523,     0,     0,     0,     0,     0,
       0,   524,   525,     0,   526,   527,   528,     0,   159,   529,
     160,   161,   162,   163,   164,   165,     0,     0,   166,  3887,
       0,     0,   167,     0,     0,   168,     0,   169,   170,   171,
     172,   173,   174,   175,   176,   177,     0,   178,     0,     0,
    1526,   179,     0,     0,     0,   180,     0,     0,   181,   182,
     183,     0,   184,     0,   185,   186,     0,     0,   187,     0,
       0,   188,   189,     0,   190,   191,     0,   192,   193,     0,
     194,   195,   196,   197,   198,   199,     0,   200,   201,   202,
     203,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,   222,     0,     0,   223,     0,     0,   224,
       0,   225,     0,     0,   226,     0,   227,     0,     0,     0,
     228,   229,   230,     0,     0,   231,     0,     0,     0,     0,
     232,   233,     0,     0,     0,  1527,   234,     0,   235,     0,
       0,     0,     0,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   242,     0,     0,   243,   244,   245,
       0,     0,     0,   246,     0,   247,   248,     0,   249,   250,
     251,     0,   252,   253,     0,   254,   255,   256,   257,   258,
     259,   260,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,     0,   267,   268,   269,     0,     0,   270,     0,
       0,     0,   271,   272,     0,   273,     0,   274,     0,   275,
     276,   277,   278,   279,   280,   281,     0,   282,     0,     0,
     283,   284,   285,     0,   286,     0,     0,     0,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
       0,   294,   295,   296,     0,     0,   297,     0,     0,     0,
       0,   298,   299,     0,     0,     0,   300,     0,   301,   302,
       0,   303,   304,     0,     0,     0,   305,     0,     0,   306,
     307,   308,     0,     0,   309,     0,     0,   310,   311,   665,
       0,     0,     0,     0,   312,   313,     0,   314,     0,   315,
       0,   316,   317,     0,     0,     0,     0,     0,     0,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,     0,   334,   335,   336,   337,
       0,   338,   339,   340,   341,     0,   342,   343,   344,     0,
       0,     0,     0,   345,   346,   347,   348,   349,   350,     0,
       0,   351,   352,     0,   353,     0,   354,     0,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
     365,     0,     0,   366,   367,   368,   369,     0,     0,     0,
     370,   371,     0,     0,     0,   372,     0,   373,   374,   375,
       0,   376,   377,   378,   379,     0,   380,   381,     0,     0,
       0,     0,     0,     0,     0,     0,   382,   383,   384,     0,
       0,   385,     0,   386,     0,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,     0,     0,   397,   398,   399,
       0,   400,     0,   401,   402,   403,   404,   405,     0,   406,
     407,   408,     0,     0,   409,     0,     0,     0,   410,   411,
     412,   413,   414,     0,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,   422,   423,   424,     0,     0,   425,
       0,   426,     0,   427,   428,     0,   429,   430,     0,   431,
       0,   432,     0,     0,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,     0,   445,   446,     0,
       0,     0,   447,   448,   449,   450,     0,     0,  1528,   451,
       0,     0,     0,   452,     0,   453,   454,   455,   456,   457,
     458,     0,   459,   460,   461,   462,   463,   464,     0,     0,
       0,     0,     0,     0,   465,   466,     0,   467,     0,     0,
     468,     0,     0,     0,   469,   470,   471,     0,     0,     0,
     472,     0,     0,   473,   474,     0,   475,   476,   477,   478,
     479,   480,     0,     0,   481,   482,   483,   484,     0,   485,
     486,     0,     0,   487,   488,   489,   490,     0,   156,   491,
     492,     0,   493,   494,   495,   496,     0,     0,     0,     0,
       0,   497,   498,   499,     0,     0,     0,   500,   501,   502,
     503,     0,   504,   505,     0,   506,   507,     0,   508,   509,
       0,     0,   510,     0,     0,   511,     0,   512,     0,   513,
     514,     0,     0,     0,     0,     0,     0,   515,     0,     0,
     516,     0,     0,     0,   517,   518,   519,   520,   521,   522,
     523,     0,     0,     0,     0,     0,     0,   524,   525,     0,
     526,   527,   528,     0,     0,   529,     0,   159,  1529,   160,
     161,   162,   163,   164,   165,   871,   872,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,   873,     0,   224,     0,
     225,     0,   874,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,   875,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,   876,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   877,   257,   258,   259,
     878,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   879,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,   880,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,   881,     0,   297,     0,     0,     0,   882,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,   665,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,   883,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   884,   402,   403,   404,   885,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,   886,     0,   415,   416,   417,   418,   419,     0,
     887,   421,     0,   422,   423,   424,     0,     0,   888,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,   889,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,   890,   891,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   892,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,   156,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,   893,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,   894,   512,   895,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   977,   161,   162,   163,   164,
     165,   978,   872,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,   873,     0,   224,     0,   225,     0,   874,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,   875,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
     876,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   877,   257,   258,   259,   878,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   879,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,   880,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,   881,
       0,   297,     0,     0,     0,   882,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,   883,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   884,   402,
     403,   404,   979,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,   886,     0,
     415,   416,   417,   418,   419,     0,   887,   421,     0,   422,
     423,   424,     0,     0,   888,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,   889,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,   890,   891,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   892,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,   893,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,   894,   512,   895,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,  2594,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,  2595,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,  2596,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,  2597,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,   152,   153,
       0,   370,   371,     0,     0,  2598,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,  4430,   595,  4431,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,  2599,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,  1774,
       0,     0,  3705,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,  1775,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,  3189,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,  3190,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,  3191,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,  3192,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,  1774,     0,     0,  4669,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,  1775,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,  3189,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,  3190,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,  3191,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,   156,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,  3192,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,  1774,     0,     0,  4738,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,  1775,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,  3189,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,  3190,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,  3191,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,   156,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
    3192,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,  1122,   874,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,  1541,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,  1542,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
     665,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,   156,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,  1084,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,  1085,  1086,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,  1087,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,  2081,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,  2082,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,   783,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,  2083,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,  2084,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,  2081,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,  2082,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,   783,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
    2084,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,  1526,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
    1527,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,  2081,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,  2082,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,   783,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,  4263,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,  2084,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,  1122,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,   665,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,  1564,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,   665,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,   156,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,   874,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,   665,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,   156,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
    2654,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,   665,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,   156,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,  1526,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
     665,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,   156,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,   665,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,   156,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,  3115,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,   156,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,  3299,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,  3300,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,   595,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,  1181,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,  1519,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,  1519,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,  2135,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,  2273,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,  3308,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,   156,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,  3621,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,   268,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,  3629,
       0,   166,     0,     0,     0,   167,     0,     0,   168,     0,
     169,   170,   171,   172,   173,   174,   175,   176,   177,     0,
     178,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,   185,   186,     0,
       0,   187,     0,     0,   188,   189,     0,   190,   191,     0,
     192,   193,     0,   194,   195,   196,   197,   198,   199,     0,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,   233,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   242,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,   247,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,   259,   260,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,   270,     0,     0,     0,   271,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,   280,   281,     0,
     282,     0,     0,   283,   284,   285,     0,   286,     0,     0,
       0,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,   299,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,   306,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,   370,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   379,     0,   380,
     381,     0,     0,     0,     0,     0,     0,     0,     0,   382,
     383,   384,     0,     0,   385,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,     0,     0,
     397,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,   422,   423,   424,
       0,     0,   425,     0,   426,     0,   427,   428,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,     0,
     445,   446,     0,     0,     0,   447,   448,   449,   450,     0,
       0,     0,   451,     0,     0,     0,   452,     0,   453,   454,
     455,   456,   457,   458,     0,   459,   460,   461,   462,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,   470,   471,
       0,     0,     0,   472,     0,     0,   473,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
     500,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,   508,   509,     0,     0,   510,     0,     0,   511,     0,
     512,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,   525,     0,   526,   527,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,   168,     0,   169,   170,   171,   172,
     173,   174,   175,   176,   177,     0,   178,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,   185,   186,     0,     0,   187,     0,     0,
     188,   189,     0,   190,   191,     0,   192,   193,     0,   194,
     195,   196,   197,   198,   199,     0,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
     233,     0,     0,     0,  3653,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   242,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,   247,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,   259,
     260,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,     0,   267,   268,   269,     0,     0,   270,     0,     0,
       0,   271,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,   280,   281,     0,   282,     0,     0,   283,
     284,   285,     0,   286,     0,     0,     0,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,   299,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,     0,     0,     0,   305,     0,     0,   306,   307,
     308,     0,     0,   309,     0,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,     0,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,   370,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   379,     0,   380,   381,     0,     0,     0,
       0,     0,     0,     0,     0,   382,   383,   384,     0,     0,
     385,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,     0,     0,   397,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,   422,   423,   424,     0,     0,   425,     0,
     426,     0,   427,   428,     0,   429,   430,     0,   431,     0,
     432,     0,     0,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,     0,   445,   446,     0,     0,
       0,   447,   448,   449,   450,     0,     0,     0,   451,     0,
       0,     0,   452,     0,   453,   454,   455,   456,   457,   458,
       0,   459,   460,   461,   462,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,   470,   471,     0,     0,     0,   472,
       0,     0,   473,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,   500,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,   508,   509,     0,
       0,   510,     0,     0,   511,     0,   512,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,     0,     0,     0,     0,   524,   525,     0,   526,
     527,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
     168,     0,   169,   170,   171,   172,   173,   174,   175,   176,
     177,     0,   178,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,   185,
     186,     0,     0,   187,     0,     0,   188,   189,     0,   190,
     191,     0,   192,   193,     0,   194,   195,   196,   197,   198,
     199,     0,   200,   201,   202,   203,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,   233,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   242,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
     247,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,   259,   260,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,     0,   267,   268,
     269,     0,     0,   270,     0,     0,     0,   271,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,   280,
     281,     0,   282,     0,     0,   283,   284,   285,     0,   286,
       0,     0,     0,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,   299,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,     0,     0,
       0,   305,     0,     0,   306,   307,   308,     0,     0,   309,
       0,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,     0,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,   370,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   379,
       0,   380,   381,     0,     0,     0,     0,     0,     0,     0,
       0,   382,   383,   384,     0,     0,   385,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
       0,     0,   397,   398,   399,  4574,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,   422,
     423,   424,     0,     0,   425,     0,   426,     0,   427,   428,
       0,   429,   430,     0,   431,     0,   432,     0,     0,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,     0,   445,   446,     0,     0,     0,   447,   448,   449,
     450,     0,     0,     0,   451,     0,     0,     0,   452,     0,
     453,   454,   455,   456,   457,   458,     0,   459,   460,   461,
     462,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
     470,   471,     0,     0,     0,   472,     0,     0,   473,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,   500,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,   508,   509,     0,     0,   510,     0,     0,
     511,     0,   512,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,     0,     0,
       0,     0,   524,   525,     0,   526,   527,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,   168,     0,   169,   170,
     171,   172,   173,   174,   175,   176,   177,     0,   178,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,   185,   186,     0,     0,   187,
       0,     0,   188,   189,     0,   190,   191,     0,   192,   193,
       0,   194,   195,   196,   197,   198,   199,     0,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,   233,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   242,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,   247,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,   259,   260,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,     0,   267,   268,   269,     0,     0,   270,
       0,     0,     0,   271,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,   280,   281,     0,   282,     0,
       0,   283,   284,   285,     0,   286,     0,     0,     0,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,   299,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,     0,     0,     0,   305,     0,     0,
     306,   307,   308,     0,     0,   309,     0,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,     0,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,   370,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   379,     0,   380,   381,     0,
       0,     0,     0,     0,     0,     0,     0,   382,   383,   384,
       0,     0,   385,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,     0,     0,   397,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,   422,   423,   424,     0,     0,
     425,     0,   426,     0,   427,   428,     0,   429,   430,     0,
     431,     0,   432,     0,     0,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,     0,   445,   446,
       0,     0,     0,   447,   448,   449,   450,     0,     0,     0,
     451,     0,     0,     0,   452,     0,   453,   454,   455,   456,
     457,   458,     0,   459,   460,   461,   462,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,   470,   471,     0,     0,
       0,   472,     0,     0,   473,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,   500,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,   508,
     509,     0,     0,   510,     0,     0,   511,     0,   512,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,     0,     0,     0,     0,   524,   525,
       0,   526,   527,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,   168,     0,   169,   170,   171,   172,   173,   174,
     175,   176,   177,     0,   178,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,   185,   186,     0,     0,   187,     0,     0,   188,   189,
       0,   190,   191,     0,   192,   193,     0,   194,   195,   196,
     197,   198,   199,     0,   200,   201,   202,   203,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,   233,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   242,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,   247,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,   259,   260,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,     0,
     267,  2000,   269,     0,     0,   270,     0,     0,     0,   271,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,   280,   281,     0,   282,     0,     0,   283,   284,   285,
       0,   286,     0,     0,     0,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,   299,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
       0,     0,     0,   305,     0,     0,   306,   307,   308,     0,
       0,   309,     0,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,     0,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,  2001,   368,   369,     0,     0,     0,   370,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   379,     0,   380,   381,     0,     0,     0,     0,     0,
       0,     0,     0,   382,   383,   384,     0,     0,   385,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,     0,     0,   397,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,   422,   423,   424,     0,     0,   425,     0,   426,     0,
     427,   428,     0,   429,   430,     0,   431,     0,   432,     0,
       0,   433,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,     0,   445,   446,     0,     0,     0,   447,
     448,   449,   450,     0,     0,     0,   451,     0,     0,     0,
     452,     0,   453,   454,   455,   456,   457,   458,     0,   459,
     460,   461,   462,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,   470,   471,     0,     0,     0,   472,     0,     0,
     473,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,   500,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,   508,   509,     0,     0,   510,
       0,     0,   511,     0,   512,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
       0,     0,     0,     0,   524,   525,     0,   526,   527,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,     0,     0,
     169,   170,   171,   172,   173,   174,   175,   176,     0,     0,
     923,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,     0,     0,     0,
       0,   187,     7,     0,   188,   189,     0,   190,     0,     0,
       0,     0,     0,   194,   195,   196,   924,   198,   199,     0,
     200,   201,     0,     0,     0,     0,     0,     0,   207,     0,
     209,     0,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,     0,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,     0,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,     0,     0,     0,
     243,   244,   245,     0,  -338,  -338,   246,     0,  -338,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,     0,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   925,   267,   268,   269,     0,
       0,     0,     0,     0,     0,     0,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,     0,   281,     0,
     282,     0,     0,     0,   284,   285,     0,     0,     0,     0,
       0,     0,   288,     0,     0,     0,   289,   290,   291,   292,
     293,    26,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,     0,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,   926,     0,     0,   305,
       0,     0,     0,   307,   308,     0,     0,   309,   927,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
      32,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,     0,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   928,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,     0,     0,     0,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,     0,     0,
       0,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,     0,     0,   422,     0,   424,
      41,     0,   425,     0,     0,     0,   427,     0,     0,   429,
     430,     0,   431,   929,   432,     0,     0,   433,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   443,   444,     0,
     445,     0,     0,     0,     0,   447,   448,   449,     0,     0,
       0,     0,   451,     0,     0,     0,     0,     0,     0,   454,
       0,     0,   457,   458,     0,   459,     0,   461,     0,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,     0,   471,
       0,     0,     0,   472,     0,     0,     0,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
       0,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,     0,     0,     0,     0,   510,     0,     0,   511,     0,
       0,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,    60,     0,     0,     0,
     524,     0,     0,   526,     0,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,   169,   170,   171,   172,
     173,   174,   175,   176,     0,     0,   923,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,     0,     0,     0,     0,   187,     7,     0,
     188,   189,     0,   190,     0,     0,     0,     0,     0,   194,
     195,   196,   924,   198,   199,     0,   200,   201,     0,     0,
       0,     0,     0,     0,   207,     0,   209,     0,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,     0,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
       0,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,     0,     0,     0,   243,   244,   245,     0,
    -358,     0,   246,     0,  -358,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,     0,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   925,   267,   268,   269,     0,     0,     0,     0,     0,
       0,     0,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,     0,   281,     0,   282,     0,     0,     0,
     284,   285,     0,     0,     0,     0,     0,     0,   288,     0,
       0,     0,   289,   290,   291,   292,   293,    26,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,     0,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   926,     0,     0,   305,     0,     0,     0,   307,
     308,     0,     0,   309,   927,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,    32,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,     0,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   928,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,     0,     0,
       0,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,     0,     0,     0,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,     0,     0,   422,     0,   424,    41,     0,   425,     0,
       0,     0,   427,     0,     0,   429,   430,     0,   431,   929,
     432,     0,     0,   433,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   443,   444,     0,   445,     0,     0,     0,
       0,   447,   448,   449,     0,     0,     0,     0,   451,     0,
       0,     0,     0,     0,     0,   454,     0,     0,   457,   458,
       0,   459,     0,   461,     0,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,     0,   471,     0,     0,     0,   472,
       0,     0,     0,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,     0,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,     0,     0,     0,
       0,   510,     0,     0,   511,     0,     0,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
    -358,     0,    60,     0,     0,     0,   524,     0,     0,   526,
       0,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   169,   170,   171,   172,   173,   174,   175,   176,
       0,     0,   923,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,     0,
       0,     0,     0,   187,     7,     0,   188,   189,     0,   190,
       0,     0,     0,     0,     0,   194,   195,   196,   924,   198,
     199,     0,   200,   201,     0,     0,     0,     0,     0,     0,
     207,     0,   209,     0,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,     0,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,     0,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,  -355,     0,   246,     0,
    -355,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,  -355,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,  1439,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,     0,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   925,   267,   268,   269,     0,     0,     0,
       0,     0,     0,     0,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,     0,   281,     0,   282,     0,
       0,     0,   284,   285,     0,     0,     0,     0,     0,     0,
     288,     0,     0,     0,   289,   290,   291,   292,   293,    26,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,     0,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,   926,     0,     0,   305,     0,     0,
       0,   307,   308,     0,     0,   309,   927,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,    32,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,     0,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   928,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
       0,     0,     0,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,     0,     0,     0,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,     0,     0,   422,     0,   424,    41,     0,
     425,     0,     0,     0,   427,     0,     0,   429,   430,     0,
     431,   929,   432,     0,     0,   433,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   443,   444,     0,   445,     0,
       0,     0,     0,   447,   448,   449,     0,     0,     0,     0,
     451,     0,     0,     0,     0,     0,     0,   454,     0,     0,
     457,   458,     0,   459,     0,   461,     0,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,     0,   471,     0,     0,
       0,   472,     0,     0,     0,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,     0,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,     0,
       0,     0,     0,   510,     0,     0,   511,     0,     0,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,    60,     0,     0,     0,   524,     0,
       0,   526,     0,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,     0,     0,   169,   170,   171,   172,   173,   174,
     175,   176,     0,     0,   923,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,     0,     0,     0,     0,   187,     7,     0,   188,   189,
       0,   190,     0,     0,     0,     0,     0,   194,   195,   196,
     924,   198,   199,     0,   200,   201,     0,     0,     0,     0,
       0,     0,   207,     0,   209,     0,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,     0,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,     0,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,     0,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,  -360,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,     0,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   925,
     267,   268,   269,     0,     0,     0,     0,     0,     0,     0,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,     0,   281,     0,   282,     0,     0,     0,   284,   285,
       0,     0,     0,     0,     0,     0,   288,     0,     0,     0,
     289,   290,   291,   292,   293,    26,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,     0,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
     926,     0,     0,   305,     0,     0,     0,   307,   308,     0,
       0,   309,   927,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,    32,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,     0,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   928,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,     0,     0,     0,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,     0,     0,     0,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,     0,
       0,   422,     0,   424,    41,     0,   425,     0,     0,     0,
     427,     0,     0,   429,   430,     0,   431,   929,   432,     0,
       0,   433,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   443,   444,     0,   445,     0,     0,     0,     0,   447,
     448,   449,     0,     0,     0,     0,   451,     0,     0,     0,
       0,     0,     0,   454,     0,     0,   457,   458,     0,   459,
       0,   461,     0,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,     0,   471,     0,     0,     0,   472,     0,     0,
       0,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,     0,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,     0,     0,     0,     0,   510,
       0,     0,   511,     0,     0,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
      60,     0,     0,     0,   524,     0,     0,   526,     0,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,     0,     0,
     169,   170,   171,   172,   173,   174,   175,   176,     0,     0,
     923,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,     0,     0,     0,
       0,   187,     7,     0,   188,   189,     0,   190,     0,     0,
       0,     0,     0,   194,   195,   196,   924,   198,   199,     0,
     200,   201,     0,     0,     0,     0,     0,     0,   207,     0,
     209,     0,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,     0,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,     0,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,     0,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,  3157,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,     0,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   925,   267,   268,   269,     0,
       0,     0,     0,     0,     0,     0,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,     0,   281,     0,
     282,     0,     0,     0,   284,   285,     0,     0,     0,     0,
       0,     0,   288,     0,     0,     0,   289,   290,   291,   292,
     293,    26,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,     0,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,   926,     0,     0,   305,
       0,     0,     0,   307,   308,     0,     0,   309,   927,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
      32,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,     0,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,   928,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,     0,     0,     0,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,     0,     0,
       0,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,     0,     0,   422,     0,   424,
      41,     0,   425,     0,     0,     0,   427,     0,     0,   429,
     430,     0,   431,   929,   432,     0,     0,   433,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   443,   444,     0,
     445,     0,     0,     0,     0,   447,   448,   449,     0,     0,
       0,     0,   451,     0,     0,     0,     0,     0,     0,   454,
       0,     0,   457,   458,     0,   459,     0,   461,     0,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,     0,   471,
       0,     0,     0,   472,     0,     0,     0,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
       0,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,     0,     0,     0,     0,   510,     0,     0,   511,     0,
       0,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,    60,     0,     0,     0,
     524,     0,     0,   526,     0,   528,     0,   159,   529,   160,
     161,   162,   163,   164,   165,     0,     0,   166,     0,     0,
       0,   167,     0,     0,     0,     0,   169,   170,   171,   172,
     173,   174,   175,   176,     0,     0,   923,     0,     0,     0,
     179,     0,     0,     0,   180,     0,     0,   181,   182,   183,
       0,   184,     0,     0,     0,     0,     0,   187,     7,     0,
     188,   189,     0,   190,     0,     0,     0,     0,     0,   194,
     195,   196,   924,   198,   199,     0,   200,   201,     0,     0,
       0,     0,     0,     0,   207,     0,   209,     0,   211,   212,
     213,   214,     0,   215,   216,     0,   217,   218,   219,     0,
     221,     0,   222,     0,     0,   223,     0,     0,   224,     0,
     225,     0,     0,   226,     0,   227,     0,     0,     0,   228,
     229,   230,     0,     0,   231,     0,     0,     0,     0,   232,
       0,     0,     0,     0,     0,   234,     0,   235,     0,     0,
       0,     0,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,     0,     0,     0,   243,   244,   245,     0,
       0,     0,   246,     0,  3304,   248,     0,   249,   250,   251,
       0,   252,   253,     0,   254,   255,   256,   257,   258,     0,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   925,   267,   268,   269,     0,     0,     0,     0,     0,
       0,     0,   272,     0,   273,     0,   274,     0,   275,   276,
     277,   278,   279,     0,   281,     0,   282,     0,     0,     0,
     284,   285,     0,     0,     0,     0,     0,     0,   288,     0,
       0,     0,   289,   290,   291,   292,   293,    26,     0,     0,
     294,   295,   296,     0,     0,   297,     0,     0,     0,     0,
     298,     0,     0,     0,     0,   300,     0,   301,   302,     0,
     303,   304,   926,     0,     0,   305,     0,     0,     0,   307,
     308,     0,     0,   309,   927,     0,   310,   311,     0,     0,
       0,     0,     0,   312,   313,     0,   314,     0,   315,     0,
     316,   317,     0,     0,     0,     0,    32,     0,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,     0,   334,   335,   336,   337,     0,
     338,   339,   340,   341,     0,   342,   343,   344,     0,     0,
       0,     0,   345,   346,   347,   348,   349,   350,     0,     0,
     351,   352,     0,   353,     0,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,   365,
       0,     0,   366,   367,   368,   369,     0,     0,     0,     0,
     371,     0,     0,     0,   372,     0,   373,   374,   375,     0,
     376,   377,   378,   928,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   383,   384,     0,     0,
       0,     0,   386,     0,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,     0,     0,     0,   398,   399,     0,
     400,     0,   401,   402,   403,   404,   405,     0,   406,   407,
     408,     0,     0,   409,     0,     0,     0,   410,   411,   412,
     413,   414,     0,     0,   415,   416,   417,   418,   419,     0,
     420,     0,     0,   422,     0,   424,    41,     0,   425,     0,
       0,     0,   427,     0,     0,   429,   430,     0,   431,   929,
     432,     0,     0,   433,     0,   435,   436,   437,   438,   439,
     440,   441,     0,   443,   444,     0,   445,     0,     0,     0,
       0,   447,   448,   449,     0,     0,     0,     0,   451,     0,
       0,     0,     0,     0,     0,   454,     0,     0,   457,   458,
       0,   459,     0,   461,     0,   463,   464,     0,     0,     0,
       0,     0,     0,   465,   466,     0,   467,     0,     0,   468,
       0,     0,     0,   469,     0,   471,     0,     0,     0,   472,
       0,     0,     0,   474,     0,   475,   476,   477,   478,   479,
     480,     0,     0,   481,   482,   483,   484,     0,   485,   486,
       0,     0,   487,   488,   489,   490,     0,     0,   491,   492,
       0,   493,   494,   495,   496,     0,     0,     0,     0,     0,
     497,   498,   499,     0,     0,     0,     0,   501,   502,   503,
       0,   504,   505,     0,   506,   507,     0,     0,     0,     0,
       0,   510,     0,     0,   511,     0,     0,     0,   513,   514,
       0,     0,     0,     0,     0,     0,   515,     0,     0,   516,
       0,     0,     0,   517,   518,   519,   520,   521,   522,   523,
       0,     0,    60,     0,     0,     0,   524,     0,     0,   526,
       0,   528,     0,   159,   529,   160,   161,   162,   163,   164,
     165,     0,     0,   166,     0,     0,     0,   167,     0,     0,
       0,     0,   169,   170,   171,   172,   173,   174,   175,   176,
       0,     0,   923,     0,     0,     0,   179,     0,     0,     0,
     180,     0,     0,   181,   182,   183,     0,   184,     0,     0,
       0,     0,     0,   187,     7,     0,   188,   189,     0,   190,
       0,     0,     0,     0,     0,   194,   195,   196,   924,   198,
     199,     0,   200,   201,     0,     0,     0,     0,     0,     0,
     207,     0,   209,     0,   211,   212,   213,   214,     0,   215,
     216,     0,   217,   218,   219,     0,   221,     0,   222,     0,
       0,   223,     0,     0,   224,     0,   225,     0,     0,   226,
       0,   227,     0,     0,     0,   228,   229,   230,     0,     0,
     231,     0,     0,     0,     0,   232,     0,     0,     0,     0,
       0,   234,     0,   235,     0,     0,     0,     0,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,   243,   244,   245,     0,     0,     0,   246,     0,
    -342,   248,     0,   249,   250,   251,     0,   252,   253,     0,
     254,   255,   256,   257,   258,     0,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   925,   267,   268,
     269,     0,     0,     0,     0,     0,     0,     0,   272,     0,
     273,     0,   274,     0,   275,   276,   277,   278,   279,     0,
     281,     0,   282,     0,     0,     0,   284,   285,     0,     0,
       0,     0,     0,     0,   288,     0,     0,     0,   289,   290,
     291,   292,   293,    26,     0,     0,   294,   295,   296,     0,
       0,   297,     0,     0,     0,     0,   298,     0,     0,     0,
       0,   300,     0,   301,   302,     0,   303,   304,   926,     0,
       0,   305,     0,     0,     0,   307,   308,     0,     0,   309,
     927,     0,   310,   311,     0,     0,     0,     0,     0,   312,
     313,     0,   314,     0,   315,     0,   316,   317,     0,     0,
       0,     0,    32,     0,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
       0,   334,   335,   336,   337,     0,   338,   339,   340,   341,
       0,   342,   343,   344,     0,     0,     0,     0,   345,   346,
     347,   348,   349,   350,     0,     0,   351,   352,     0,   353,
       0,   354,     0,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,   365,     0,     0,   366,   367,
     368,   369,     0,     0,     0,     0,   371,     0,     0,     0,
     372,     0,   373,   374,   375,     0,   376,   377,   378,   928,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   383,   384,     0,     0,     0,     0,   386,     0,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
       0,     0,     0,   398,   399,     0,   400,     0,   401,   402,
     403,   404,   405,     0,   406,   407,   408,     0,     0,   409,
       0,     0,     0,   410,   411,   412,   413,   414,     0,     0,
     415,   416,   417,   418,   419,     0,   420,     0,     0,   422,
       0,   424,    41,     0,   425,     0,     0,     0,   427,     0,
       0,   429,   430,     0,   431,   929,   432,     0,     0,   433,
       0,   435,   436,   437,   438,   439,   440,   441,     0,   443,
     444,     0,   445,     0,     0,     0,     0,   447,   448,   449,
       0,     0,     0,     0,   451,     0,     0,     0,     0,     0,
       0,   454,     0,     0,   457,   458,     0,   459,     0,   461,
       0,   463,   464,     0,     0,     0,     0,     0,     0,   465,
     466,     0,   467,     0,     0,   468,     0,     0,     0,   469,
       0,   471,     0,     0,     0,   472,     0,     0,     0,   474,
       0,   475,   476,   477,   478,   479,   480,     0,     0,   481,
     482,   483,   484,     0,   485,   486,     0,     0,   487,   488,
     489,   490,     0,     0,   491,   492,     0,   493,   494,   495,
     496,     0,     0,     0,     0,     0,   497,   498,   499,     0,
       0,     0,     0,   501,   502,   503,     0,   504,   505,     0,
     506,   507,     0,     0,     0,     0,     0,   510,     0,     0,
     511,     0,     0,     0,   513,   514,     0,     0,     0,     0,
       0,     0,   515,     0,     0,   516,     0,     0,     0,   517,
     518,   519,   520,   521,   522,   523,     0,     0,    60,     0,
       0,     0,   524,     0,     0,   526,     0,   528,     0,   159,
     529,   160,   161,   162,   163,   164,   165,     0,     0,   166,
       0,     0,     0,   167,     0,     0,     0,     0,   169,   170,
     171,   172,   173,   174,   175,   176,     0,     0,   923,     0,
       0,     0,   179,     0,     0,     0,   180,     0,     0,   181,
     182,   183,     0,   184,     0,     0,     0,     0,     0,   187,
       7,     0,   188,   189,     0,   190,     0,     0,     0,     0,
       0,   194,   195,   196,   924,   198,   199,     0,   200,   201,
       0,     0,     0,     0,     0,     0,   207,     0,   209,     0,
     211,   212,   213,   214,     0,   215,   216,     0,   217,   218,
     219,     0,   221,     0,   222,     0,     0,   223,     0,     0,
     224,     0,   225,     0,     0,   226,     0,   227,     0,     0,
       0,   228,   229,   230,     0,     0,   231,     0,     0,     0,
       0,   232,     0,     0,     0,     0,     0,   234,     0,   235,
       0,     0,     0,     0,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,   243,   244,
     245,     0,     0,     0,   246,     0,     0,   248,     0,   249,
     250,   251,     0,   252,   253,     0,   254,   255,   256,   257,
     258,     0,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   925,   267,   268,   269,     0,     0,     0,
       0,     0,     0,     0,   272,     0,   273,     0,   274,     0,
     275,   276,   277,   278,   279,     0,   281,     0,   282,     0,
       0,     0,   284,   285,     0,     0,     0,     0,     0,     0,
     288,     0,     0,     0,   289,   290,   291,   292,   293,    26,
       0,     0,   294,   295,   296,     0,     0,   297,     0,     0,
       0,     0,   298,     0,     0,     0,     0,   300,     0,   301,
     302,     0,   303,   304,   926,     0,     0,   305,     0,     0,
       0,   307,   308,     0,     0,   309,   927,     0,   310,   311,
       0,     0,     0,     0,     0,   312,   313,     0,   314,     0,
     315,     0,   316,   317,     0,     0,     0,     0,    32,     0,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,     0,   334,   335,   336,
     337,     0,   338,   339,   340,   341,     0,   342,   343,   344,
       0,     0,     0,     0,   345,   346,   347,   348,   349,   350,
       0,     0,   351,   352,     0,   353,     0,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,   365,     0,     0,   366,   367,   368,   369,     0,     0,
       0,     0,   371,     0,     0,     0,   372,     0,   373,   374,
     375,     0,   376,   377,   378,   928,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   383,   384,
       0,     0,     0,     0,   386,     0,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,     0,     0,     0,   398,
     399,     0,   400,     0,   401,   402,   403,   404,   405,     0,
     406,   407,   408,     0,     0,   409,     0,     0,     0,   410,
     411,   412,   413,   414,     0,     0,   415,   416,   417,   418,
     419,     0,   420,     0,     0,   422,     0,   424,    41,     0,
     425,     0,     0,     0,   427,     0,     0,   429,   430,     0,
     431,   929,   432,     0,     0,   433,     0,   435,   436,   437,
     438,   439,   440,   441,     0,   443,   444,     0,   445,     0,
       0,     0,     0,   447,   448,   449,     0,     0,     0,     0,
     451,     0,     0,     0,     0,     0,     0,   454,     0,     0,
     457,   458,     0,   459,     0,   461,     0,   463,   464,     0,
       0,     0,     0,     0,     0,   465,   466,     0,   467,     0,
       0,   468,     0,     0,     0,   469,     0,   471,     0,     0,
       0,   472,     0,     0,     0,   474,     0,   475,   476,   477,
     478,   479,   480,     0,     0,   481,   482,   483,   484,     0,
     485,   486,     0,     0,   487,   488,   489,   490,     0,     0,
     491,   492,     0,   493,   494,   495,   496,     0,     0,     0,
       0,     0,   497,   498,   499,     0,     0,     0,     0,   501,
     502,   503,     0,   504,   505,     0,   506,   507,     0,     0,
       0,     0,     0,   510,     0,     0,   511,     0,     0,     0,
     513,   514,     0,     0,     0,     0,     0,     0,   515,     0,
       0,   516,     0,     0,     0,   517,   518,   519,   520,   521,
     522,   523,     0,     0,    60,     0,     0,     0,   524,     0,
       0,   526,     0,   528,     0,   159,   529,   160,   161,   162,
     163,   164,   165,     0,     0,   166,     0,     0,     0,   167,
       0,     0,     0,     0,   169,   170,   171,   172,   173,   174,
     175,   176,     0,     0,   923,     0,     0,     0,   179,     0,
       0,     0,   180,     0,     0,   181,   182,   183,     0,   184,
       0,     0,     0,     0,     0,   187,     7,     0,   188,   189,
       0,   190,     0,     0,     0,     0,     0,   194,   195,   196,
     924,   198,   199,     0,   200,   201,     0,     0,     0,     0,
       0,     0,   207,     0,   209,     0,   211,   212,   213,   214,
       0,   215,   216,     0,   217,   218,   219,     0,   221,     0,
     222,     0,     0,   223,     0,     0,   224,     0,   225,     0,
       0,   226,     0,   227,     0,     0,     0,   228,   229,   230,
       0,     0,   231,     0,     0,     0,     0,   232,     0,     0,
       0,     0,     0,   234,     0,   235,     0,     0,     0,     0,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,     0,     0,     0,   243,   244,   245,     0,     0,     0,
     246,     0,     0,   248,     0,   249,   250,   251,     0,   252,
     253,     0,   254,   255,   256,   257,   258,     0,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   925,
     267,   268,   269,     0,     0,     0,     0,     0,     0,     0,
     272,     0,   273,     0,   274,     0,   275,   276,   277,   278,
     279,     0,   281,     0,   282,     0,     0,     0,   284,   285,
       0,     0,     0,     0,     0,     0,   288,     0,     0,     0,
     289,   290,   291,   292,   293,    26,     0,     0,   294,   295,
     296,     0,     0,   297,     0,     0,     0,     0,   298,     0,
       0,     0,     0,   300,     0,   301,   302,     0,   303,   304,
     926,     0,     0,   305,     0,     0,     0,   307,   308,     0,
       0,   309,   927,     0,   310,   311,     0,     0,     0,     0,
       0,   312,   313,     0,   314,     0,   315,     0,   316,   317,
       0,     0,     0,     0,    32,     0,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,     0,   334,   335,   336,   337,     0,   338,   339,
     340,   341,     0,   342,   343,   344,     0,     0,     0,     0,
     345,   346,   347,   348,   349,   350,     0,     0,   351,   352,
       0,   353,     0,   354,     0,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,   365,     0,     0,
     366,   367,   368,   369,     0,     0,     0,     0,   371,     0,
       0,     0,   372,     0,   373,   374,   375,     0,   376,   377,
     378,   928,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   383,   384,     0,     0,     0,     0,
     386,     0,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,     0,     0,     0,   398,   399,     0,   400,     0,
     401,   402,   403,   404,   405,     0,   406,   407,   408,     0,
       0,   409,     0,     0,     0,   410,   411,   412,   413,   414,
       0,     0,   415,   416,   417,   418,   419,     0,   420,     0,
       0,   422,     0,   424,    41,     0,   425,     0,     0,     0,
     427,     0,     0,   429,   430,     0,   431,   929,   432,     0,
       0,   433,     0,   435,   436,   437,   438,   439,   440,   441,
       0,   443,   444,     0,   445,     0,     0,     0,     0,   447,
     448,   449,     0,     0,     0,     0,   451,     0,     0,     0,
       0,     0,     0,   454,     0,     0,   457,   458,     0,   459,
       0,   461,     0,   463,   464,     0,     0,     0,     0,     0,
       0,   465,   466,     0,   467,     0,     0,   468,     0,     0,
       0,   469,     0,   471,     0,     0,     0,   472,     0,     0,
       0,   474,     0,   475,   476,   477,   478,   479,   480,     0,
       0,   481,   482,   483,   484,     0,   485,   486,     0,     0,
     487,   488,   489,   490,     0,     0,   491,   492,     0,   493,
     494,   495,   496,     0,     0,     0,     0,     0,   497,   498,
     499,     0,     0,     0,     0,   501,   502,   503,     0,   504,
     505,     0,   506,   507,     0,     0,     0,     0,     0,   510,
       0,     0,  1466,     0,     0,     0,   513,   514,     0,     0,
       0,     0,     0,     0,   515,     0,     0,   516,     0,     0,
       0,   517,   518,   519,   520,   521,   522,   523,     0,     0,
      60,     0,     0,     0,   524,     0,     0,   526,     0,   528,
       0,   159,   529,   160,   161,   162,   163,   164,   165,     0,
       0,   166,     0,     0,     0,   167,     0,     0,     0,     0,
     169,   170,   171,   172,   173,   174,   175,   176,     0,     0,
       0,     0,     0,     0,   179,     0,     0,     0,   180,     0,
       0,   181,   182,   183,     0,   184,     0,     0,     0,     0,
       0,   187,     0,     0,   188,   189,     0,   190,     0,     0,
       0,     0,     0,   194,   195,   196,     0,   198,   199,     0,
     200,   201,     0,     0,     0,     0,     0,     0,   207,     0,
     209,     0,   211,   212,   213,   214,     0,   215,   216,     0,
     217,   218,   219,     0,   221,     0,   222,     0,     0,   223,
       0,     0,   224,     0,   225,     0,     0,   226,     0,   227,
       0,     0,     0,   228,   229,   230,     0,     0,   231,     0,
       0,     0,     0,   232,     0,     0,     0,     0,     0,   234,
       0,   235,     0,     0,     0,     0,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,     0,     0,     0,
     243,   244,   245,     0,     0,     0,   246,     0,     0,   248,
       0,   249,   250,   251,     0,   252,   253,     0,   254,   255,
     256,   257,   258,     0,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,     0,   267,   268,   269,     0,
       0,     0,     0,     0,     0,     0,   272,     0,   273,     0,
     274,     0,   275,   276,   277,   278,   279,     0,   281,     0,
     282,     0,     0,     0,   284,   285,     0,     0,     0,     0,
       0,     0,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,     0,   294,   295,   296,     0,     0,   297,
       0,     0,     0,     0,   298,     0,     0,     0,     0,   300,
       0,   301,   302,     0,   303,   304,     0,     0,     0,   305,
       0,     0,     0,   307,   308,     0,     0,   309,     0,     0,
     310,   311,     0,     0,     0,     0,     0,   312,   313,     0,
     314,     0,   315,     0,   316,   317,     0,     0,     0,     0,
       0,     0,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,     0,   334,
     335,   336,   337,     0,   338,   339,   340,   341,     0,   342,
     343,   344,     0,     0,     0,     0,   345,   346,   347,   348,
     349,   350,     0,     0,   351,   352,     0,   353,     0,   354,
       0,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,   365,     0,     0,   366,   367,   368,   369,
       0,     0,     0,     0,   371,     0,     0,     0,   372,     0,
     373,   374,   375,     0,   376,   377,   378,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   384,     0,     0,     0,     0,   386,     0,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,     0,     0,
       0,   398,   399,     0,   400,     0,   401,   402,   403,   404,
     405,     0,   406,   407,   408,     0,     0,   409,     0,     0,
       0,   410,   411,   412,   413,   414,     0,     0,   415,   416,
     417,   418,   419,     0,   420,     0,     0,   422,     0,   424,
       0,     0,   425,     0,     0,     0,   427,     0,     0,   429,
     430,     0,   431,     0,   432,     0,     0,   433,     0,   435,
     436,   437,   438,   439,   440,   441,     0,   443,   444,     0,
     445,     0,     0,     0,     0,   447,   448,   449,     0,     0,
       0,     0,   451,     0,     0,     0,     0,     0,     0,   454,
       0,     0,   457,   458,     0,   459,     0,   461,     0,   463,
     464,     0,     0,     0,     0,     0,     0,   465,   466,     0,
     467,     0,     0,   468,     0,     0,     0,   469,     0,   471,
       0,     0,     0,   472,     0,     0,     0,   474,     0,   475,
     476,   477,   478,   479,   480,     0,     0,   481,   482,   483,
     484,     0,   485,   486,     0,     0,   487,   488,   489,   490,
       0,     0,   491,   492,     0,   493,   494,   495,   496,     0,
       0,     0,     0,     0,   497,   498,   499,     0,     0,     0,
       0,   501,   502,   503,     0,   504,   505,     0,   506,   507,
       0,     0,     0,     0,     0,   510,     0,     0,   511,     0,
       0,     0,   513,   514,     0,     0,     0,     0,     0,     0,
     515,     0,     0,   516,     0,     0,     0,   517,   518,   519,
     520,   521,   522,   523,     0,     0,     0,     0,     0,     0,
     524,     0,     0,   526,     0,   528,     0,     0,   529
};

static const yytype_int16 yycheck[] =
{
       6,     3,   143,   609,   151,   632,  1116,   608,   609,    24,
     930,   986,    21,   641,    20,  1285,   644,  1213,    24,  1506,
    1232,  1035,   608,  1285,    33,   592,     6,  1379,  1013,  1014,
      36,    40,  1738,   140,     4,   547,     0,   661,    44,  1024,
    1507,    47,   962,  1057,  1185,  1256,    52,  2264,   661,  2107,
    2108,   549,   550,    59,  1507,   553,   554,   555,  2264,   863,
     558,   559,   560,   766,  1033,  1379,  1547,   582,  2361,    45,
    1427,   718,  2502,  1307,   566,   926,   927,   592,  3070,  2589,
    2373,  1315,  1120,  1450,  2786,  1709,  3244,  1707,  1120,  1058,
     566,  2854,  1685,  1643,   109,  2003,   959,  1077,  2969,  3084,
    2714,  3576,  1430,   109,  1351,  1316,  1317,  3290,   600,  1320,
    1321,  1322,  1323,  1967,  1325,  1326,  1327,  1328,  1329,  1330,
    1331,  1332,   700,  1620,   600,   703,  3111,  1222,  1675,   135,
    2463,   137,  1576,   139,   140,   141,  2264,   612,   151,  2262,
     615,  1734,  2112,  2374,  3113,   146,  2061,   151,   151,  2752,
    2262,   151,  1596,  2629,  2754,  2720,  3856,   137,  2758,   139,
    1604,  1605,  2638,  3245,  2694,  3443,    13,  2337,  2337,  2769,
    3442,    13,  1152,  2731,  3103,   822,   823,   824,  3909,  3368,
      18,  2781,    17,    18,    20,  2743,  2744,   834,  3715,  3376,
    2895,  2896,  3538,  2743,  2744,    20,  2901,    37,  2903,    50,
      27,    22,    75,    20,    18,    27,    17,    18,   116,  3555,
      17,    18,    21,   164,  2337,    83,    37,   136,  2327,    31,
      13,  1106,  1107,    17,    18,  2337,    67,    39,    84,    13,
      51,  2075,   132,    22,   132,  2459,  2868,    17,    18,    63,
      20,    62,    63,    33,  4140,    17,    18,  1059,  3182,    17,
      18,   111,   201,    17,    18,   198,  2101,  2898,   198,    34,
     204,    22,    27,    49,   164,  1150,   164,  1191,  1192,  1193,
     198,    87,    54,    62,    63,    66,    37,   152,   277,  3657,
     326,    17,    18,   129,  1208,    73,   237,    72,    54,   196,
      51,  4349,    17,    18,    17,    18,    70,   218,    46,   132,
    2254,    62,    63,  2861,  2862,   204,    17,    18,    12,   405,
     371,  2861,  2862,   332,   118,  3661,    67,  1241,    83,   212,
    1244,    73,   379,    17,    18,    59,   164,  3213,   247,   138,
     237,   164,   132,  3943,    17,    18,   471,  3223,   150,   164,
     151,  1265,  1266,    89,   166,  1269,   183,   193,    39,   432,
     381,   387,     9,    17,    18,    17,    18,   486,   237,   437,
     404,    83,  1286,  1287,   170,    24,    20,   495,   237,   867,
     706,    13,    13,   844,    39,  2244,   222,  3852,   408,    17,
      18,    17,    18,  3352,   153,   408,   372,   288,   565,   284,
      13,   284,    17,    18,    22,    13,   446,   556,   565,   597,
     559,   166,  4692,    17,    18,  4695,   197,   201,   609,    37,
      13,   926,   927,   158,   201,   930,   243,  3057,   259,   184,
     172,   243,   530,    51,  4155,  3935,   136,   631,     9,   201,
     586,   136,   144,   219,    62,    63,    37,   241,  1685,   565,
      72,   565,  4139,   584,    17,    18,   292,   962,   160,   241,
    2747,  4148,    33,   609,    11,   659,   564,   658,   659,   566,
     658,  4161,    63,   622,   571,   201,   634,   254,   313,  3109,
      17,    18,    75,   198,   369,   419,  3063,   527,   243,   162,
     657,  1109,   512,  1111,  1112,  1113,  1114,  1734,   389,   512,
     657,  1354,   478,   600,   321,   275,  2635,    17,    18,   321,
      20,    17,    18,   974,   455,   147,   147,   367,   259,    69,
     232,   380,   234,  1623,   592,  4025,   175,   645,  1221,   294,
     419,   565,   363,   859,   147,   371,  4816,   623,   657,   147,
     665,   222,   223,  1236,   191,  1398,   455,  1522,   164,   545,
     664,   263,   247,  1347,   563,    21,   368,  3220,   631,   295,
     556,   386,   495,  3931,   389,  1540,   321,   222,   223,  3227,
     566,   567,  3077,  3078,  3079,   571,   536,   486,   574,  4179,
     370,   590,   679,  3241,  3242,   386,   455,  1052,   389,   636,
      17,    18,   588,   287,    66,  3253,   196,    17,    18,   650,
     511,   428,   386,  1171,   600,   389,  1163,   362,   491,  4657,
     388,  1570,   608,   368,  1573,   575,   386,   355,  1577,   389,
    1579,   657,   618,   589,   386,   559,  3545,   389,   386,   494,
    3549,   389,   386,   659,  2747,   389,   417,   237,  4103,  2110,
     629,  1494,   638,   367,   665,  2747,   388,  1675,  1607,  1608,
    1609,   295,   612,  1675,  3515,   615,   506,   204,  1163,   619,
     386,  2244,   278,   389,   201,   661,   557,   663,   432,   468,
     559,   386,   138,   386,   389,   481,   389,  3177,  3602,  2262,
    3615,  1534,  1319,   679,   689,   386,  1379,  2805,   389,   454,
     462,    75,  3553,   689,   603,   691,  1198,  1199,   529,  1336,
    1937,   631,   386,   479,   700,   389,   462,   703,  2868,  2868,
     706,   608,   645,   386,  1915,   546,   389,   713,  2552,  2061,
     659,   504,   663,  1225,   622,  1926,  3348,   486,  1929,   541,
     504,  1233,   386,  1235,   386,   389,  4622,   389,   540,  3615,
     598,   659,  3290,   589,  2327,  1247,  1248,  1249,   657,  2183,
    1720,  3627,   588,  1255,  2337,  2868,  2970,  2061,   386,   561,
     386,   389,   537,   389,  2863,   862,  2868,  3643,  3644,   576,
     766,   386,   576,   663,   389,   663,    17,    18,    17,    18,
     621,   583,   386,   609,   595,   389,   541,  1355,   432,  1664,
     631,  2689,  1406,  2628,   657,   578,   576,  3974,  4134,  3347,
    1602,  2745,   616,   631,  1714,   546,   637,  3347,   619,    17,
      18,  4532,   624,  4534,  4535,   640,   595,   598,   620,  4336,
     657,  4157,   658,   386,  1909,   657,   389,   657,  4007,   625,
     645,   827,   659,   829,  1748,   663,  3528,   662,   645,   640,
     663,   833,   659,   640,   595,   639,   657,   659,   663,   386,
    2036,   650,   389,  4115,  4122,   609,   640,  2344,   854,   855,
     856,  3933,   858,   859,   860,   630,   862,  1349,   864,   624,
     640,  4133,   419,  2732,   870,   659,   386,  1445,   640,   389,
     386,  1495,   640,   389,   565,   855,   640,   659,   183,   659,
     860,  1685,  1495,   628,   864,   861,   658,  1465,   657,   865,
     658,   659,   661,   603,   659,   659,  1371,  3882,   603,   136,
     565,   907,    17,    18,   640,   537,  1013,   922,  1015,   631,
    1834,  1018,  1019,  3210,  1838,   640,   922,   640,   924,  4650,
    4651,   923,   928,  4654,    61,  3894,  4272,  1034,  1556,   640,
    1734,  2551,  2990,   658,  2640,   658,   659,  3524,  1862,  3612,
      17,    18,  3871,  3872,   504,   960,   640,   658,   659,   386,
    1574,   966,   389,   959,   960,  3641,   386,   640,   440,   389,
     966,  1574,  3101,  3102,   658,  1106,  1107,   595,  1115,   526,
    3535,  2521,  3640,  2881,  4674,  2883,   640,  3922,   640,    35,
    3925,  3926,   636,   953,   377,    91,  3044,   615,   616,   183,
     377,   645,   468,   375,   658,   659,   658,  2244,   608,   202,
    1475,  1007,   640,   629,   640,   277,   402,  1013,    37,  1015,
     247,  3521,  1018,  1019,  4745,   640,  3531,  1645,  1646,  1643,
     658,   659,   658,   659,   581,   261,   640,   421,  1034,  1657,
      17,    18,  1524,   658,   659,   146,  3922,   663,   379,  3925,
    3926,   129,  4742,  3573,   658,   659,   183,  4623,  1524,   377,
     187,  3937,    17,    18,   226,  3760,    54,   869,    17,    18,
    2968,   198,   486,  3280,  3769,   622,   161,   640,  1696,  3545,
     186,  1077,  3637,  3549,  3280,    83,   171,   377,  1679,  4064,
    2327,   466,  1052,   457,  1054,   658,   659,  3210,  3691,   377,
    2337,  4130,  3692,   640,    17,    18,  1102,   278,  3210,  1101,
     377,   280,  1115,   657,   377,    17,    18,  1108,   148,   108,
    1116,  1115,  1115,  4082,    13,  1115,   201,   245,   154,   133,
     640,  3762,   198,   428,   640,  1140,   254,  1103,  1104,  1832,
      17,    18,   258,  2118,  1140,   386,   148,   386,   389,  2732,
     389,   119,   658,  1149,   122,  2769,  1152,  2010,  3379,   961,
    1642,   480,  3280,   164,  2747,  3009,  2703,  2624,  3073,  2626,
    2627,  3131,   556,    27,  2178,  1171,  1181,   258,   386,  1149,
    2208,   389,  4518,  2626,  2627,  1181,  2208,   130,  3348,  3348,
     279,  2044,  2045,   282,   401,   289,   580,   533,  2399,   237,
    2204,  1298,   355,   330,   368,    17,    18,   400,   254,  1714,
    2169,  2568,   559,   640,   292,  2346,   387,  3540,   963,    27,
     640,   287,  4687,  2182,   377,  1221,  2185,  2186,   455,    83,
     331,   277,   659,  4168,   232,  3348,   234,   463,  1335,   659,
    1236,  2559,   449,   657,   428,   295,  3348,  4583,   313,   253,
    2474,    13,  1349,   134,   115,   349,  2690,   295,   147,   486,
      17,    18,  4828,  3958,   370,   263,  3961,    17,    18,    17,
      18,   657,  2840,  3949,   392,   657,   659,   278,  2480,  2481,
    2863,   386,   659,  1380,   389,  2868,   361,   659,   278,  1285,
     665,  1928,  4168,   371,   313,   659,  3991,  3992,  3993,  2269,
     385,   428,  1298,   565,  3999,   636,   475,  2225,  2226,   252,
     503,  4006,   607,   174,   344,    27,   432,  1309,  4050,   386,
      17,    18,   389,   486,  2242,  3956,  3957,    17,    18,  2589,
     184,   427,  3963,  2251,  2252,  3966,  3967,  1082,   204,  1335,
     429,   659,   344,   204,  1340,    17,    18,    17,    18,    17,
      18,   432,  3983,  1349,    17,    18,  1453,    12,  1354,  1355,
      17,    18,   427,  2564,   659,   391,  3997,   629,  2061,   659,
    4001,  4002,  4003,  4004,  4005,   537,   603,     0,   486,   367,
    1948,   659,   432,  1379,  1380,   147,    17,    18,  2473,   243,
     428,  4564,   659,  2880,    90,   441,   659,   387,  2483,   640,
       6,   640,  1398,   565,  2322,  2323,  2324,  2325,  4660,   386,
    1406,  1371,   389,  1418,   295,  1411,   112,  1413,   659,  3029,
     659,  2973,  1418,   607,    17,    18,   597,  1524,  4601,  4602,
     657,   386,   640,  4898,   389,   243,  2696,   386,  1434,   504,
     389,   486,   486,   537,  2696,    17,    18,    17,    18,  1445,
    2244,   659,   659,  3351,    60,   129,   609,  1453,   132,  1419,
     624,    17,    18,  1468,  4493,   164,  4495,   321,  4641,  1465,
    4445,   645,  1468,   386,   462,   133,   389,   583,   133,   564,
    2048,  3021,  3022,  3023,   386,    17,    18,   389,  1134,  1135,
     278,   434,  1957,   599,   657,  2732,    55,  4229,  1494,  1495,
    4232,  3431,  1498,  1377,  2141,  3435,   494,    66,   362,   386,
     588,  1507,   389,   321,   368,  1475,  1647,    17,    18,   193,
    3940,  1517,    17,    18,    17,    18,    17,    18,  1524,  1525,
     545,   243,   659,  2327,  1180,   640,   243,  4290,  1534,  2543,
     658,   556,  3094,  2337,  4526,  1642,   152,   414,   222,   657,
    1546,  1547,   134,   419,   659,  1560,  2132,  1562,   419,  4707,
     174,  1557,  1558,  1559,  1560,  1561,  1562,  4171,  1665,  4173,
     586,  4520,   495,   640,   386,  1571,  1572,   389,  1574,   376,
    2062,  4442,  1578,  4835,  4836,  1682,   636,  1557,  1558,  1559,
     201,  1561,   659,  2211,  1599,   253,  2062,  2215,  2216,   387,
     543,   569,  1572,  1599,   572,  3219,  3220,   404,  1578,   321,
    4363,  4364,   657,   657,   191,   215,   661,  1577,   292,    21,
     650,   651,   652,   653,   654,   655,  2863,  3210,   629,   386,
      46,  2868,   389,  3090,   502,   495,   386,   651,   386,   389,
     251,   389,   224,  2200,   658,  2498,  1642,  1643,   219,   665,
     652,   653,   654,   655,   367,   105,   368,  3225,    17,    18,
     526,   368,   663,   640,  1669,  4165,    17,    18,   133,  1665,
    1666,  1667,  1668,  1669,  2860,  2703,  4368,  3575,  1552,  1553,
    4629,  2703,   659,  3251,  3252,   640,  1682,   541,   586,   386,
     267,   640,   389,   264,  2669,  2200,   386,   371,   559,   389,
    1705,   537,   129,   565,   659,   364,   365,   129,  1704,  1705,
     659,   645,   292,   295,   386,   581,   386,   389,   386,   389,
     581,   389,   645,   386,  1720,   284,   389,   640,  1688,   386,
     651,  3073,   389,   601,   447,   166,   138,   658,   640,   155,
      17,    18,   665,   738,   739,  1741,   659,  1743,    17,    18,
    4354,  2882,    17,    18,  2607,   386,   622,   659,   389,   365,
    3107,   622,  2986,   640,   215,  3348,  4049,   665,   565,  3073,
     624,   193,    17,    18,  2056,   643,   387,    83,   241,    17,
      18,   617,   659,    17,    18,   645,   645,  2697,    17,    18,
     367,   371,   631,   386,   244,   657,   389,    25,  3058,   657,
    2653,   264,  1933,    17,    18,   665,  3058,   665,    17,    18,
     261,   261,   243,   657,   386,   665,   386,   389,   813,   389,
     659,   665,   232,   273,   234,   431,    13,   433,   640,   541,
     386,    17,    18,   389,   541,  2753,  1832,  1833,  2756,  2757,
    2477,  2759,   432,  2818,  2762,  2763,  4346,   659,  2766,   495,
      17,    18,  1949,  2771,   386,    17,    18,   389,  2776,  2777,
    2778,  2779,  2780,   453,  3050,   292,  2784,  2785,  2370,  2787,
     292,    17,    18,  2375,   628,  2793,  2794,  2795,  2796,   874,
    3490,  2799,  2800,   640,  2802,   198,   386,  2389,   201,   389,
     640,   386,   640,   386,   389,   386,   389,  1893,   389,   489,
    2031,   219,   659,    17,    18,   355,    18,  2521,   215,   659,
    2524,   659,   624,   455,   588,   254,  2826,   624,    17,    18,
     235,  2423,    17,    18,    17,    18,   232,   377,   234,    17,
      18,  1936,   136,    17,    18,   274,   387,   368,  2732,  1935,
    1936,    17,    18,   640,   371,   631,   264,   235,  2866,   371,
     640,   186,  1948,  1949,   215,    17,    18,   263,    20,   142,
     147,   381,   659,    17,    18,  2062,  1962,   115,   640,   659,
     640,  1967,   640,   659,   287,   568,  1972,   640,    50,  1975,
    2077,  1986,  1987,   640,  1989,   251,   658,  2544,  2490,   659,
    1986,  1987,  3277,  1989,  2608,  3255,   659,  1957,  3612,   645,
     199,   201,   659,  3255,  2561,  2608,   614,    44,  2013,   640,
      17,    18,  2017,  2495,  2010,    52,  4564,  2013,  2115,   665,
     470,  2017,  3307,  4627,  4628,    17,    18,   386,   659,  2495,
     389,   556,    17,    18,   559,   386,   494,   224,   389,  2544,
     295,  2046,  2047,   247,   505,    17,    18,   640,  2044,  2045,
    2046,  2047,  2048,  4601,  4602,  2560,  2561,   556,    17,    18,
     559,   505,  2067,  2068,  2069,  2061,  2062,   245,   640,  2863,
     640,  2067,  2068,  2069,  2868,   658,   254,   225,  3692,   486,
     495,  2077,  2042,  2674,   640,   284,   235,   659,   663,   659,
      17,    18,   542,  4641,   492,  2100,  2092,  3568,  2674,    17,
      18,    13,   241,   659,  2100,  3070,   658,   659,   640,   386,
     541,  3348,   389,   241,  2110,   616,  3026,   386,   619,  2115,
     389,   386,   241,   622,   389,   559,   658,  1122,   609,   364,
     365,    17,    18,    45,   665,   370,  2132,    17,    18,  3143,
     640,   386,    17,    18,   389,   640,   559,   640,   386,   640,
     604,   389,   386,  3355,   526,   389,  2152,   386,   658,   556,
     389,   588,   559,   658,   174,   658,   588,   658,    17,    18,
     369,  2453,   386,   657,  4746,   389,     6,   386,   659,  2184,
     389,  3156,  3384,  3385,   665,   158,    98,  2147,  2184,  2149,
    3149,   103,  2697,   624,  3541,  3036,  3037,  3038,  3039,  3052,
     386,   576,  2168,   389,   129,  3407,   659,    17,    18,   606,
     105,    17,    18,   129,   392,    17,    18,  2213,  2214,   386,
     657,  2217,   389,   665,   386,   657,  4798,   389,   659,  4801,
     645,   779,   632,   633,    17,    18,    17,    18,   657,  3425,
     386,    17,    18,   389,  2214,   393,    17,    18,  1069,    20,
     665,   455,   657,   801,  1075,  1076,   404,    17,    18,   659,
      34,  4833,  2267,   411,  2361,  3525,   814,   815,   193,  2229,
     657,  2267,   386,  2269,  2831,   389,  2373,   193,  2238,  2239,
     586,   640,   486,   201,   658,   659,   657,   386,   129,   640,
     389,   386,   657,   386,   389,   486,   389,   222,   386,   658,
     657,   389,   386,   609,   657,   389,   222,   658,   657,   486,
     386,    85,   657,   389,  3574,   657,  3234,   494,   609,    62,
      63,  2826,  3574,   657,   386,    81,  2831,   389,   657,  3247,
      73,    12,   386,   520,   521,   389,   523,  1399,   525,  3624,
    1402,   657,  2338,  1405,   256,  2341,   168,   657,   583,   244,
     474,   179,   193,   626,   627,   542,   629,   556,   631,   657,
     559,   657,   510,   640,   599,  2361,   261,   292,   659,  2466,
     657,   640,   657,  3658,   665,   640,   292,  2373,   273,   386,
    3073,   658,   389,   205,  3669,    17,    18,  3672,   162,   658,
     658,   659,   565,   658,   386,   640,   541,   389,  2495,   603,
    2497,   386,   640,  3313,   389,   657,   640,  3021,  3022,  3023,
     657,   640,   179,   658,   386,  4463,  2698,   389,   657,   331,
     658,   657,   613,   614,   658,   657,   640,   386,   244,   658,
     389,   640,  4639,   557,   115,   257,   613,   614,   562,   658,
     659,   197,  4638,   609,   658,   261,   371,   269,  3634,   658,
     657,   292,   133,   657,   640,   371,  2738,   273,   606,   386,
     355,   657,   389,  3077,  3078,  3079,   657,    83,   386,   657,
    2466,   389,   658,   640,  3077,  3078,  3079,   657,   640,  2981,
     657,   657,   606,   395,   568,   241,   658,   659,   658,   659,
    3081,   658,   657,   174,   640,  2491,   658,   657,   622,  2495,
     386,  2497,  2498,   389,   657,    18,   386,    83,   264,   389,
     657,   386,   658,  4339,   389,   658,   659,  4343,   418,  2616,
     657,  3026,   657,   204,   657,  2521,   640,   657,  2524,   474,
     371,  3036,  3037,  3038,  3039,   657,   358,   386,    61,   657,
     389,   640,   657,  3518,   658,   640,  3160,   640,   658,   659,
     166,   657,   640,  3557,  3348,  2837,   640,  3160,   384,   658,
    2842,   568,   556,   658,   640,   658,  3570,  2563,  2850,  2851,
     658,   658,   659,   377,  2856,   470,   386,   657,   640,   389,
     386,  4038,   658,   389,   386,   576,   640,   389,    81,   658,
     659,  3851,   657,  2589,   657,  4038,  3214,  2593,   657,  3851,
    3218,   129,   514,   386,   658,   386,   389,   288,   389,    18,
     386,  2607,  2608,   389,  3745,   386,    13,   657,   389,   657,
    2616,   657,  2719,  2720,   658,   659,   386,   243,  2624,   389,
    2626,  2627,    37,   640,   657,   148,   658,   659,   658,   659,
     414,   553,  3233,   299,   300,   401,    58,   542,   640,   658,
     659,  2647,   129,  2649,   470,   640,    68,  2653,    63,   315,
     183,   417,   436,   588,   187,   193,   658,   243,   640,   657,
      82,   657,   588,   658,   657,   198,   658,   659,  2674,   657,
    3780,   640,    94,    95,    96,  3945,   658,  2647,  4514,   213,
     658,   659,   657,  3945,   222,  4521,    20,  2651,   472,   658,
    2696,   113,   658,   659,   197,  4319,  4320,   658,   659,   657,
    2706,  2716,  2717,   640,   119,  2711,   193,   122,    62,    63,
    2716,  2717,   640,  2719,  2720,   130,   542,   657,    35,   658,
     659,   658,   377,   658,    66,   158,   159,   657,   419,   148,
    4788,  2711,  3038,  3039,   149,   222,   362,   588,   241,    81,
     147,  3239,   368,   657,   640,   232,   657,   234,   532,   657,
     640,    93,   658,   659,   292,   640,  4462,   662,   658,   659,
      66,   264,   658,   657,  2734,  2735,  2736,  2737,   658,  2739,
    2740,   105,   659,   658,   657,    81,   362,   657,   444,   445,
     657,   640,   368,   657,   318,   319,   657,    93,   657,   323,
     324,   325,  2798,   297,   657,   299,   300,   330,  3313,   658,
     148,   492,  4014,   658,   659,   292,   162,  2813,   658,   659,
     657,   315,   438,   645,   646,   647,   657,   224,   657,  2825,
     640,   344,   657,  2829,   640,   237,  4178,   657,   640,   657,
     164,   148,   657,   371,   657,   526,   512,   252,   658,  4326,
      52,  4899,   658,   658,   127,   663,   658,   640,   289,   640,
      52,  2992,   438,  3762,   640,   197,   666,   129,   659,   640,
     132,   203,   196,   384,   198,   658,   557,   658,  2838,  2839,
     640,  2841,   658,  2843,  2844,  2845,  2846,  2847,  2848,  2849,
     377,   215,  2852,  3395,   371,  2855,   220,   201,   658,  2859,
     480,   197,   377,   148,   597,   428,    20,   203,    50,   241,
     658,   659,   278,   237,    28,  1273,  1274,  3531,   201,  3016,
     244,   333,  4748,  4749,   417,   541,   652,   251,  3531,   658,
     659,   193,   264,   658,   659,   344,   494,   261,   665,   351,
     505,   622,   173,   129,  3226,   241,  3228,   254,  3450,   273,
     444,   445,   357,  3235,   278,   658,   659,   230,   657,    73,
     222,   658,   659,   287,   198,   541,   537,  3249,   264,    83,
     277,   658,   659,   556,  3256,  3257,  3567,   593,   658,   659,
     512,   129,   658,   659,   497,   498,  3083,  3269,  3270,  3271,
     518,  3567,   537,  3275,  3276,   289,  3614,   658,   659,  3617,
    3618,   658,   659,   658,   659,   165,   344,   193,   624,   254,
     658,   659,    92,  3009,   198,  3011,   659,   593,   132,   659,
    3016,   658,   659,  3028,  3020,  3021,  3022,  3023,   658,   659,
     292,   355,  3028,  3315,  3316,  3317,   222,   344,   378,  3035,
     658,   659,   552,   659,   658,   193,   658,   659,   624,   658,
     659,   164,   464,   377,  4396,  3051,  3052,   364,   365,   132,
     588,   334,  3058,   387,  3963,   338,   118,  3966,  3967,   401,
     482,   664,   345,     6,   222,  3973,  3974,  3073,   383,  3977,
     117,  3077,  3078,  3079,  3983,   417,     4,  3083,   497,   498,
     658,   659,   485,   207,  3090,   419,  4297,   502,  3996,   344,
     622,  4201,  4001,   254,  4002,   659,   292,  4584,   401,   371,
      59,   588,   658,   659,   658,   659,  4216,   162,   232,  3115,
     234,   417,    83,   520,   521,   522,   523,   524,   525,   447,
      91,   665,   544,   659,   441,   648,   649,   650,   651,   652,
     653,   654,   655,    73,   292,   542,   470,  3244,    63,   561,
     264,   658,   659,   426,  3436,  3115,  1987,   118,  1989,   497,
     498,  4059,  4348,    13,  3160,  3483,  3484,   572,  3173,  3165,
     494,  3176,   658,  3455,   658,   659,   628,  3173,   658,   659,
    3176,  3177,   658,   515,   147,   371,   658,   659,   658,   659,
     497,   498,   658,   659,  4104,  3165,   601,   658,   659,   658,
     659,  4461,   658,   659,   119,   166,   513,   122,    10,  4461,
     659,   484,   658,   659,    39,   130,   658,  3213,   542,   515,
     658,   659,   665,   371,   658,  3224,  3222,  3223,   658,   129,
     665,  3230,   132,  3229,   149,   657,  2067,  2068,  2069,   648,
     649,   650,   651,   652,   653,   654,   655,   277,  3244,  3245,
     364,   365,   497,   498,  3250,  3254,   370,   658,   659,  3255,
    3265,  3260,   665,   377,  3826,  3827,   598,  3266,  3267,  3265,
     377,  3231,  3232,   597,  4278,  3832,   166,   664,  4464,   194,
     241,  3277,   289,   289,   608,   609,   289,   289,  3284,  3285,
      14,    52,   289,   193,  3290,   289,   659,   122,   659,  3259,
     645,  3919,   598,   417,   129,   629,   129,   631,   556,   132,
    4208,  3307,   650,   651,   652,   653,   654,   655,   657,  4217,
     231,   645,   222,   235,   284,   659,   588,  3832,  4226,   201,
    3290,   402,   294,  4231,   658,   659,   663,   252,   662,   663,
     659,   648,   649,   650,   651,   652,   653,   654,   655,  4259,
    3346,   576,   129,   626,  3350,   132,   659,   576,   666,   320,
     401,   186,   576,   645,   659,   198,   629,   659,   193,   642,
     193,   603,   254,   115,   659,   665,   490,    73,   339,   191,
     104,   659,   659,  4483,  4484,   537,  4486,   254,   148,   255,
     554,   652,   292,   205,   188,   198,   537,   222,   223,   222,
     659,   362,   588,   648,   649,   650,   651,   652,   653,   654,
     655,   173,   136,   509,   406,   179,   193,  4603,   204,   174,
     143,   657,    20,   405,   659,   658,  4686,    56,   152,   659,
      86,   628,    88,    83,  4686,  4410,   604,   608,  3535,   354,
     588,   659,   357,   201,   652,   222,   658,    97,  3444,  4549,
     174,   658,   658,   658,   178,   267,  3452,   269,   658,  4202,
    4203,   203,   658,   658,   658,   201,   190,   292,   659,   292,
     651,   371,  4215,   658,  4031,   657,   132,   657,  4664,  4222,
     658,   148,   658,   658,   598,   658,   597,   659,   658,   213,
    4233,  4234,  3452,   659,   495,   658,   658,   655,   657,   241,
     156,   657,   657,   137,   658,   565,   659,   105,  3504,   659,
     659,  4611,   565,  4613,  4614,   292,  4426,   241,   565,   434,
     576,   233,  4432,   247,   233,   242,  4031,   659,   657,  3525,
    3526,   356,   251,  3529,   548,  3531,   192,    12,   657,  3535,
    3637,   366,  4517,    13,   213,   370,   371,   201,   371,   361,
     659,   177,   565,  4471,  4472,   475,   659,  4475,  4476,  4477,
    4478,  4526,   215,   287,  3560,    28,   164,   496,   665,   657,
     198,  3567,  3568,  4774,   198,   657,   275,   658,  3574,   665,
     541,   659,   659,  3579,   344,   201,   665,   254,  3593,   665,
     427,   659,   602,  4511,   371,   494,   557,  3593,   659,  4104,
     198,   198,   659,   377,   416,   377,   353,   526,   485,  3608,
      73,   148,  3572,   526,  4589,  4875,   266,   215,   526,  3615,
      83,   526,   220,  4875,   526,   105,  4886,  3619,  3624,   377,
    4890,  3627,   198,   131,  4886,  4895,   657,   568,  4890,   659,
     645,  3637,  4843,  4895,   288,  3641,   244,  3643,  3644,   645,
    4548,   604,  4550,   251,   645,   645,   105,   572,   645,   645,
     645,  3657,  3658,   261,   645,   645,   645,   645,   645,   132,
     645,   645,   645,  3669,   645,   273,  3672,   344,  3638,   645,
     278,  4599,  4600,   609,   162,   250,   601,  3647,   588,   287,
    4608,   645,   342,   645,  3699,   645,   420,   645,   645,   645,
    3696,   665,   658,  3699,   250,  4301,   665,   658,  3704,     7,
     486,   576,   576,  3709,   658,   115,   440,   367,   658,   658,
    3716,   658,   658,   658,   448,   659,   658,   665,  3724,   471,
     576,   645,   456,   636,   659,  3731,   645,   497,   498,   395,
     565,   665,    83,   659,   569,   284,  3716,   572,    50,    89,
     492,  4033,   645,  4035,  4259,  4037,    97,   355,   583,   657,
      17,    18,   486,   588,   244,   588,   591,  4867,   657,   232,
     657,   234,   576,   515,   174,   499,   500,   657,   384,   377,
     430,   261,   645,   439,   201,   201,   201,   177,   659,   387,
     659,   390,   261,   273,   261,   244,    50,   220,   341,  4081,
     141,   264,   565,  4085,   204,  4422,   565,   344,   258,  3906,
     432,   588,   261,   371,   659,   335,  4726,   559,     7,   657,
     562,   419,   197,   377,   273,   650,   651,   551,   118,   118,
     497,   498,    81,   645,   646,   647,   576,   401,   401,   401,
     143,   241,   262,   557,   262,  3841,   401,   557,   143,    58,
    3846,   401,    50,   401,   403,  3851,   598,   581,   450,    68,
     401,   401,   663,  3823,   606,   401,   123,   124,   125,   126,
     127,   215,   470,    82,   657,   355,   526,   657,   657,   603,
     665,   605,   657,   652,  4480,    94,    95,    96,   288,   649,
     650,   651,   652,   653,   654,   655,   494,   377,   252,   252,
     657,   364,   365,   657,   113,   658,   355,   370,   658,   658,
    3906,   657,  3908,  3909,   377,   658,   657,  3913,  4893,   658,
      39,  4426,   659,   432,   659,   266,  3922,  4432,   658,  3925,
    3926,   665,   658,   658,   652,  3931,   384,  3933,  4848,   377,
    3900,  3937,   657,   237,   542,   658,   279,   401,   659,  3945,
     454,   350,  4049,  3949,   417,  3951,   659,   658,   665,   201,
     497,   498,   261,  4873,   261,   387,   658,   658,   432,   645,
     227,   228,   229,   230,   659,   659,   466,   657,  4109,   630,
     118,   648,   649,   650,   651,   652,   653,   654,   655,   401,
     470,   235,   264,   264,   665,    28,   657,    30,   576,   597,
     217,   342,   659,   122,   663,  4287,  4288,  4289,    50,   658,
     129,   609,   659,   658,   414,   657,   488,   658,   631,   419,
     658,   470,   275,   364,   365,  4021,   367,   490,   468,    62,
      63,   629,    65,   631,   182,   287,   213,   565,   155,   271,
      73,   659,  4038,   658,   658,   486,   261,   645,   659,   261,
      83,   512,   377,  4049,   635,   657,   657,   657,    91,  4019,
     658,   659,   542,   658,   662,   663,   659,   186,   658,   264,
     264,   471,   659,   659,   193,   631,   658,   334,   657,   336,
     337,   338,    20,   415,   377,   118,   377,    83,   345,   430,
     240,   198,   492,   542,   198,   198,   278,  4688,   658,   132,
     568,   658,   135,   222,   223,   658,   658,   658,   371,    63,
     252,   648,   649,   650,   651,   652,   653,   654,   655,   341,
     658,  4258,   266,   658,   333,   658,   658,   427,   658,   386,
     659,    18,   389,   166,  4130,   598,   384,   631,   251,  4135,
     657,   659,   351,  4139,   658,    75,   665,   609,   658,   609,
     657,   419,  4148,   659,   481,   657,    20,   557,   658,  4155,
     179,   132,   562,   609,   132,   559,   657,   413,   657,   426,
     657,    87,  4168,   292,   504,   151,   132,   665,    37,   371,
    4185,   581,   659,   341,   181,   526,   144,   658,  4187,  4185,
     264,   565,   565,   565,   559,   280,   251,  4193,   657,   232,
     613,   234,   609,   609,  4335,   658,   606,   659,   241,   377,
     383,   658,   657,   528,   619,   248,   317,   619,   177,   475,
     465,  4726,   622,   658,   658,  4821,   483,   484,   659,    64,
     263,  4223,   384,   603,   547,    50,    50,   356,   161,  4235,
      50,  4237,   466,   657,   371,   251,   657,   657,   657,   657,
      15,   370,   371,   657,  4250,   377,   603,   132,  4250,   264,
      20,   264,   370,   645,   631,   531,   200,   177,   657,   143,
     143,   567,   166,   482,    28,    50,    30,    50,    50,   198,
     657,   657,   398,   366,   371,   614,   657,   320,   548,   658,
     658,  4296,   658,   657,   657,   657,   657,  4394,   163,   659,
    4296,   658,   657,  4299,   287,    12,   339,   658,    62,    63,
      66,    65,   547,   384,   657,    66,     6,    50,   657,    73,
      50,   657,    12,   657,    14,   141,   198,   658,   151,    83,
       5,   659,   377,   377,   658,   544,   658,    91,    28,   603,
      30,   384,   440,  4848,  4340,   384,   136,   582,   659,   475,
     658,   233,   561,  4635,   658,   157,   264,   592,    50,   477,
     237,   394,   371,   396,   118,   657,   494,  2651,  4873,   626,
      60,   404,   659,   934,   609,    65,  4037,  2504,   132,  2857,
    4033,   135,  1054,   640,   641,   642,  4508,  4035,   623,  3206,
    4153,  1107,  4625,    83,  4506,  4795,  4791,  4333,  4394,  1131,
    4578,    91,  4027,    52,   610,  1972,  2060,  3009,  3833,   695,
    2289,   101,   166,  1179,  4406,  3036,  2560,  1691,  1937,  4524,
    2562,  2561,  4345,  2812,  3667,  2264,  3046,  3845,   118,  3051,
    3504,  1450,  4428,  4429,  4594,  4395,  4297,  4690,  3848,  4843,
    4782,  4821,   132,   476,  2208,   135,   565,  4480,  4162,  2805,
     569,  3284,  3913,   572,   144,  3287,  4668,  4856,  2813,   694,
    3376,  3703,   152,  3974,   583,  4461,  4381,  4007,  4406,   588,
     160,  4688,   591,  4394,  4046,  2719,   166,  2956,   232,  3432,
     234,  3435,  3427,   718,  4797,    84,    84,   241,   723,  4748,
    4621,  4749,  4169,  4521,   248,  4630,  4514,  4493,  4340,  4495,
    4216,   534,   535,   536,  2812,  3280,   196,  4604,   541,   263,
    1081,  1144,  1616,  4191,  2693,  2583,  2269,  4682,  1731,  3932,
    3028,  2046,  1705,   277,   557,  2551,   761,   560,  3491,  2612,
    1098,   650,   651,   991,  2460,  4421,  4532,  4668,  4534,  4535,
    2106,  3452,   232,   778,   234,  4541,   579,  1004,  2369,  4666,
    4510,   241,  2992,  2365,  1236,  2634,  3543,  2639,   248,  4786,
    2974,  4498,  4322,  3731,   597,  4787,   320,  3807,  4564,  1208,
    2484,  3945,  3437,   263,  1636,  3090,  4137,  1636,  3276,  4449,
    4790,  3083,  4578,  4136,  4136,   339,  4578,   822,   823,   824,
     825,  2338,    84,  1468,  1418,  2545,  3851,   287,  4594,   834,
    3520,  2588,  3519,  3574,  4564,  4686,   621,  1741,  4604,   714,
    4707,   609,  2687,   109,  1115,  2179,   609,  2180,  1960,  4624,
    1565,  3951,  4085,  1476,  3494,  4841,   659,  4307,  4624,  4859,
     320,  4895,   811,  4490,   869,  4890,  1517,  4597,  4598,  4396,
     394,  3525,   396,  2672,   608,  4641,  1890,   608,  3567,   339,
     404,  2665,  2135,   343,  4650,  4651,  2664,  2017,  4654,  4790,
    1496,   600,   150,  4794,   978,  4285,  1642,  2607,  2524,  4292,
    1408,  3011,   601,  3292,  1107,   910,   985,  1644,   645,   645,
     645,  4641,  1107,  4780,    -1,    -1,  4682,    -1,  1107,    -1,
    4686,   926,   927,    -1,    -1,   930,    -1,   387,    -1,    -1,
      -1,    -1,    -1,    -1,   394,    -1,   396,    -1,    -1,    -1,
      -1,  4707,    -1,    -1,   404,   950,    -1,    -1,    -1,    -1,
      -1,    -1,   476,    -1,    -1,    -1,    -1,   962,    37,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4698,  4699,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   236,  4745,
     238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     450,    -1,    -1,    -1,    -1,  4896,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     534,   535,   536,    -1,  4780,  4882,   476,   541,    -1,    -1,
    4786,  4787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   557,    -1,    -1,   560,    -1,   296,    -1,
     298,   299,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   579,   314,   315,   316,    -1,
      -1,   140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   597,   534,   535,   536,    -1,    -1,    -1,
      -1,   541,    -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,
     169,    -1,    -1,    -1,    -1,    -1,    -1,   557,    -1,    -1,
     560,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4875,
      -1,    -1,    -1,    -1,    -1,    -1,  4882,    -1,    -1,   579,
    4886,    -1,    -1,  4853,  4890,    -1,    -1,   206,    -1,  4895,
      -1,    -1,    -1,   657,    -1,    -1,    -1,   597,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
      -1,    -1,    -1,   232,  1159,   234,    -1,  1162,  1163,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   123,   124,   125,   126,   127,    -1,    -1,    -1,
      -1,    -1,  1187,  1188,    -1,    -1,   444,   445,    -1,    -1,
      -1,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,
    1205,  1206,  1207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,  1216,  1217,    -1,  1219,  1220,    -1,    -1,    -1,  1224,
    1225,    -1,    -1,  1228,  1229,  1230,  1231,    -1,  1233,  1234,
    1235,    -1,    -1,    -1,   313,    -1,    -1,  1242,  1243,    -1,
    1245,  1246,  1247,  1248,  1249,    -1,    -1,  1252,  1253,  1254,
    1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,    -1,  1264,
      -1,    -1,  1267,  1268,    -1,    -1,    -1,  1272,    -1,    -1,
      -1,  1276,  1277,  1278,    -1,    -1,   227,   228,   229,   230,
      -1,     6,    -1,  1288,  1289,  1290,    -1,    12,    -1,    14,
      -1,    16,  1297,    -1,    -1,    -1,    -1,    -1,    -1,  1304,
    1305,  1306,  1307,    28,    -1,    30,    -1,    -1,    -1,    -1,
    1315,  1316,  1317,    -1,  1319,  1320,  1321,  1322,  1323,    -1,
    1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,    -1,    -1,
      -1,  1336,  1337,    -1,    -1,    60,    -1,    -1,    -1,   418,
      65,    66,    -1,    -1,    -1,    -1,    71,    -1,   427,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    83,    -1,
      -1,    -1,    -1,   442,    -1,    -1,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,
      -1,   460,    -1,   334,    -1,   336,   337,   338,    -1,    -1,
      -1,    -1,    -1,   118,   345,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,    -1,  1422,    -1,   144,
     145,    -1,    -1,    -1,    -1,   504,    -1,   152,   507,    -1,
      -1,    -1,    -1,  1438,    -1,   160,    -1,    -1,    -1,   164,
      -1,   166,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     623,   176,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,   426,    -1,   556,    -1,    -1,
     559,    -1,    -1,    -1,    -1,    -1,   166,    -1,    -1,   169,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,   234,
      -1,    -1,  1517,    -1,   239,    -1,   241,    -1,    -1,    -1,
      -1,   694,    -1,   248,    -1,    -1,   206,  1532,    -1,    36,
      37,    -1,   483,   484,    -1,    42,    -1,    44,   263,    46,
      47,    -1,    -1,    -1,  1549,    -1,   226,    -1,    -1,    -1,
     723,    -1,   232,    -1,   234,    -1,    63,    -1,    -1,    -1,
      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   761,    -1,
      -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,    -1,    -1,
      -1,  1606,    -1,    -1,    -1,   778,    -1,    -1,    -1,   289,
      -1,    -1,   119,    -1,   339,   122,    -1,    -1,   343,    -1,
      -1,    -1,    -1,   130,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   825,    -1,    -1,    -1,    -1,   382,    -1,    -1,
     167,    -1,   387,    -1,    -1,    -1,    -1,    -1,    -1,   394,
      -1,   396,    -1,    -1,    -1,   626,   401,    -1,    -1,   404,
      -1,    -1,    -1,    -1,    -1,   192,    -1,   194,    -1,    -1,
     641,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   208,   209,    -1,    -1,    -1,    -1,    -1,    -1,  1714,
     435,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   449,   450,   451,   452,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   910,   418,    -1,
      -1,    -1,    -1,    -1,    -1,   252,    -1,   427,    -1,  1754,
      -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   281,    -1,    -1,   950,    -1,    -1,
     460,    -1,    -1,   290,   291,    -1,   293,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   534,
     535,   536,    -1,    -1,    -1,    -1,   541,    -1,    -1,    -1,
     327,   328,   329,    -1,   504,    -1,    -1,   507,    -1,    -1,
      -1,    -1,   557,    -1,    -1,   560,    -1,    -1,    -1,   346,
     347,   348,    -1,    -1,    -1,    -1,    -1,   354,    -1,    -1,
     357,    -1,    -1,    -1,   579,    -1,    -1,   537,    -1,   584,
      -1,    -1,    -1,  1868,  1869,  1870,   373,   374,    -1,    -1,
      -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,  1883,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   409,   410,  1909,    -1,    -1,    -1,    -1,    -1,
    1915,    -1,    -1,  1918,    -1,  1920,    -1,    -1,    -1,    -1,
      -1,  1926,    -1,  1928,  1929,    -1,    -1,   434,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   663,    -1,
      -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1960,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
      63,    -1,    65,   490,    -1,    -1,  1159,   494,    -1,  1162,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,   508,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      -1,    -1,    -1,    -1,  1187,  1188,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1196,  1197,    -1,    -1,  1200,  1201,  1202,
    1203,  1204,  1205,  1206,  1207,   118,  2041,    -1,    -1,    -1,
      -1,    -1,    -1,  1216,  1217,  2050,  1219,  1220,    -1,   132,
      -1,  1224,   135,    -1,    -1,  1228,  1229,  1230,  1231,   566,
      -1,  1234,   569,    -1,    -1,   572,   573,   574,   575,  1242,
    1243,    -1,  1245,  1246,  2079,    -1,    -1,    -1,    -1,  1252,
    1253,  1254,    -1,   166,  1257,  1258,  1259,  1260,  1261,  1262,
      -1,  1264,    -1,    -1,  1267,  1268,    -1,    -1,    13,  1272,
      -1,    -1,    -1,  1276,  1277,  1278,    -1,  2112,   615,   616,
      -1,    26,    -1,    -1,    -1,  1288,  1289,  1290,    -1,    -1,
      -1,    -1,    37,    38,  1297,    -1,    -1,    -1,  2133,    -1,
      -1,  1304,  1305,  1306,    -1,   642,  2141,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2150,    -1,    62,    63,   232,
      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,   241,    74,
      -1,    -1,    -1,    -1,  1337,   248,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     263,    -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,
      -1,    -1,    -1,    -1,    -1,  2200,    -1,    -1,    -1,    -1,
      -1,   116,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   138,   139,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   320,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1422,
     165,   166,    -1,    -1,    -1,   170,   339,    -1,   173,  2264,
      -1,    -1,    -1,    -1,    -1,  1438,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2285,    -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,   204,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,    -1,   214,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,    -1,   396,    -1,    -1,    -1,   232,    -1,   234,
      -1,   404,    -1,    -1,    -1,   240,   241,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2347,    -1,  1517,    -1,  2351,   262,    -1,    -1,
      -1,  2356,  2357,    -1,    -1,    -1,    -1,    -1,    -1,  1532,
    2365,    -1,  2367,    -1,  2369,  2370,  2371,  2372,    -1,   284,
    2375,    -1,    -1,    -1,    -1,    -1,  1549,    -1,    -1,    -1,
    2385,  2386,    -1,  2388,  2389,    -1,  2391,  2392,  2393,  2394,
      -1,  2396,    -1,   476,  2399,    -1,    -1,    -1,   313,    -1,
      -1,    -1,    -1,  2408,    -1,    -1,    -1,    -1,    -1,    -1,
    2415,    -1,  2417,    -1,  2419,  2420,    -1,  2422,  2423,    -1,
      -1,    -1,  2427,  2428,  2429,    -1,    -1,    -1,  2433,  2434,
    2435,    -1,  2437,  1606,  2439,    -1,  2441,    -1,  2443,    -1,
    2445,    -1,    28,    -1,    30,  2450,    -1,    -1,    -1,    -1,
      -1,   534,   535,   536,    -1,    -1,    -1,    -1,   541,    -1,
      -1,    -1,  2467,    -1,    -1,    -1,   381,    -1,    -1,  2474,
      -1,    -1,  2477,    -1,   557,    -1,    -1,   560,  2483,    65,
      -1,  2486,    -1,    -1,    -1,  2490,    -1,    -1,    -1,    -1,
      -1,    -1,   407,    -1,    -1,    -1,   579,    83,    -1,    -1,
      -1,    -1,    -1,   418,   419,    91,    -1,   422,   423,    -1,
      -1,    -1,    -1,    -1,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   443,    -1,
      -1,    -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,  2544,
      -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,  2560,  2561,  2562,    -1,  2564,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,
     166,  1754,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    -1,   541,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2642,    -1,    -1,
      -1,    -1,    -1,    -1,   559,    -1,   232,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,   241,    -1,    -1,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   263,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2697,    -1,    -1,  1868,  1869,  1870,    -1,    -1,
      -1,    -1,   617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     625,    -1,    -1,  2718,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2731,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   320,    -1,  1909,    -1,  2743,  2744,
      -1,    -1,    -1,    -1,    -1,  1918,    -1,  1920,    -1,    -1,
      -1,    -1,    -1,   339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2805,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,
      -1,  2826,    -1,    -1,    -1,    -1,  2831,  2832,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2861,  2862,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2041,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2050,    -1,    -1,
      -1,  2886,    -1,    -1,    -1,  2890,    -1,    -1,    -1,    -1,
     476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2079,    -1,    -1,    -1,
      -1,    -1,  2917,  2918,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2938,    -1,    -1,    -1,    -1,    -1,  2112,
      -1,    -1,  2947,    -1,  2949,    -1,  2951,    -1,   534,   535,
     536,    -1,    -1,    -1,    -1,   541,    -1,    -1,    -1,    -1,
    2133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,   560,    -1,  2981,  2150,    -1,    -1,
      -1,  2986,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   579,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   597,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3026,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3036,  3037,  3038,  3039,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3084,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3111,    -1,    -1,    -1,
      -1,    -1,  2285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3131,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2347,    -1,    -1,  3182,  2351,    -1,
      -1,    -1,    -1,  2356,  2357,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2365,    -1,  2367,    -1,  2369,    -1,  2371,  2372,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2385,  2386,    -1,  2388,    -1,    -1,  2391,  2392,
    2393,  2394,    -1,  2396,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2408,    -1,    -1,    -1,    -1,
      -1,    -1,  2415,    -1,  2417,    -1,  2419,  2420,    -1,  2422,
      -1,    -1,    -1,    -1,  2427,  2428,  2429,    -1,    -1,    -1,
    2433,  2434,  2435,    -1,  2437,    -1,  2439,    -1,  2441,    -1,
    2443,    -1,  2445,    -1,    -1,  3280,    -1,  2450,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2467,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3313,    -1,
    2483,    -1,    -1,  2486,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3358,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3388,    -1,    -1,    -1,  3392,  3393,  2562,
    3395,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,  3404,
      -1,    -1,    -1,    -1,  3409,    -1,    -1,  3412,    -1,  3414,
    3415,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    85,  3450,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,  2642,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3485,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,   138,   139,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     151,   152,    -1,    -1,  3519,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3556,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     211,  3576,   213,    -1,    -1,    -1,   217,    -1,    -1,    -1,
     221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   235,    -1,    -1,  3602,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,   249,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,    -1,    -1,    -1,    -1,  2832,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3713,  3714,
      -1,    -1,    -1,  2886,    -1,    -1,    -1,  2890,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,  2917,  2918,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,
     401,    -1,    -1,    -1,    -1,  2938,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   414,  2947,    -1,  2949,    -1,  2951,    -1,
      -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,   450,
      -1,   452,    -1,   454,   455,    -1,    -1,   458,   459,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3832,   469,    -1,
      -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,
      -1,    -1,    -1,    -1,    -1,   486,    -1,  3852,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3875,    -1,    -1,    -1,    -1,    -1,    -1,  3882,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3084,    -1,  3918,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    14,    -1,    16,    -1,    -1,  3111,    -1,
      -1,    -1,    -1,   584,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,   596,    -1,    38,  3131,   600,
      -1,    -1,   603,    -1,    -1,    -1,    -1,   608,    -1,    -1,
      -1,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    60,
      -1,    -1,    -1,    -1,    65,    66,    -1,    -1,    -1,   630,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,
      -1,    -1,    -1,   644,    85,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   657,    -1,    -1,    -1,
      -1,    -1,    -1,   104,    -1,    -1,  4031,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,   138,   139,  4064,
      -1,    -1,    -1,  4068,    -1,    -1,    -1,    -1,    -1,    -1,
     151,   152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   178,  4103,  4104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     211,    -1,   213,    -1,    -1,    -1,   217,    -1,    -1,    -1,
     221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   235,    -1,    -1,  4162,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   247,    -1,   249,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   265,  3358,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,    -1,   287,    -1,    -1,    -1,
      -1,    -1,    -1,   294,    -1,  3388,    -1,    -1,  4223,  3392,
    3393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3404,    -1,    -1,    -1,    -1,  3409,    -1,    -1,  3412,
      -1,  3414,  3415,    -1,    -1,    -1,    -1,  4252,    -1,    -1,
      -1,    -1,    -1,    -1,  4259,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4297,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,  4312,    -1,  4314,
      -1,    -1,  3485,    -1,    -1,    -1,    -1,    -1,   399,    -1,
     401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   414,  4339,    -1,    -1,    -1,  4343,    -1,
      -1,    -1,    -1,    -1,   425,    -1,  3519,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,   450,
      -1,   452,    -1,   454,   455,    -1,    -1,   458,   459,    -1,
      -1,    -1,    -1,  3556,    -1,    -1,    -1,    -1,   469,    -1,
      -1,   472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,
      -1,  4406,    -1,  3576,    -1,   486,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,   499,   500,
     501,  4426,    -1,    -1,    -1,    -1,    -1,  4432,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4445,    -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,   532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
      -1,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   584,  4509,    -1,    -1,    -1,    -1,  4514,
      -1,    -1,    -1,    85,    -1,   596,  4521,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,    -1,   608,    -1,    -1,
      -1,    -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3713,  3714,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   630,
      -1,    -1,    -1,    -1,    -1,    -1,   128,   638,    -1,    -1,
      -1,    -1,    -1,   644,   136,  4570,   138,   139,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   657,    -1,    -1,   151,
     152,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   178,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   195,    -1,  4630,    -1,    -1,    -1,    -1,
      -1,  4636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   211,
      -1,   213,    -1,    -1,    -1,   217,    -1,    -1,    -1,   221,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4679,   247,    -1,   249,    -1,  3852,
      -1,    -1,  4687,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3875,    -1,    -1,    -1,    -1,    -1,    -1,  3882,
      -1,   283,    -1,  4718,    -1,   287,    -1,    -1,    -1,    -1,
      -1,  4726,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4746,    -1,  4748,  4749,  3918,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4774,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4798,    -1,    -1,  4801,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,  4833,   401,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4843,    -1,
      -1,    -1,   414,  4848,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4873,    -1,
      -1,    -1,    -1,    -1,    -1,   447,    -1,    -1,   450,    -1,
     452,    -1,    -1,   455,    -1,    -1,   458,   459,    -1,    -1,
      -1,  4064,    -1,  4898,    -1,  4068,    -1,   469,    -1,    -1,
     472,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,    -1,
      -1,    -1,    -1,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   494,    -1,    -1,    -1,    -1,   499,   500,   501,
    4103,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     532,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   540,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   584,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   596,    -1,    -1,    -1,   600,    -1,
      -1,   603,    -1,    -1,    -1,    -1,   608,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   638,    -1,    -1,    -1,
      -1,    -1,   644,    -1,    -1,    -1,    -1,    -1,    -1,  4252,
      -1,    -1,    -1,    -1,    -1,   657,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4312,
      -1,  4314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4570,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4679,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4687,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,  4718,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,  4898,   216,   217,   218,   219,
      -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,
     250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
     270,   271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,   577,   578,   579,
     580,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     650,   651,    -1,    -1,    -1,    -1,   656,   657,    -1,    -1,
     660,   661,    -1,    -1,   664,   665,     5,    -1,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,    -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
     249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,   610,   611,   612,   613,   614,    -1,    -1,   617,   618,
      -1,   620,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   650,   651,    -1,    -1,    -1,    -1,   656,   657,    -1,
      -1,   660,   661,    -1,    -1,   664,   665,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,    -1,   221,   222,   223,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   650,   651,    -1,    -1,    -1,    -1,   656,   657,
      -1,    -1,   660,   661,    -1,    -1,   664,   665,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,    -1,   221,   222,   223,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,   250,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,
     617,   618,    -1,   620,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   650,   651,    -1,    -1,    -1,    -1,   656,
     657,    -1,    -1,   660,   661,    -1,    -1,   664,   665,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
      -1,    -1,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,    -1,   221,   222,   223,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,   249,   250,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,   618,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   650,   651,    -1,    -1,    -1,    -1,
     656,   657,    -1,    -1,   660,   661,    -1,    -1,   664,   665,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,    -1,   221,   222,   223,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,   249,   250,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,   397,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,   610,   611,   612,   613,   614,
      -1,    -1,   617,   618,    -1,   620,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   650,   651,    -1,    -1,    -1,
      -1,   656,   657,    -1,    -1,   660,   661,    -1,    -1,   664,
     665,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    37,    38,    39,    40,    41,    42,    43,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,   179,    -1,   181,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,    -1,   221,   222,   223,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,   247,   248,   249,   250,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,   273,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,   610,   611,   612,   613,
     614,    -1,    -1,   617,   618,    -1,   620,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   650,   651,    -1,    -1,
      -1,    -1,   656,   657,    -1,    -1,   660,   661,    -1,    -1,
     664,   665,     5,    -1,     7,     8,     9,    10,    11,    12,
      13,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    37,    38,    39,    40,    41,    42,
      43,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,   101,   102,
     103,    -1,    -1,   106,   107,   108,   109,   110,   111,    -1,
     113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
      -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,   179,    -1,   181,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,    -1,   221,   222,
     223,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,   247,   248,   249,   250,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
     273,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,   356,   357,    -1,    -1,   360,   361,   362,
     363,   364,    -1,   366,   367,   368,    -1,   370,   371,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,   397,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,   565,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,   582,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,   610,   611,   612,
     613,   614,    -1,    -1,   617,   618,    -1,   620,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,   642,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   650,   651,    -1,
      -1,    -1,    -1,   656,   657,    -1,    -1,   660,   661,    -1,
      -1,   664,   665,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,   179,    -1,   181,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,    -1,   221,
     222,   223,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,   273,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
     292,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,   356,   357,    -1,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,   397,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
     582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,   610,   611,
     612,   613,   614,    -1,    -1,   617,   618,    -1,   620,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   650,   651,
      -1,    -1,    -1,    -1,   656,   657,    -1,    -1,   660,   661,
      -1,    -1,   664,   665,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    37,    38,    39,    40,
      41,    42,    43,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,    -1,   113,   114,   115,    -1,   117,   118,   119,   120,
     121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
     181,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,    -1,
     221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,   235,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,   250,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,   340,
     341,    -1,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,   356,   357,    -1,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,   565,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,   582,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,   610,
     611,   612,   613,   614,    -1,    -1,   617,   618,    -1,   620,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
      -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   650,
     651,    -1,    -1,    -1,    -1,   656,   657,    -1,    -1,   660,
     661,    -1,    -1,   664,   665,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    37,    38,    39,
      40,    41,    42,    43,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,   179,
      -1,   181,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
      -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,   249,
     250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,   273,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,   356,   357,    -1,    -1,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,   582,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
     610,   611,   612,   613,   614,    -1,    -1,   617,   618,    -1,
     620,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     650,   651,    -1,    -1,    -1,    -1,   656,   657,    -1,    -1,
     660,   661,    -1,    -1,   664,   665,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    37,    38,
      39,    40,    41,    42,    43,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,    -1,   113,   114,   115,    -1,   117,   118,
     119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,
     129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,    -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,   235,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,   248,
     249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,   356,   357,    -1,
      -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,   582,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,   610,   611,   612,   613,   614,    -1,    -1,   617,   618,
      -1,   620,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   650,   651,    -1,    -1,    -1,    -1,   656,   657,    -1,
      -1,   660,   661,    -1,    -1,   664,   665,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    37,
      38,    39,    40,    41,    42,    43,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,    -1,   221,   222,   223,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,   250,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,   356,   357,
      -1,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
     368,    -1,   370,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,   582,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,   617,
     618,    -1,   620,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   650,   651,    -1,    -1,    -1,    -1,   656,   657,
      -1,    -1,   660,   661,    -1,    -1,   664,   665,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,    -1,   113,   114,   115,    -1,
     117,   118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,    -1,   221,   222,   223,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,   235,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
     247,   248,   249,   250,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,   273,   274,   275,    -1,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,   340,   341,    -1,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,   356,
     357,    -1,    -1,   360,   361,   362,   363,   364,    -1,   366,
     367,   368,    -1,   370,   371,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
     397,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,   582,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,   610,   611,   612,   613,   614,    -1,    -1,
     617,   618,    -1,   620,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   650,   651,    -1,    -1,    -1,    -1,   656,
     657,    -1,    -1,   660,   661,    -1,    -1,   664,   665,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,   179,    -1,   181,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,    -1,   221,   222,   223,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,   247,   248,   249,   250,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,   273,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
     356,   357,    -1,    -1,   360,   361,   362,   363,   364,    -1,
     366,   367,   368,    -1,   370,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,   582,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,   610,   611,   612,   613,   614,    -1,
      -1,   617,   618,    -1,   620,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   650,   651,    -1,    -1,    -1,    -1,
     656,   657,    -1,    -1,   660,   661,    -1,    -1,   664,   665,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,    -1,   113,   114,
     115,    -1,   117,   118,   119,   120,   121,   122,    -1,    -1,
      -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,    -1,   221,   222,   223,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
     235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,   247,   248,   249,   250,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,   273,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,   356,   357,    -1,    -1,   360,   361,   362,   363,   364,
      -1,   366,   367,   368,    -1,   370,   371,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,   397,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
     565,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,   610,   611,   612,   613,   614,
      -1,    -1,   617,   618,    -1,   620,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   650,   651,    -1,    -1,    -1,
      -1,   656,   657,    -1,    -1,   660,   661,    -1,    -1,   664,
     665,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,   222,   223,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,   356,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,   370,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
     664,   665,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,   241,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,   264,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,   277,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,   486,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,   515,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   665,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,   264,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,   515,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   665,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
     486,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,   658,    -1,    -1,    19,    -1,    -1,    22,   665,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,   658,    15,    -1,    -1,    -1,    19,
     664,   665,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,   657,    -1,    15,
      -1,    -1,    -1,    19,    -1,   665,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   665,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   652,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,   665,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,   657,    -1,    15,    -1,    -1,    -1,    19,    -1,   665,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,   664,   665,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   665,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   665,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   665,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,    -1,
     642,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   665,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,    -1,   642,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   664,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,   276,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,   565,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,    -1,   642,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   664,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,    -1,   642,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   664,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   664,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   664,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   664,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,    -1,   642,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
     664,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,
      -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,    -1,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,    -1,    -1,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,   189,   190,   191,   192,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,    -1,   212,
      -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
      -1,    -1,    -1,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,   260,    -1,    -1,
     263,    -1,    -1,    -1,   267,   268,    -1,    -1,   271,   272,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,    -1,    -1,
      -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,
     453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,
     463,   464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,
      -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,
     503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,
     533,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,
      -1,    -1,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,   630,    -1,    -1,
      -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   659,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,     5,   642,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
     657,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,
      51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,
      61,    62,    -1,    64,    65,    -1,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,
      -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,
     151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,
      -1,   162,   163,    -1,   165,   166,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
     181,   182,   183,   184,    -1,    -1,   187,   188,    -1,   190,
     191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,
      -1,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,
     221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
     231,   232,   233,   234,    -1,    -1,    -1,   238,   239,   240,
      -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,
      -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,
      -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,
     271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,
     281,   282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,
      -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,   315,   316,    -1,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,
     331,   332,   333,   334,   335,    -1,    -1,   338,   339,    -1,
     341,    -1,   343,    -1,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,
     361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,
      -1,   372,    -1,   374,   375,   376,    -1,   378,   379,   380,
     381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,
      -1,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,
     421,   422,   423,   424,    -1,   426,   427,   428,    -1,    -1,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,
      -1,   442,   443,   444,   445,   446,    -1,   448,   449,    -1,
     451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,
     461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,
     491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,
      -1,   502,   503,   504,   505,   506,   507,    -1,   509,   510,
     511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,
     521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
     531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,    -1,   560,
     561,   562,   563,    -1,    -1,   566,   567,    -1,   569,   570,
     571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,
      -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,   590,
      -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,
      -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,
      -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,
     621,   622,   623,   624,   625,   626,   627,    -1,    -1,    -1,
      -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,
       5,   642,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,   652,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,
      45,    46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,
      55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,
      65,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,
     145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
     155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,
     165,   166,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,   178,    -1,    -1,   181,   182,   183,   184,
      -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,
     195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,   231,   232,   233,   234,
      -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,
      -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,
     255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,
      -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,
     275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,
      -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
     315,   316,    -1,   318,   319,   320,   321,    -1,   323,   324,
     325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,
     335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,
      -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,
     375,   376,    -1,   378,   379,   380,   381,    -1,   383,   384,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,    -1,    -1,   414,
     415,   416,    -1,   418,    -1,   420,   421,   422,   423,   424,
      -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,    -1,    -1,   442,   443,   444,
     445,   446,    -1,   448,   449,    -1,   451,   452,   453,    -1,
      -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,   464,
      -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,    -1,   484,
     485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,
      -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,
     505,   506,   507,    -1,   509,   510,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,    -1,   560,   561,   562,   563,    -1,
      -1,   566,   567,    -1,   569,   570,   571,   572,    -1,    -1,
      -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,
     585,   586,   587,    -1,   589,   590,    -1,   592,   593,    -1,
     595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,
      -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,
      -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,
     625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,
     635,    -1,   637,   638,   639,    -1,     5,   642,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,   652,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
      49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,
      59,    -1,    61,    62,    -1,    64,    65,    -1,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
      -1,   140,    -1,   142,   143,   144,   145,   146,    -1,    -1,
      -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,
      -1,   160,    -1,   162,   163,    -1,   165,   166,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,   178,
      -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,   188,
      -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,
     199,   200,    -1,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,    -1,   217,   218,
     219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,   238,
     239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,
     249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,
     259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,
      -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,
      -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,    -1,   313,   314,   315,   316,    -1,   318,
     319,   320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,
      -1,   330,   331,   332,   333,   334,   335,    -1,    -1,   338,
     339,    -1,   341,    -1,   343,    -1,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,    -1,    -1,   357,    -1,
      -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,   368,
      -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,
     379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,    -1,    -1,   414,   415,   416,    -1,   418,
      -1,   420,   421,   422,   423,   424,    -1,   426,   427,   428,
      -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,    -1,    -1,   442,   443,   444,   445,   446,    -1,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,
      -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,   468,
      -1,    -1,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,
     489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,
      -1,   500,    -1,   502,   503,   504,   505,   506,   507,    -1,
     509,   510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,
      -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
      -1,   560,   561,   562,   563,    -1,    -1,   566,   567,    -1,
     569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,
     589,   590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,
     599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,
      -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,
      -1,    -1,   621,   622,   623,   624,   625,   626,   627,    -1,
      -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,
     639,    -1,     5,   642,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,   652,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,
      -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,    52,
      -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,
      -1,    64,    65,    -1,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,
     143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,
      -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,
     163,    -1,   165,   166,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,   178,    -1,    -1,   181,   182,
     183,   184,    -1,    -1,   187,   188,    -1,   190,   191,   192,
      -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,
     233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,
     253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,
     263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,
      -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,
      -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,
      -1,    -1,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
     313,   314,   315,   316,    -1,   318,   319,   320,   321,    -1,
     323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,
     333,   334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,
     343,    -1,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,
     363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,
      -1,   374,   375,   376,    -1,   378,   379,   380,   381,    -1,
     383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,    -1,
      -1,   414,   415,   416,    -1,   418,    -1,   420,   421,   422,
     423,   424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,   442,
     443,   444,   445,   446,    -1,   448,   449,    -1,   451,   452,
     453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,
     463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
      -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,   492,
      -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,
     503,   504,   505,   506,   507,    -1,   509,   510,   511,   512,
     513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,    -1,   560,   561,   562,
     563,    -1,    -1,   566,   567,    -1,   569,   570,   571,   572,
      -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,
      -1,   584,   585,   586,   587,    -1,   589,   590,    -1,   592,
     593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,
      -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,
      -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,
     623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,
      -1,   634,   635,    -1,   637,   638,   639,    -1,     5,   642,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,   652,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    34,    -1,    -1,
      37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
      47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,
      -1,    58,    59,    -1,    61,    62,    -1,    64,    65,    -1,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,   146,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,
      -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,   178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,
     187,   188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,
      -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,    -1,
     217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,
      -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,
      -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,
      -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,
     267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,
      -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,
      -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
      -1,   318,   319,   320,   321,    -1,   323,   324,   325,    -1,
      -1,    -1,    -1,   330,   331,   332,   333,   334,   335,    -1,
      -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,    -1,    -1,
     357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,
     367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,
      -1,   378,   379,   380,   381,    -1,   383,   384,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,   400,    -1,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,    -1,    -1,   414,   415,   416,
      -1,   418,    -1,   420,   421,   422,   423,   424,    -1,   426,
     427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,    -1,    -1,   442,   443,   444,   445,   446,
      -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,   456,
      -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,   466,
      -1,   468,    -1,    -1,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,    -1,   484,   485,    -1,
      -1,    -1,   489,   490,   491,   492,    -1,    -1,   495,   496,
      -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,   506,
     507,    -1,   509,   510,   511,   512,   513,   514,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,    -1,   560,   561,   562,   563,    -1,   565,   566,
     567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,
      -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,   586,
     587,    -1,   589,   590,    -1,   592,   593,    -1,   595,   596,
      -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,
     607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,
     617,    -1,    -1,    -1,   621,   622,   623,   624,   625,   626,
     627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,
     637,   638,   639,    -1,    -1,   642,    -1,     5,   645,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,   104,    -1,   106,    -1,
     108,    -1,   110,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,   136,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,   152,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,   241,    -1,   243,    -1,    -1,    -1,   247,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,   287,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,   486,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,   581,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,   603,   604,   605,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,   104,    -1,   106,    -1,   108,    -1,   110,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,   136,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
     152,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,   241,
      -1,   243,    -1,    -1,    -1,   247,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,   287,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,   486,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,   581,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,   603,   604,   605,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,   222,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,    -1,    -1,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,   517,   518,   519,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,   588,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,   222,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,   292,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,   371,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,   588,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,   222,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,   588,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,   222,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
     588,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,   109,   110,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
     276,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    39,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,   222,   223,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,   292,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,   371,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,   397,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,   588,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,   292,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,   371,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,   397,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
     588,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    37,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,   292,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,   371,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,   397,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,   588,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,   109,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,   276,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    13,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,   276,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,   110,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,   276,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,   565,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,   276,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,   565,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
     276,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,   276,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,   565,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    20,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,   565,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,   180,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,   518,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,   565,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    13,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    51,    52,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    62,    -1,
      64,    65,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,   151,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,   178,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,   195,    -1,    -1,    -1,   199,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,    -1,   217,   218,   219,    -1,   221,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,   266,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,   367,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,   383,
     384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,    -1,    -1,
     414,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,   449,    -1,   451,   452,   453,
      -1,    -1,   456,    -1,   458,    -1,   460,   461,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,   485,    -1,    -1,    -1,   489,   490,   491,   492,    -1,
      -1,    -1,   496,    -1,    -1,    -1,   500,    -1,   502,   503,
     504,   505,   506,   507,    -1,   509,   510,   511,   512,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
     584,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,   595,   596,    -1,    -1,   599,    -1,    -1,   602,    -1,
     604,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,   635,    -1,   637,   638,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    51,    52,    -1,    -1,    55,    -1,    -1,
      58,    59,    -1,    61,    62,    -1,    64,    65,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,   151,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
     178,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,    -1,   190,   191,   192,    -1,    -1,   195,    -1,    -1,
      -1,   199,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,    -1,   217,
     218,   219,    -1,   221,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,    -1,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,    -1,    -1,    -1,   263,    -1,    -1,   266,   267,
     268,    -1,    -1,   271,    -1,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,    -1,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,   367,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,   383,   384,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,    -1,    -1,   414,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,   449,    -1,   451,   452,   453,    -1,    -1,   456,    -1,
     458,    -1,   460,   461,    -1,   463,   464,    -1,   466,    -1,
     468,    -1,    -1,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,   485,    -1,    -1,
      -1,   489,   490,   491,   492,    -1,    -1,    -1,   496,    -1,
      -1,    -1,   500,    -1,   502,   503,   504,   505,   506,   507,
      -1,   509,   510,   511,   512,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,   584,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,   595,   596,    -1,
      -1,   599,    -1,    -1,   602,    -1,   604,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,    -1,    -1,    -1,    -1,   634,   635,    -1,   637,
     638,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    51,
      52,    -1,    -1,    55,    -1,    -1,    58,    59,    -1,    61,
      62,    -1,    64,    65,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,   151,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,   178,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,    -1,   190,   191,
     192,    -1,    -1,   195,    -1,    -1,    -1,   199,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,    -1,   217,   218,   219,    -1,   221,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,    -1,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,    -1,    -1,
      -1,   263,    -1,    -1,   266,   267,   268,    -1,    -1,   271,
      -1,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,   367,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,   383,   384,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
      -1,    -1,   414,   415,   416,   417,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,   449,    -1,   451,
     452,   453,    -1,    -1,   456,    -1,   458,    -1,   460,   461,
      -1,   463,   464,    -1,   466,    -1,   468,    -1,    -1,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,   484,   485,    -1,    -1,    -1,   489,   490,   491,
     492,    -1,    -1,    -1,   496,    -1,    -1,    -1,   500,    -1,
     502,   503,   504,   505,   506,   507,    -1,   509,   510,   511,
     512,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,   584,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,   595,   596,    -1,    -1,   599,    -1,    -1,
     602,    -1,   604,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,    -1,    -1,
      -1,    -1,   634,   635,    -1,   637,   638,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    51,    52,    -1,    -1,    55,
      -1,    -1,    58,    59,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,   178,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,    -1,   190,   191,   192,    -1,    -1,   195,
      -1,    -1,    -1,   199,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
      -1,   217,   218,   219,    -1,   221,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,    -1,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,    -1,    -1,    -1,   263,    -1,    -1,
     266,   267,   268,    -1,    -1,   271,    -1,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,    -1,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,   367,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,   383,   384,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,    -1,    -1,   414,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,   449,    -1,   451,   452,   453,    -1,    -1,
     456,    -1,   458,    -1,   460,   461,    -1,   463,   464,    -1,
     466,    -1,   468,    -1,    -1,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,   484,   485,
      -1,    -1,    -1,   489,   490,   491,   492,    -1,    -1,    -1,
     496,    -1,    -1,    -1,   500,    -1,   502,   503,   504,   505,
     506,   507,    -1,   509,   510,   511,   512,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,   584,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,   595,
     596,    -1,    -1,   599,    -1,    -1,   602,    -1,   604,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,    -1,    -1,    -1,    -1,   634,   635,
      -1,   637,   638,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    51,    52,    -1,    -1,    55,    -1,    -1,    58,    59,
      -1,    61,    62,    -1,    64,    65,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,   151,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,   178,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,    -1,
     190,   191,   192,    -1,    -1,   195,    -1,    -1,    -1,   199,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,    -1,   217,   218,   219,
      -1,   221,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,    -1,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
      -1,    -1,    -1,   263,    -1,    -1,   266,   267,   268,    -1,
      -1,   271,    -1,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,    -1,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,   367,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,   383,   384,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,    -1,    -1,   414,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,   449,
      -1,   451,   452,   453,    -1,    -1,   456,    -1,   458,    -1,
     460,   461,    -1,   463,   464,    -1,   466,    -1,   468,    -1,
      -1,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,   484,   485,    -1,    -1,    -1,   489,
     490,   491,   492,    -1,    -1,    -1,   496,    -1,    -1,    -1,
     500,    -1,   502,   503,   504,   505,   506,   507,    -1,   509,
     510,   511,   512,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,   584,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,   595,   596,    -1,    -1,   599,
      -1,    -1,   602,    -1,   604,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
      -1,    -1,    -1,    -1,   634,   635,    -1,   637,   638,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   155,   156,    -1,   158,   159,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,    -1,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,   189,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,   260,    -1,    -1,   263,
      -1,    -1,    -1,   267,   268,    -1,    -1,   271,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,
     454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,
     464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
     484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,
      -1,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,   630,    -1,    -1,    -1,
     634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,
     158,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,    -1,
      -1,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,    -1,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,   260,    -1,    -1,   263,    -1,    -1,    -1,   267,
     268,    -1,    -1,   271,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,
      -1,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,    -1,    -1,   451,    -1,   453,   454,    -1,   456,    -1,
      -1,    -1,   460,    -1,    -1,   463,   464,    -1,   466,   467,
     468,    -1,    -1,   471,    -1,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,
      -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,
      -1,   509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,   537,
      -1,    -1,    -1,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,
      -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
     628,    -1,   630,    -1,    -1,    -1,   634,    -1,    -1,   637,
      -1,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    84,    -1,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,   155,   156,    -1,   158,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,   189,   190,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,   260,    -1,
      -1,   263,    -1,    -1,    -1,   267,   268,    -1,    -1,   271,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,    -1,    -1,   451,
      -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,
      -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,   471,
      -1,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,
      -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,
     602,    -1,    -1,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,   628,    -1,   630,    -1,
      -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,   162,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,    -1,    -1,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,   260,    -1,    -1,   263,    -1,    -1,
      -1,   267,   268,    -1,    -1,   271,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
      -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,
     456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,
     466,   467,   468,    -1,    -1,   471,    -1,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,   484,    -1,
      -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,
     506,   507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
      -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,    -1,
      -1,   637,    -1,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,   162,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,    -1,    -1,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,   189,
     190,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,    -1,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
     260,    -1,    -1,   263,    -1,    -1,    -1,   267,   268,    -1,
      -1,   271,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,    -1,
      -1,   451,    -1,   453,   454,    -1,   456,    -1,    -1,    -1,
     460,    -1,    -1,   463,   464,    -1,   466,   467,   468,    -1,
      -1,   471,    -1,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,   489,
     490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,
      -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,   599,
      -1,    -1,   602,    -1,    -1,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
     630,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,   162,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,    -1,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,   189,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,   235,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,   260,    -1,    -1,   263,
      -1,    -1,    -1,   267,   268,    -1,    -1,   271,   272,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,
     454,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,
     464,    -1,   466,   467,   468,    -1,    -1,   471,    -1,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
     484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,
      -1,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,   630,    -1,    -1,    -1,
     634,    -1,    -1,   637,    -1,   639,    -1,     5,   642,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,
      58,    59,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,    -1,   140,    -1,   142,   143,   144,   145,   146,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   154,   155,   156,    -1,
      -1,    -1,   160,    -1,   162,   163,    -1,   165,   166,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,    -1,
      -1,    -1,    -1,   181,   182,   183,   184,    -1,    -1,   187,
     188,   189,   190,   191,   192,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   200,    -1,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,    -1,   212,    -1,   214,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
      -1,    -1,   230,   231,   232,   233,   234,   235,    -1,    -1,
     238,   239,   240,    -1,    -1,   243,    -1,    -1,    -1,    -1,
     248,    -1,    -1,    -1,    -1,   253,    -1,   255,   256,    -1,
     258,   259,   260,    -1,    -1,   263,    -1,    -1,    -1,   267,
     268,    -1,    -1,   271,   272,    -1,   274,   275,    -1,    -1,
      -1,    -1,    -1,   281,   282,    -1,   284,    -1,   286,    -1,
     288,   289,    -1,    -1,    -1,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,    -1,   313,   314,   315,   316,    -1,
     318,   319,   320,   321,    -1,   323,   324,   325,    -1,    -1,
      -1,    -1,   330,   331,   332,   333,   334,   335,    -1,    -1,
     338,   339,    -1,   341,    -1,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,    -1,    -1,   357,
      -1,    -1,   360,   361,   362,   363,    -1,    -1,    -1,    -1,
     368,    -1,    -1,    -1,   372,    -1,   374,   375,   376,    -1,
     378,   379,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   394,   395,    -1,    -1,
      -1,    -1,   400,    -1,   402,   403,   404,   405,   406,   407,
     408,   409,   410,    -1,    -1,    -1,    -1,   415,   416,    -1,
     418,    -1,   420,   421,   422,   423,   424,    -1,   426,   427,
     428,    -1,    -1,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,    -1,    -1,   442,   443,   444,   445,   446,    -1,
     448,    -1,    -1,   451,    -1,   453,   454,    -1,   456,    -1,
      -1,    -1,   460,    -1,    -1,   463,   464,    -1,   466,   467,
     468,    -1,    -1,   471,    -1,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,   484,    -1,    -1,    -1,
      -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,
      -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,   506,   507,
      -1,   509,    -1,   511,    -1,   513,   514,    -1,    -1,    -1,
      -1,    -1,    -1,   521,   522,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,   531,    -1,   533,    -1,    -1,    -1,   537,
      -1,    -1,    -1,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,    -1,   560,   561,   562,   563,    -1,    -1,   566,   567,
      -1,   569,   570,   571,   572,    -1,    -1,    -1,    -1,    -1,
     578,   579,   580,    -1,    -1,    -1,    -1,   585,   586,   587,
      -1,   589,   590,    -1,   592,   593,    -1,    -1,    -1,    -1,
      -1,   599,    -1,    -1,   602,    -1,    -1,    -1,   606,   607,
      -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,    -1,   617,
      -1,    -1,    -1,   621,   622,   623,   624,   625,   626,   627,
      -1,    -1,   630,    -1,    -1,    -1,   634,    -1,    -1,   637,
      -1,   639,    -1,     5,   642,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      42,    -1,    -1,    45,    46,    47,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    55,    56,    -1,    58,    59,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    84,    -1,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,    -1,   140,    -1,
     142,   143,   144,   145,   146,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   154,   155,   156,    -1,    -1,    -1,   160,    -1,
     162,   163,    -1,   165,   166,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,    -1,    -1,    -1,    -1,   181,
     182,   183,   184,    -1,    -1,   187,   188,   189,   190,   191,
     192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,    -1,
     212,    -1,   214,    -1,    -1,    -1,   218,   219,    -1,    -1,
      -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,   230,   231,
     232,   233,   234,   235,    -1,    -1,   238,   239,   240,    -1,
      -1,   243,    -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,
      -1,   253,    -1,   255,   256,    -1,   258,   259,   260,    -1,
      -1,   263,    -1,    -1,    -1,   267,   268,    -1,    -1,   271,
     272,    -1,   274,   275,    -1,    -1,    -1,    -1,    -1,   281,
     282,    -1,   284,    -1,   286,    -1,   288,   289,    -1,    -1,
      -1,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
      -1,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
      -1,   323,   324,   325,    -1,    -1,    -1,    -1,   330,   331,
     332,   333,   334,   335,    -1,    -1,   338,   339,    -1,   341,
      -1,   343,    -1,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,    -1,    -1,   357,    -1,    -1,   360,   361,
     362,   363,    -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,
     372,    -1,   374,   375,   376,    -1,   378,   379,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   394,   395,    -1,    -1,    -1,    -1,   400,    -1,
     402,   403,   404,   405,   406,   407,   408,   409,   410,    -1,
      -1,    -1,    -1,   415,   416,    -1,   418,    -1,   420,   421,
     422,   423,   424,    -1,   426,   427,   428,    -1,    -1,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,    -1,    -1,
     442,   443,   444,   445,   446,    -1,   448,    -1,    -1,   451,
      -1,   453,   454,    -1,   456,    -1,    -1,    -1,   460,    -1,
      -1,   463,   464,    -1,   466,   467,   468,    -1,    -1,   471,
      -1,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,   484,    -1,    -1,    -1,    -1,   489,   490,   491,
      -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,
      -1,   503,    -1,    -1,   506,   507,    -1,   509,    -1,   511,
      -1,   513,   514,    -1,    -1,    -1,    -1,    -1,    -1,   521,
     522,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,   531,
      -1,   533,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,    -1,   560,   561,
     562,   563,    -1,    -1,   566,   567,    -1,   569,   570,   571,
     572,    -1,    -1,    -1,    -1,    -1,   578,   579,   580,    -1,
      -1,    -1,    -1,   585,   586,   587,    -1,   589,   590,    -1,
     592,   593,    -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,
     602,    -1,    -1,    -1,   606,   607,    -1,    -1,    -1,    -1,
      -1,    -1,   614,    -1,    -1,   617,    -1,    -1,    -1,   621,
     622,   623,   624,   625,   626,   627,    -1,    -1,   630,    -1,
      -1,    -1,   634,    -1,    -1,   637,    -1,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    -1,    42,    -1,    -1,    45,
      46,    47,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
      56,    -1,    58,    59,    -1,    61,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,    -1,   140,    -1,   142,   143,   144,   145,
     146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   154,   155,
     156,    -1,    -1,    -1,   160,    -1,    -1,   163,    -1,   165,
     166,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,    -1,    -1,    -1,    -1,   181,   182,   183,   184,    -1,
      -1,   187,   188,   189,   190,   191,   192,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   200,    -1,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,    -1,   212,    -1,   214,    -1,
      -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,
     226,    -1,    -1,    -1,   230,   231,   232,   233,   234,   235,
      -1,    -1,   238,   239,   240,    -1,    -1,   243,    -1,    -1,
      -1,    -1,   248,    -1,    -1,    -1,    -1,   253,    -1,   255,
     256,    -1,   258,   259,   260,    -1,    -1,   263,    -1,    -1,
      -1,   267,   268,    -1,    -1,   271,   272,    -1,   274,   275,
      -1,    -1,    -1,    -1,    -1,   281,   282,    -1,   284,    -1,
     286,    -1,   288,   289,    -1,    -1,    -1,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
     316,    -1,   318,   319,   320,   321,    -1,   323,   324,   325,
      -1,    -1,    -1,    -1,   330,   331,   332,   333,   334,   335,
      -1,    -1,   338,   339,    -1,   341,    -1,   343,    -1,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,    -1,
      -1,   357,    -1,    -1,   360,   361,   362,   363,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,   372,    -1,   374,   375,
     376,    -1,   378,   379,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   394,   395,
      -1,    -1,    -1,    -1,   400,    -1,   402,   403,   404,   405,
     406,   407,   408,   409,   410,    -1,    -1,    -1,    -1,   415,
     416,    -1,   418,    -1,   420,   421,   422,   423,   424,    -1,
     426,   427,   428,    -1,    -1,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,    -1,    -1,   442,   443,   444,   445,
     446,    -1,   448,    -1,    -1,   451,    -1,   453,   454,    -1,
     456,    -1,    -1,    -1,   460,    -1,    -1,   463,   464,    -1,
     466,   467,   468,    -1,    -1,   471,    -1,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,   484,    -1,
      -1,    -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,
     496,    -1,    -1,    -1,    -1,    -1,    -1,   503,    -1,    -1,
     506,   507,    -1,   509,    -1,   511,    -1,   513,   514,    -1,
      -1,    -1,    -1,    -1,    -1,   521,   522,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,   531,    -1,   533,    -1,    -1,
      -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,    -1,   560,   561,   562,   563,    -1,    -1,
     566,   567,    -1,   569,   570,   571,   572,    -1,    -1,    -1,
      -1,    -1,   578,   579,   580,    -1,    -1,    -1,    -1,   585,
     586,   587,    -1,   589,   590,    -1,   592,   593,    -1,    -1,
      -1,    -1,    -1,   599,    -1,    -1,   602,    -1,    -1,    -1,
     606,   607,    -1,    -1,    -1,    -1,    -1,    -1,   614,    -1,
      -1,   617,    -1,    -1,    -1,   621,   622,   623,   624,   625,
     626,   627,    -1,    -1,   630,    -1,    -1,    -1,   634,    -1,
      -1,   637,    -1,   639,    -1,     5,   642,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    49,
      -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    58,    59,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,    -1,
     140,    -1,   142,   143,   144,   145,   146,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   154,   155,   156,    -1,    -1,    -1,
     160,    -1,    -1,   163,    -1,   165,   166,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,    -1,    -1,    -1,
      -1,   181,   182,   183,   184,    -1,    -1,   187,   188,   189,
     190,   191,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     200,    -1,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,    -1,   212,    -1,   214,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
     230,   231,   232,   233,   234,   235,    -1,    -1,   238,   239,
     240,    -1,    -1,   243,    -1,    -1,    -1,    -1,   248,    -1,
      -1,    -1,    -1,   253,    -1,   255,   256,    -1,   258,   259,
     260,    -1,    -1,   263,    -1,    -1,    -1,   267,   268,    -1,
      -1,   271,   272,    -1,   274,   275,    -1,    -1,    -1,    -1,
      -1,   281,   282,    -1,   284,    -1,   286,    -1,   288,   289,
      -1,    -1,    -1,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,    -1,   313,   314,   315,   316,    -1,   318,   319,
     320,   321,    -1,   323,   324,   325,    -1,    -1,    -1,    -1,
     330,   331,   332,   333,   334,   335,    -1,    -1,   338,   339,
      -1,   341,    -1,   343,    -1,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,    -1,    -1,   357,    -1,    -1,
     360,   361,   362,   363,    -1,    -1,    -1,    -1,   368,    -1,
      -1,    -1,   372,    -1,   374,   375,   376,    -1,   378,   379,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   394,   395,    -1,    -1,    -1,    -1,
     400,    -1,   402,   403,   404,   405,   406,   407,   408,   409,
     410,    -1,    -1,    -1,    -1,   415,   416,    -1,   418,    -1,
     420,   421,   422,   423,   424,    -1,   426,   427,   428,    -1,
      -1,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
      -1,    -1,   442,   443,   444,   445,   446,    -1,   448,    -1,
      -1,   451,    -1,   453,   454,    -1,   456,    -1,    -1,    -1,
     460,    -1,    -1,   463,   464,    -1,   466,   467,   468,    -1,
      -1,   471,    -1,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,   484,    -1,    -1,    -1,    -1,   489,
     490,   491,    -1,    -1,    -1,    -1,   496,    -1,    -1,    -1,
      -1,    -1,    -1,   503,    -1,    -1,   506,   507,    -1,   509,
      -1,   511,    -1,   513,   514,    -1,    -1,    -1,    -1,    -1,
      -1,   521,   522,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,   531,    -1,   533,    -1,    -1,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,    -1,
     560,   561,   562,   563,    -1,    -1,   566,   567,    -1,   569,
     570,   571,   572,    -1,    -1,    -1,    -1,    -1,   578,   579,
     580,    -1,    -1,    -1,    -1,   585,   586,   587,    -1,   589,
     590,    -1,   592,   593,    -1,    -1,    -1,    -1,    -1,   599,
      -1,    -1,   602,    -1,    -1,    -1,   606,   607,    -1,    -1,
      -1,    -1,    -1,    -1,   614,    -1,    -1,   617,    -1,    -1,
      -1,   621,   622,   623,   624,   625,   626,   627,    -1,    -1,
     630,    -1,    -1,    -1,   634,    -1,    -1,   637,    -1,   639,
      -1,     5,   642,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,    -1,    42,    -1,
      -1,    45,    46,    47,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    -1,    58,    59,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,    -1,   140,    -1,   142,   143,
     144,   145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     154,   155,   156,    -1,    -1,    -1,   160,    -1,    -1,   163,
      -1,   165,   166,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,    -1,    -1,    -1,    -1,   181,   182,   183,
     184,    -1,    -1,   187,   188,    -1,   190,   191,   192,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   200,    -1,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,    -1,   212,    -1,
     214,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,
      -1,    -1,   226,    -1,    -1,    -1,   230,   231,   232,   233,
     234,    -1,    -1,    -1,   238,   239,   240,    -1,    -1,   243,
      -1,    -1,    -1,    -1,   248,    -1,    -1,    -1,    -1,   253,
      -1,   255,   256,    -1,   258,   259,    -1,    -1,    -1,   263,
      -1,    -1,    -1,   267,   268,    -1,    -1,   271,    -1,    -1,
     274,   275,    -1,    -1,    -1,    -1,    -1,   281,   282,    -1,
     284,    -1,   286,    -1,   288,   289,    -1,    -1,    -1,    -1,
      -1,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
     314,   315,   316,    -1,   318,   319,   320,   321,    -1,   323,
     324,   325,    -1,    -1,    -1,    -1,   330,   331,   332,   333,
     334,   335,    -1,    -1,   338,   339,    -1,   341,    -1,   343,
      -1,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,    -1,    -1,   357,    -1,    -1,   360,   361,   362,   363,
      -1,    -1,    -1,    -1,   368,    -1,    -1,    -1,   372,    -1,
     374,   375,   376,    -1,   378,   379,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     394,   395,    -1,    -1,    -1,    -1,   400,    -1,   402,   403,
     404,   405,   406,   407,   408,   409,   410,    -1,    -1,    -1,
      -1,   415,   416,    -1,   418,    -1,   420,   421,   422,   423,
     424,    -1,   426,   427,   428,    -1,    -1,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,    -1,    -1,   442,   443,
     444,   445,   446,    -1,   448,    -1,    -1,   451,    -1,   453,
      -1,    -1,   456,    -1,    -1,    -1,   460,    -1,    -1,   463,
     464,    -1,   466,    -1,   468,    -1,    -1,   471,    -1,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
     484,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,
      -1,    -1,   496,    -1,    -1,    -1,    -1,    -1,    -1,   503,
      -1,    -1,   506,   507,    -1,   509,    -1,   511,    -1,   513,
     514,    -1,    -1,    -1,    -1,    -1,    -1,   521,   522,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,   531,    -1,   533,
      -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,    -1,   560,   561,   562,   563,
      -1,    -1,   566,   567,    -1,   569,   570,   571,   572,    -1,
      -1,    -1,    -1,    -1,   578,   579,   580,    -1,    -1,    -1,
      -1,   585,   586,   587,    -1,   589,   590,    -1,   592,   593,
      -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,   602,    -1,
      -1,    -1,   606,   607,    -1,    -1,    -1,    -1,    -1,    -1,
     614,    -1,    -1,   617,    -1,    -1,    -1,   621,   622,   623,
     624,   625,   626,   627,    -1,    -1,    -1,    -1,    -1,    -1,
     634,    -1,    -1,   637,    -1,   639,    -1,    -1,   642
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    34,    38,    52,    53,    56,    60,    65,
      66,    85,   104,   128,   136,   138,   139,   151,   152,   164,
     178,   195,   211,   213,   217,   221,   235,   247,   249,   265,
     283,   287,   294,   382,   399,   401,   414,   425,   447,   450,
     452,   454,   455,   458,   459,   469,   472,   480,   486,   494,
     499,   500,   501,   532,   540,   584,   596,   600,   603,   608,
     630,   638,   644,   657,   668,   671,   672,   673,   674,   675,
     677,   682,   684,   697,   728,   756,   763,   764,   778,   779,
     798,   817,   832,   892,   946,   984,  1065,  1110,  1113,  1123,
    1128,  1134,  1147,  1150,  1156,  1159,  1164,  1171,  1183,  1184,
    1360,  1362,  1374,  1377,  1402,  1410,  1423,  1430,  1444,  1448,
    1449,  1453,  1467,  1475,  1479,  1484,  1485,  1486,  1540,  1571,
    1577,  1579,  1586,  1589,  1623,  1625,  1631,  1632,  1633,  1634,
    1687,  1695,  1696,  1697,    12,   115,   133,   204,   288,   419,
     492,   557,  1066,  1656,  1657,  1658,  1659,   199,   284,   369,
    1158,  1451,   364,   365,  1217,  1624,   565,  1529,   241,     5,
       7,     8,     9,    10,    11,    12,    15,    19,    22,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    34,    38,
      42,    45,    46,    47,    49,    51,    52,    55,    58,    59,
      61,    62,    64,    65,    67,    68,    69,    70,    71,    72,
      74,    75,    76,    77,    78,    79,    80,    82,    83,    84,
      85,    86,    87,    88,    89,    91,    92,    94,    95,    96,
      97,    98,   100,   103,   106,   108,   111,   113,   117,   118,
     119,   122,   127,   128,   133,   135,   140,   142,   143,   144,
     145,   146,   151,   154,   155,   156,   160,   162,   163,   165,
     166,   167,   169,   170,   172,   173,   174,   175,   176,   177,
     178,   181,   182,   183,   184,   187,   188,   190,   191,   192,
     195,   199,   200,   202,   204,   206,   207,   208,   209,   210,
     211,   212,   214,   217,   218,   219,   221,   225,   226,   230,
     231,   232,   233,   234,   238,   239,   240,   243,   248,   249,
     253,   255,   256,   258,   259,   263,   266,   267,   268,   271,
     274,   275,   281,   282,   284,   286,   288,   289,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   313,   314,   315,   316,   318,   319,
     320,   321,   323,   324,   325,   330,   331,   332,   333,   334,
     335,   338,   339,   341,   343,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   357,   360,   361,   362,   363,
     367,   368,   372,   374,   375,   376,   378,   379,   380,   381,
     383,   384,   393,   394,   395,   398,   400,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   414,   415,   416,
     418,   420,   421,   422,   423,   424,   426,   427,   428,   431,
     435,   436,   437,   438,   439,   442,   443,   444,   445,   446,
     448,   449,   451,   452,   453,   456,   458,   460,   461,   463,
     464,   466,   468,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   484,   485,   489,   490,   491,
     492,   496,   500,   502,   503,   504,   505,   506,   507,   509,
     510,   511,   512,   513,   514,   521,   522,   524,   527,   531,
     532,   533,   537,   540,   541,   543,   544,   545,   546,   547,
     548,   551,   552,   553,   554,   556,   557,   560,   561,   562,
     563,   566,   567,   569,   570,   571,   572,   578,   579,   580,
     584,   585,   586,   587,   589,   590,   592,   593,   595,   596,
     599,   602,   604,   606,   607,   614,   617,   621,   622,   623,
     624,   625,   626,   627,   634,   635,   637,   638,   639,   642,
     722,  1528,  1532,  1538,  1539,   799,   313,   556,   559,  1573,
    1151,   634,  1627,   288,   389,   557,  1411,  1361,   115,   174,
     204,   241,   288,   419,   471,   492,   557,   562,   581,   606,
     622,  1373,  1532,  1158,   108,   765,   721,   665,  1525,  1527,
    1532,   683,   780,  1375,   408,   512,  1480,   118,   241,   639,
    1491,  1573,   833,  1158,   657,   893,  1532,  1476,   480,   606,
    1573,  1158,   835,  1378,  1468,   518,   753,   757,   758,  1532,
     721,  1627,  1532,  1189,  1191,  1192,  1193,   533,  1541,  1431,
     757,    13,   504,   578,    13,   504,   559,  1425,   408,   512,
    1578,  1403,  1532,   834,    34,    85,   162,   414,   436,   472,
     532,  1689,   657,  1185,  1186,     0,   164,   669,   414,   115,
     203,   471,   515,   598,   606,   703,   704,  1043,  1044,  1045,
    1373,   183,   199,   402,  1450,  1451,  1525,  1532,   645,  1078,
    1532,   645,   722,   215,   722,   276,  1529,  1532,  1534,   838,
     839,   842,   865,  1532,  1102,  1103,  1072,  1205,  1656,   645,
    1573,  1183,  1374,  1377,  1402,  1410,  1447,    25,  1627,  1165,
     729,   665,   628,   800,   801,   804,   808,   695,   696,  1529,
    1124,   622,  1148,  1573,    18,  1628,   215,   455,   840,   865,
     237,   295,   428,  1421,  1422,     8,    22,    31,    37,    39,
      40,    41,    43,    56,    57,    62,    63,    71,    74,    76,
      77,    78,    79,    80,    97,   101,   102,   107,   109,   110,
     114,   115,   120,   121,   122,   127,   129,   132,   179,   185,
     186,   193,   199,   208,   210,   216,   222,   223,   230,   235,
     247,   250,   268,   273,   281,   292,   317,   322,   334,   338,
     340,   344,   345,   346,   347,   348,   356,   364,   365,   366,
     370,   371,   376,   397,   404,   409,   410,   412,   426,   454,
     455,   468,   470,   477,   478,   484,   538,   539,   545,   549,
     550,   555,   565,   569,   570,   571,   572,   582,   583,   584,
     588,   591,   606,   610,   611,   612,   613,   618,   620,   626,
     627,   642,   650,   651,   656,   657,   660,   661,   664,   665,
    1211,  1212,  1213,  1214,  1218,  1226,  1227,  1228,  1229,  1230,
    1231,  1239,  1243,  1257,  1510,  1513,  1515,  1516,  1517,  1521,
    1523,  1528,  1532,   235,  1372,  1372,  1372,   235,  1371,   215,
    1372,  1372,  1372,   865,  1372,  1372,  1372,  1573,   678,  1454,
     142,    13,    14,   104,   110,   136,   152,   174,   178,   190,
     213,   241,   247,   287,   420,   424,   440,   448,   456,   486,
     499,   500,   551,   581,   603,   605,  1534,  1590,  1594,  1595,
    1597,  1599,  1600,  1532,   381,    70,   432,   665,  1534,   793,
     794,   134,   224,   295,  1380,  1532,  1529,   218,   511,  1481,
     251,  1487,  1572,    34,    70,   189,   260,   272,   381,   467,
     742,   777,   778,   781,   782,   783,   785,   786,   787,   788,
     790,   813,   815,   821,   828,  1528,  1533,  1539,  1573,   985,
    1205,    50,   894,   201,    37,   313,  1436,  1477,  1532,   721,
    1160,  1129,   742,   824,   134,   295,  1381,  1409,   313,   427,
     504,  1469,  1470,   614,   754,   494,   759,     7,    13,   424,
    1587,  1588,  1595,  1597,   576,  1628,  1190,   251,   387,  1324,
    1325,  1354,  1355,    13,   147,   224,   520,   521,   522,   523,
     524,   525,   542,  1198,  1199,  1200,  1652,  1542,    62,    63,
     132,   212,   284,   352,   404,   471,   491,   578,   664,  1008,
    1532,  1545,  1557,  1561,  1562,    13,    26,    38,    62,    74,
     100,   102,   104,   116,   166,   170,   173,   202,   204,   212,
     214,   240,   241,   262,   284,   313,   381,   407,   418,   419,
     422,   423,   443,   491,   504,   541,   559,   625,  1008,  1042,
    1432,  1436,  1437,  1439,  1448,  1528,  1558,   759,   505,   695,
     432,   631,  1114,  1115,  1116,   505,   695,  1424,  1532,  1529,
    1573,  1409,   822,  1211,    39,   222,   223,   565,  1511,  1512,
    1530,  1688,  1688,  1688,  1688,  1688,  1185,   658,   486,   663,
    1532,   235,   945,   945,   945,  1653,  1657,  1658,  1659,   492,
     705,   241,   241,   241,   559,  1446,  1445,   332,   563,   590,
    1068,   604,   109,  1534,  1535,  1536,  1594,  1070,   844,   866,
    1532,  1069,  1074,     6,    60,   152,   365,   431,   433,   867,
     559,   237,   380,  1104,  1105,  1106,   526,  1660,  1661,   174,
    1071,  1534,  1135,   818,  1166,  1167,  1168,  1169,  1525,   657,
     730,  1532,   809,   158,   811,  1211,   808,   576,  1366,  1367,
    1525,  1149,  1366,    59,   367,   367,   447,  1629,   843,   866,
       6,   201,  1412,  1418,  1419,  1532,  1421,   657,   657,   657,
    1226,   657,   657,   657,  1211,  1260,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
    1210,  1210,  1210,   657,  1209,   657,   657,   657,   565,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,  1211,   657,   657,   657,   657,  1258,  1259,  1521,
    1532,   657,   657,   657,   657,   657,   657,   657,   657,   657,
    1211,  1209,   657,   657,   657,   657,   657,   657,   657,   657,
     657,   657,   657,   657,   657,   657,   657,   657,   657,   657,
    1209,   565,   657,   657,   657,   565,   657,   657,   657,   565,
    1512,   657,  1210,  1209,  1209,   657,   657,   657,   657,   657,
     657,  1226,  1226,  1226,  1211,  1647,  1648,  1532,  1244,  1532,
      17,    18,   386,   389,   640,  1215,  1216,   168,   205,   257,
     269,   358,   645,   646,   647,  1219,    35,   148,   254,   277,
     344,   441,   497,   498,   513,   648,   649,   650,   651,   652,
     653,   654,   655,  1217,  1226,    73,   388,   659,  1530,   657,
     665,   179,  1532,   722,  1532,   179,  1532,   866,   722,   721,
    1534,   876,  1437,   722,   721,  1365,  1372,   609,   679,    37,
     140,   166,   169,   206,   226,   289,   313,   418,   427,   442,
     460,   504,   507,   537,  1455,  1460,  1461,  1528,  1573,    90,
     664,   766,   767,   768,   769,  1532,   418,  1598,   474,   474,
     557,   562,   606,   622,  1210,   384,  1602,   556,   377,  1604,
      69,   504,  1601,   116,   622,  1603,   576,   377,   659,    20,
     645,  1310,  1311,  1580,  1532,   162,  1211,   237,  1101,   512,
      91,   427,  1482,    52,    89,   295,  1493,  1525,  1574,  1575,
     816,  1532,   201,   361,   791,  1533,  1533,  1532,   784,   162,
     777,   663,   672,   827,   666,  1157,   658,  1211,   279,   282,
     429,   895,   897,   664,   676,  1529,   289,  1161,  1535,  1537,
    1162,  1163,  1525,   622,  1126,  1573,   602,   827,   251,  1368,
    1382,  1383,  1525,  1472,    52,  1471,   659,  1530,    58,    68,
      82,    94,    95,    96,   113,   333,   351,   482,   544,   561,
     760,   762,   384,  1598,   377,   201,   377,   480,  1630,  1629,
     597,  1635,  1636,  1356,    50,   278,  1329,  1330,  1331,   201,
    1195,   198,   287,  1201,   652,  1202,  1203,  1205,  1200,   132,
    1544,  1560,  1562,   494,   471,   665,    37,   132,   495,   645,
    1009,  1010,  1393,  1534,   198,  1393,  1568,  1534,  1547,   664,
    1534,    37,   132,  1012,  1013,  1534,   665,  1548,  1546,  1393,
     505,   173,   277,   629,  1443,   657,   115,   174,   204,   419,
     559,   581,   622,  1443,    13,   955,  1534,  1329,   201,   254,
    1438,  1440,    72,   537,   198,   537,   556,   512,    72,   537,
      13,    45,    98,   103,   256,   331,   395,   514,   553,  1426,
    1427,  1428,   695,   226,   537,   696,   537,  1329,  1443,  1440,
     289,   165,    75,   421,   556,   580,   198,  1204,   537,   617,
    1117,  1118,  1117,   379,   636,    92,   659,  1117,  1117,  1367,
    1101,   827,   151,   659,   378,  1691,   552,  1692,   261,   463,
    1690,   658,  1636,  1638,  1639,  1640,  1641,  1191,   164,   670,
    1217,  1532,   721,   721,    11,   204,   419,   581,   709,  1205,
    1655,  1661,  1669,  1674,  1675,  1676,  1682,   204,   709,  1654,
    1661,  1669,  1676,  1682,  1656,   945,   945,   945,   945,   945,
    1447,  1452,  1511,  1532,   132,   942,   943,   952,   953,  1017,
     118,  1210,   664,   723,     6,   845,   723,   383,   117,   862,
     862,   862,     4,  1525,  1106,   485,   622,   722,  1661,  1136,
    1137,  1367,   819,   820,   254,   659,   401,  1177,  1179,  1180,
     731,   732,  1211,  1211,   742,   162,   802,   685,   183,   428,
     659,  1125,  1366,    61,   183,   187,   198,   330,   428,  1152,
    1153,  1154,    59,   447,   845,   862,  1369,  1370,  1525,  1526,
    1532,   659,  1415,   665,  1420,  1211,  1211,    13,   147,  1251,
    1312,  1251,  1251,  1251,   628,  1262,  1211,  1211,  1257,  1257,
    1211,  1211,  1211,  1211,  1224,  1225,  1211,  1211,  1211,  1211,
     147,  1251,  1312,   658,   129,   193,   222,   292,   371,   588,
     658,  1338,  1341,  1342,   658,  1211,  1211,  1211,  1211,  1521,
    1647,   123,   124,   125,   126,   127,   227,   228,   229,   230,
     334,   336,   337,   338,   345,   426,   483,   484,   626,   641,
     642,  1307,  1308,  1211,  1257,   119,   122,   569,   572,  1309,
     147,  1246,  1211,  1211,  1211,  1211,  1307,  1257,  1211,  1257,
    1259,    10,   659,   665,   147,  1251,  1211,  1211,   147,  1251,
    1211,  1211,  1257,  1257,  1257,  1211,  1211,  1211,  1257,  1214,
    1211,  1211,  1211,  1211,  1211,  1211,   658,  1211,  1251,  1251,
    1211,  1211,   147,  1251,  1211,  1308,  1308,  1211,    48,   270,
     577,  1211,  1211,   658,  1522,  1523,  1532,  1251,  1251,  1211,
    1211,  1211,   658,   659,   658,   486,   657,  1644,  1645,  1211,
     664,  1245,  1534,   665,  1211,  1211,  1211,  1213,   186,   370,
     583,   599,  1217,    13,    19,  1213,  1220,  1214,  1214,   657,
    1226,  1214,  1214,  1214,  1214,   277,  1214,  1214,   250,  1214,
     250,  1214,  1214,  1214,  1214,  1214,    35,   254,   277,   441,
    1534,  1226,  1211,  1232,  1532,   665,   377,   876,  1593,  1595,
     368,   624,   877,   878,   166,  1537,  1609,  1366,  1363,   664,
     680,   681,   289,   289,   289,   289,    52,   289,   695,   289,
     659,  1204,  1456,   122,   569,   572,   761,   771,  1243,  1515,
    1521,  1534,   659,   645,   556,   657,  1615,  1537,  1615,  1615,
    1615,  1535,  1536,  1537,  1610,  1614,   204,   419,   559,  1596,
     174,   178,   190,   420,   448,   456,   500,   551,  1600,  1532,
     191,   361,  1532,  1581,  1582,   235,   568,  1382,  1529,   231,
     606,  1211,  1483,  1172,   284,  1492,  1311,   659,   819,   201,
    1532,  1211,   294,   663,    34,   294,   454,   630,  1366,  1206,
      75,   657,   902,   903,   902,   903,   402,   905,   219,   264,
    1534,    33,   576,  1478,   659,   576,   659,   576,  1127,  1366,
     825,  1383,  1379,   401,  1276,  1277,   576,  1474,   695,  1470,
     659,   645,   198,   659,  1537,  1536,  1611,   204,   419,  1596,
    1532,    13,   147,  1643,   154,   391,  1349,  1350,  1357,  1326,
    1201,   292,   371,   475,   588,  1332,  1333,  1513,  1532,   153,
     486,   657,   661,  1197,  1263,  1264,  1265,  1266,  1267,  1278,
    1279,  1291,   629,  1313,   603,   254,   659,  1211,  1519,  1532,
     659,  1543,  1393,  1595,  1532,    73,  1015,  1211,  1537,   376,
     404,   565,  1569,   258,   432,  1563,  1564,  1565,  1566,   212,
     284,   491,  1559,  1393,  1532,   578,  1549,  1560,   659,  1551,
      13,    37,   132,   377,  1211,  1570,   537,   254,  1441,  1204,
    1204,   652,   945,   722,   722,   722,  1525,   722,  1525,   289,
     349,   537,  1435,  1435,  1443,  1532,   722,  1443,  1536,  1438,
    1443,  1529,   722,  1443,   255,   554,   188,   198,  1429,   659,
     173,   537,  1438,  1525,  1440,  1438,  1438,  1211,  1443,  1443,
    1443,  1112,   446,   527,  1119,  1120,  1111,   509,  1116,  1264,
     823,  1511,   406,  1693,  1325,  1331,  1642,   179,   702,  1593,
    1610,   204,  1675,   945,   945,  1205,   174,   945,  1661,  1534,
    1532,  1532,  1532,  1525,   943,    73,  1008,   143,  1534,    83,
      97,   266,   342,   367,   430,   526,   725,   727,   437,   592,
     863,   864,   243,   859,   860,   861,   868,   876,   878,   657,
    1529,    27,   321,   853,   854,   855,   868,   869,   870,   876,
     878,   846,   847,   853,  1067,   133,   253,   945,  1073,   659,
     405,  1138,   743,   132,  1170,  1532,  1168,  1525,   891,  1179,
     241,   264,  1040,  1181,   658,   659,   810,    56,   628,   803,
     805,   150,   236,   238,   296,   298,   299,   300,   301,   302,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   314,
     315,   316,   444,   445,   686,   687,   694,  1367,   198,  1155,
     604,  1153,    83,   362,   438,   593,   856,   857,   858,   868,
     872,   873,   874,   875,   876,   878,   608,   841,   659,  1416,
    1276,   665,  1420,  1419,   201,   652,  1532,   659,   658,  1251,
     658,  1252,   658,   658,   658,  1211,   158,   628,  1261,    20,
     658,   609,   658,   658,   658,   659,   658,   659,   658,   659,
     659,   659,   659,   609,   659,  1240,   658,   652,   658,   659,
     659,   658,   658,   658,   658,   201,   659,   658,   659,  1242,
     658,   659,   659,   659,   651,   658,   659,   658,   658,   657,
    1521,  1532,  1251,   658,   658,   658,  1251,   658,   659,   658,
     658,   658,   658,   658,   658,   659,   658,   254,   658,   659,
     659,   658,   659,   659,   658,   658,   658,   659,   201,   659,
    1251,   658,   658,   659,   659,   659,   658,   201,  1211,   201,
    1211,   201,  1211,   201,   658,   659,   658,   658,   658,   658,
     659,    20,   275,   659,  1031,   658,  1257,  1282,  1283,  1284,
     657,  1187,  1188,   597,  1649,   662,  1559,   495,  1532,   186,
     370,   583,   599,   657,    18,  1211,  1647,   172,  1317,  1214,
    1211,  1211,  1214,   657,  1226,  1214,  1205,  1236,  1237,  1238,
     657,   665,  1532,  1525,   877,   659,  1393,  1394,   659,    54,
     462,  1107,  1366,  1534,   659,   137,  1463,   695,  1461,  1366,
    1462,   769,   772,   773,   768,   372,   478,   770,  1532,  1616,
    1617,   576,   233,   631,   659,  1592,   652,  1525,  1532,  1608,
    1608,  1608,   191,   205,   267,   269,   361,   416,   645,   646,
     647,  1583,  1585,  1313,   795,  1376,  1537,  1173,  1174,  1175,
    1176,  1525,   242,   295,   432,   636,  1576,  1575,   251,   814,
     829,   831,   830,   657,  1205,  1338,   548,   906,   896,    12,
     898,  1211,  1529,  1537,  1537,  1163,  1525,  1366,   183,   428,
     607,  1130,  1131,  1132,  1211,   486,   494,   613,   614,   657,
     937,  1384,  1387,   657,   129,   193,   222,   292,   371,   588,
    1337,    13,  1473,   762,   761,  1595,   213,   201,   659,  1608,
    1608,  1608,  1637,   565,  1531,  1531,   664,  1351,  1352,  1353,
    1534,  1211,  1327,  1520,   177,   475,   375,   659,  1290,  1532,
     105,   244,   261,   273,   355,   470,   542,  1274,  1275,   659,
    1525,  1290,  1314,   215,  1318,   496,  1203,  1206,  1206,   665,
    1560,   198,  1570,   198,   132,  1014,  1016,  1534,  1393,   657,
     657,   275,   379,   636,   659,   659,   665,   665,   665,  1562,
    1211,  1563,  1550,  1552,  1553,  1529,   201,  1442,  1529,  1211,
     658,  1532,   721,  1443,   427,  1329,  1428,  1441,  1443,  1438,
    1525,  1443,  1443,   659,   602,  1121,   494,   742,   659,   198,
    1694,  1329,   941,   942,   631,  1591,   945,   722,  1532,   722,
     945,   945,   706,   586,   609,  1053,   377,   377,   698,  1394,
    1394,   353,  1529,   526,   526,   526,   526,   526,   485,  1529,
    1529,  1394,   659,   861,   115,   225,   393,   404,   411,   510,
     606,   707,   708,  1394,  1394,   659,   855,   848,   849,   868,
     869,   870,     6,    12,    14,    16,    28,    30,    60,    65,
      66,    71,    83,    91,   101,   118,   135,   144,   145,   152,
     160,   166,   176,   196,   239,   241,   248,   263,   287,   320,
     339,   343,   382,   387,   394,   396,   401,   404,   435,   449,
     450,   451,   452,   476,   534,   535,   536,   541,   557,   560,
     579,   584,   597,   889,   948,   950,   952,   953,  1079,  1083,
    1085,  1088,  1094,  1095,  1096,  1098,  1099,  1321,  1528,  1525,
     377,   717,  1075,  1137,   198,   131,   741,   744,  1178,   657,
    1211,   568,   806,   805,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   659,   604,  1394,
    1394,  1394,  1394,   659,   858,   288,   184,   850,   851,   852,
     868,   869,   870,   871,   874,   875,   876,   878,  1370,  1532,
     609,  1413,  1532,  1264,   665,  1420,   250,  1211,   658,  1211,
     568,  1211,  1211,   162,    37,    63,   119,   122,   130,   149,
     252,   357,   502,   572,   601,  1253,  1009,  1225,  1211,  1224,
    1257,  1211,  1211,  1009,  1253,  1257,   658,   250,   250,  1211,
    1211,  1211,  1257,  1211,  1211,  1211,  1211,  1211,  1214,   658,
     658,  1211,  1211,  1211,  1211,  1211,  1211,  1257,   250,  1211,
    1211,  1211,   658,  1211,  1211,  1211,  1211,   201,  1211,   201,
    1211,   201,  1211,  1211,  1211,    37,    63,  1026,  1027,  1028,
    1029,  1030,  1338,  1337,   658,   658,  1194,  1195,  1196,  1650,
    1651,  1652,  1187,   658,   486,  1643,  1534,  1211,  1647,  1213,
     658,   659,   658,  1226,  1307,  1307,    18,  1211,  1647,  1317,
    1211,   658,   659,  1256,  1257,  1532,  1364,  1595,   954,  1534,
    1537,  1107,   681,   645,   198,   631,  1457,  1458,   645,   659,
     658,   659,  1610,    50,   621,   631,  1612,     7,  1614,   665,
     665,   576,   576,   576,  1584,  1329,   742,  1384,   659,  1177,
    1179,  1531,   636,   284,    89,   789,   819,   821,   824,   822,
     899,   900,   901,  1532,   911,  1214,    50,   657,   913,   903,
     645,   657,   576,   201,  1133,  1131,   162,   938,  1385,   657,
    1390,  1395,  1390,   658,   937,  1386,  1518,  1519,  1522,  1532,
    1388,  1306,  1532,   645,   384,  1609,  1536,   201,   201,   201,
    1184,  1358,  1534,   659,   659,    21,   138,  1328,  1333,  1334,
     177,  1333,  1333,  1280,  1285,  1290,  1263,   261,   261,   390,
    1292,   273,   470,  1274,  1292,  1263,  1265,  1276,  1287,  1288,
    1211,    50,   220,  1315,   341,    20,  1207,  1529,  1532,   652,
    1532,   671,  1537,   565,   565,   432,   453,   489,  1567,  1565,
    1564,  1393,  1551,   659,  1555,  1557,  1561,   129,   193,   292,
     371,   588,  1339,  1433,   170,   625,   371,  1442,  1313,  1438,
    1120,   297,   694,  1122,  1405,  1406,  1522,   162,  1337,   335,
       7,  1532,   657,   466,  1683,  1670,   722,   197,    49,   219,
     479,  1059,  1059,   377,  1525,  1525,   277,   657,   880,   883,
     947,   949,   950,  1016,  1010,   118,   118,   133,   253,   222,
     292,   371,   588,   879,  1340,  1341,  1528,   861,  1529,  1529,
    1529,  1529,  1337,  1529,  1529,   658,   659,   879,   879,   855,
     659,   849,    81,    93,   401,   963,   973,   974,  1040,  1044,
    1045,  1100,  1394,  1100,   401,  1394,  1394,  1100,  1394,   401,
     401,  1394,  1394,   576,   143,  1394,   262,   557,   197,   401,
     417,  1040,  1100,   262,  1394,   401,   557,   143,  1394,  1394,
    1394,  1394,  1394,  1100,   401,    50,  1394,  1394,   891,  1394,
     401,   403,    20,   576,   645,  1109,   401,   401,  1394,  1394,
    1394,  1394,   146,   331,  1532,  1394,  1394,   401,  1394,   948,
     659,   888,   889,  1083,   657,   665,   962,   975,  1524,  1532,
    1393,  1662,    87,   481,   450,  1076,    13,    75,  1139,    99,
     180,   749,   775,  1532,   162,   777,   663,   657,   417,  1303,
    1304,  1305,  1532,   742,  1211,   657,   657,   657,  1337,  1529,
    1529,  1339,  1529,  1337,  1529,  1529,  1529,  1529,  1529,  1529,
    1529,  1337,  1337,  1529,   111,   367,   506,  1516,  1529,  1337,
     687,  1529,  1338,   879,   879,   858,   215,  1394,   659,   852,
     665,  1264,  1313,  1420,  1313,  1211,   658,  1211,   568,   657,
    1000,  1001,  1001,  1001,   657,   995,   996,  1000,  1255,  1001,
     252,  1001,   252,   658,   658,   658,    20,  1221,   658,    20,
     658,   658,   658,  1241,  1211,  1211,   658,   658,   659,   658,
     387,  1248,   659,   659,   658,   659,   658,   254,  1233,  1234,
     658,   658,   658,   658,   659,   658,   658,  1211,   658,   198,
     658,   658,   659,   658,   659,   659,   658,  1211,   658,  1211,
     658,  1211,   658,   658,   658,   657,  1021,  1021,    21,   138,
     468,   650,  1023,  1024,  1025,   659,   659,  1313,  1202,  1652,
     658,  1639,  1283,  1646,   665,  1063,   658,  1257,  1213,   658,
     659,   658,  1206,  1238,   658,   657,  1459,   432,    58,    68,
      82,    94,    95,    96,   113,   333,   351,   464,   482,   544,
     561,   774,   773,  1617,   631,  1620,   404,   565,  1534,   384,
     652,   652,  1610,  1610,  1610,   657,   796,   377,  1400,  1175,
    1525,  1179,   237,  1182,  1488,   792,  1532,   812,  1533,   812,
     826,   826,   826,   658,   659,  1206,   897,   401,   914,   915,
    1338,   899,  1537,   350,   454,  1198,  1391,  1392,  1522,  1396,
     659,   657,  1387,   658,   658,   659,   665,  1635,   658,   659,
     761,   201,  1611,  1611,  1611,  1008,  1011,  1352,  1520,  1334,
     597,   658,  1639,  1286,   662,   261,  1292,  1292,  1278,   261,
     377,   609,  1311,  1198,  1319,  1520,  1316,  1324,  1529,  1532,
     665,   658,   658,    84,   589,   432,  1570,  1554,  1556,  1329,
    1434,  1443,   645,   659,   659,  1404,  1393,   630,  1536,  1677,
     130,   252,   434,   543,   958,   657,   722,   710,   118,  1525,
     700,   701,  1525,   277,   937,   959,   960,   961,   962,   963,
     887,   888,   659,   949,   708,   849,  1062,  1524,   945,    66,
     197,   417,   598,   972,  1039,   945,  1040,  1041,  1041,   235,
     944,   132,  1532,  1524,  1158,  1339,  1337,  1371,  1337,    13,
    1084,  1092,  1093,  1532,  1158,  1529,  1529,  1008,  1394,  1337,
     264,  1372,   264,  1371,  1371,   954,  1093,  1394,   191,   267,
     367,   957,  1337,   132,  1532,  1339,  1339,  1371,  1158,  1322,
    1323,  1522,   132,  1337,   132,  1337,  1343,   890,  1529,  1158,
    1525,  1158,  1158,    86,    88,   132,   156,   192,   395,   439,
     956,   132,  1337,   132,  1337,   132,  1337,  1337,  1343,  1084,
     951,     6,   152,  1096,   959,  1532,     9,   191,  1108,   440,
     971,   972,  1033,   976,   665,   132,  1340,  1529,  1532,   657,
    1663,  1217,  1626,    24,   175,   711,   576,   144,   160,   713,
      13,   657,  1140,   217,   659,   745,    90,   112,   663,  1084,
     658,   659,   807,   690,   691,  1337,   692,   693,  1337,   688,
     689,  1337,  1532,   879,   852,  1532,  1313,  1324,  1307,  1211,
     129,   292,   371,   588,  1254,   371,   657,   996,  1002,    63,
     119,   122,   130,   149,   194,   252,   354,   357,   434,   572,
     601,   988,   989,  1222,  1253,   658,  1307,  1307,  1211,    50,
     488,  1247,  1211,  1211,  1257,    46,   355,   658,   631,  1235,
    1211,  1307,  1211,  1211,  1211,  1211,   658,   658,   658,  1338,
     658,  1031,  1026,  1024,  1026,  1027,  1337,  1318,  1194,  1644,
    1532,   658,  1257,  1207,  1337,  1464,  1465,   182,   287,   213,
     565,    20,   609,  1613,   457,  1618,  1618,  1618,   132,  1211,
    1398,  1399,   158,   159,   797,   155,  1182,   271,   237,   455,
    1494,   659,   901,   658,   219,   264,   916,   658,   659,   658,
    1202,   659,  1393,  1397,  1398,  1395,  1389,  1387,  1518,  1532,
     891,  1532,  1611,  1010,  1359,  1328,  1643,  1311,  1266,  1263,
    1278,   261,   261,  1263,  1278,  1268,  1269,  1301,  1302,  1202,
     632,   633,   659,  1320,  1328,  1211,  1329,   652,  1555,  1560,
    1329,  1529,   694,  1406,  1313,  1399,   733,   734,   735,  1532,
     512,  1684,     9,    33,   836,   377,   635,   699,   657,   657,
    1525,   658,   658,   659,   884,  1494,   949,  1158,   657,   264,
     264,  1041,   945,  1062,  1532,   945,   945,  1217,   152,   494,
    1084,  1524,  1081,   659,  1338,  1010,  1529,  1371,  1092,  1524,
    1524,   631,  1529,   975,  1084,   659,  1328,   894,  1084,  1089,
    1084,   657,   658,  1532,  1525,    36,    37,    42,    44,    46,
      47,   119,   122,   130,   149,   167,   192,   194,   208,   209,
     252,   281,   290,   291,   293,   327,   328,   329,   346,   347,
     348,   354,   357,   373,   374,   409,   410,   434,   490,   494,
     508,   566,   569,   572,   573,   574,   575,   615,   616,   642,
     986,   987,   988,   989,   990,   991,   992,   993,  1532,  1532,
    1664,    20,   415,  1211,  1211,   377,   717,   722,   377,    83,
     718,  1141,   240,   198,  1532,   986,  1006,   198,   198,   658,
    1304,   568,   658,   659,   658,   659,   658,   659,   278,  1335,
     658,   658,   658,   658,   658,    22,    37,    51,   595,  1008,
    1018,  1019,   659,   371,  1001,   995,    63,  1001,   252,  1223,
     658,   658,   658,   658,  1249,  1511,   658,   658,   659,   658,
     341,   266,   427,   658,   658,   658,   658,   658,   658,  1022,
     658,   659,  1315,   658,   658,   659,    18,  1466,   384,  1529,
      67,   259,   363,   529,   546,   637,  1606,  1607,   631,  1619,
    1619,  1619,   658,   659,   742,   793,  1401,   251,  1532,   657,
     904,   898,   917,  1532,   915,   939,  1392,  1399,   658,  1638,
      75,  1495,  1281,   377,  1271,  1278,  1278,   377,  1273,  1211,
     657,  1299,  1300,  1289,  1520,   419,  1344,  1324,   658,   659,
     736,  1529,   245,   254,   392,   737,   738,   739,   740,   136,
     247,   603,   837,   481,  1534,   657,  1060,  1061,  1532,  1060,
     658,   882,   881,   961,    20,   940,  1086,  1211,   945,  1062,
    1532,   609,  1052,   586,  1062,  1062,   179,   132,   132,   975,
    1152,  1093,  1015,  1524,  1107,   559,  1108,  1080,  1323,  1090,
    1092,  1082,  1462,   657,  1034,  1000,  1000,  1001,  1001,   995,
     413,   657,   995,   995,  1019,    63,   615,   988,   990,  1019,
    1019,    63,   616,   616,   619,   995,   657,  1001,  1001,  1001,
    1019,  1000,  1001,   977,   995,   619,  1000,  1019,    37,  1000,
    1020,  1000,  1000,  1001,  1002,   665,   658,   659,  1665,  1666,
    1307,   504,  1529,   151,  1077,  1144,  1532,    13,   657,  1142,
     746,  1015,   132,   776,   752,   753,  1337,   747,   748,   742,
     691,   693,   689,   475,  1333,  1414,  1018,  1009,  1020,   371,
    1019,  1250,  1520,  1211,   341,   181,   658,  1337,  1324,  1465,
     144,   565,   565,   565,    18,  1605,   213,   318,   319,   323,
     324,   325,  1621,  1622,  1399,   264,   559,  1205,   907,   657,
     613,   918,  1194,   161,   171,   385,   564,  1496,  1497,   280,
    1498,  1644,  1270,   609,  1272,   609,  1306,   196,   237,   608,
    1294,  1295,  1298,  1194,  1328,  1532,  1354,  1355,  1335,  1678,
     735,  1006,   658,   659,   735,   377,   711,   383,  1060,   658,
     659,  1328,   657,   658,  1638,   947,   657,   937,   402,   657,
    1087,   658,  1062,  1052,   586,  1059,   964,  1059,   966,   967,
     122,   569,   572,   650,   651,  1514,  1515,  1108,  1525,  1158,
    1091,  1130,   658,  1035,  1532,   317,  1036,   502,   601,   643,
     997,   998,   999,  1064,  1511,   997,   997,  1019,   619,   997,
    1064,  1019,   997,    28,    73,    83,   132,   207,   370,   377,
     417,   490,   598,   978,   979,  1003,  1004,  1005,  1032,  1217,
    1528,   528,   994,  1019,  1020,  1019,  1020,   997,   997,  1532,
    1532,   486,   657,  1667,   712,   719,   720,   658,   659,  1143,
     517,   519,   750,   751,   752,   755,  1217,  1532,  1211,  1183,
     177,   475,   465,  1417,   658,   659,  1328,   658,   658,  1329,
      64,  1606,   384,  1337,  1337,  1337,  1516,   371,   650,  1336,
    1622,   603,  1525,   911,   547,   912,   909,   910,  1532,   254,
     274,    83,    91,   118,   241,   320,   339,   362,   557,   934,
     935,   936,  1437,    50,    50,   161,    50,  1497,   530,   564,
    1499,  1500,  1211,   657,  1211,   657,   658,  1040,  1040,  1295,
    1345,  1201,   466,  1685,   739,  1205,   716,   717,   657,   658,
      83,   263,   631,  1047,  1051,  1055,  1058,  1528,  1061,   371,
    1048,  1050,  1055,  1057,   887,   937,   885,  1338,   914,   970,
     968,  1059,   657,   965,   657,   657,  1516,  1516,   891,   251,
     658,   659,   202,   400,   503,   377,  1037,   999,   658,   659,
     658,  1014,  1529,   366,  1007,  1514,    15,   603,   132,   264,
      20,  1005,   264,   370,  1393,   645,  1189,  1185,   631,  1668,
     531,   714,   777,  1532,   417,  1145,  1146,  1532,   659,   777,
     200,   177,  1202,  1520,  1344,   292,   371,  1407,  1408,  1522,
    1276,  1206,  1338,   658,   659,   920,   567,  1394,  1394,   143,
     143,  1394,  1394,  1394,  1394,   657,   929,   936,   166,  1511,
    1511,    50,  1511,    50,    50,  1500,  1306,  1306,   198,  1293,
    1293,   657,  1679,   724,  1671,   713,   707,   586,   609,  1046,
    1049,  1054,  1055,  1056,  1529,  1394,   398,  1097,  1098,  1099,
    1058,  1393,  1328,   658,  1097,  1057,   884,   658,  1635,   658,
     657,   657,   969,  1060,   657,  1060,  1060,   657,  1532,   136,
     603,  1019,  1511,  1019,   657,  1208,   366,   614,   657,   132,
    1340,  1529,  1532,   371,   658,    55,    66,   284,  1211,   163,
     715,   658,   659,   751,  1328,  1201,   659,  1393,  1489,   658,
     908,   910,   657,   922,   924,   919,  1529,  1529,  1394,  1394,
    1340,  1340,  1338,  1534,   548,   930,   931,  1394,  1511,  1511,
    1511,   658,   658,   215,   261,   387,  1297,  1296,  1205,  1346,
    1347,  1348,  1006,   725,   726,  1626,  1686,  1525,   718,   658,
    1059,  1059,  1097,  1056,  1337,  1528,  1099,  1098,   132,  1340,
    1529,  1532,   886,  1060,  1060,   657,   658,  1060,   658,   658,
     914,    54,   367,   462,   494,  1038,  1038,   658,  1338,  1208,
     985,  1638,    66,   384,    66,  1211,  1146,  1408,  1399,  1011,
     912,   657,   923,   924,   925,   326,   921,   924,  1529,  1529,
     932,   658,   659,   954,    50,    50,   657,   657,  1211,   658,
     659,  1680,   141,   777,   198,   151,  1638,   658,   658,  1060,
    1046,   658,  1047,  1048,   658,     5,   132,   370,   377,   377,
     658,   658,   384,   384,  1490,   658,   659,   326,   927,   928,
    1214,   933,  1534,   931,  1303,  1305,  1206,  1348,   724,  1205,
     719,  1033,  1046,   658,  1046,   603,   136,   405,   623,   980,
     475,  1501,   924,   659,   926,   934,   658,   658,  1681,  1672,
    1046,  1038,  1038,    83,   598,   981,   982,   983,   233,  1495,
     928,   658,   777,   157,  1529,   264,   983,    50,  1498,   477,
    1511,   237,  1502,  1673,   371,   657,  1504,   777,   280,   475,
    1503,   658,   664,  1505,  1506,  1522,   494,  1507,  1534,   658,
     659,  1508,  1509,  1522,  1506,   659,  1393,  1509,  1205,  1399,
    1206
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   667,   668,   669,   668,   668,   670,   670,   671,   671,
     671,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   673,   674,   674,
     675,   676,   676,   678,   677,   679,   679,   680,   680,   681,
     683,   682,   685,   684,   686,   686,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   687,   687,   687,   688,   688,   688,   689,   690,
     690,   690,   691,   692,   692,   692,   693,   694,   694,   694,
     694,   694,   694,   694,   695,   695,   696,   698,   697,   699,
     697,   700,   697,   701,   697,   702,   697,   703,   697,   697,
     697,   697,   697,   704,   697,   706,   705,   707,   707,   708,
     708,   708,   708,   708,   708,   708,   710,   709,   712,   711,
     711,   713,   713,   713,   713,   714,   714,   715,   715,   716,
     716,   717,   718,   718,   720,   719,   721,   722,   722,   723,
     723,   724,   724,   725,   725,   725,   725,   725,   725,   725,
     726,   726,   727,   727,   729,   728,   730,   730,   731,   731,
     732,   732,   733,   733,   734,   734,   736,   735,   737,   737,
     738,   738,   739,   740,   740,   740,   740,   741,   741,   742,
     742,   743,   743,   745,   744,   744,   746,   744,   744,   748,
     747,   749,   749,   750,   750,   751,   752,   752,   753,   754,
     754,   755,   755,   755,   755,   755,   756,   757,   757,   758,
     758,   759,   759,   760,   760,   761,   761,   761,   762,   762,
     762,   762,   762,   762,   762,   762,   762,   762,   762,   762,
     763,   764,   765,   765,   766,   766,   767,   767,   768,   769,
     769,   770,   770,   771,   772,   772,   773,   774,   774,   774,
     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,
     775,   775,   776,   776,   777,   777,   777,   777,   777,   777,
     777,   777,   777,   777,   777,   778,   778,   778,   778,   780,
     779,   782,   781,   784,   783,   785,   786,   787,   789,   788,
     790,   791,   791,   791,   792,   792,   794,   795,   796,   793,
     797,   797,   797,   799,   798,   801,   802,   800,   800,   803,
     803,   804,   804,   806,   807,   805,   809,   810,   808,   811,
     811,   812,   812,   814,   813,   816,   815,   818,   817,   820,
     819,   821,   823,   822,   825,   824,   826,   827,   829,   828,
     830,   828,   831,   828,   833,   832,   834,   832,   835,   832,
     836,   836,   837,   837,   837,   838,   839,   840,   841,   841,
     842,   842,   843,   844,   845,   845,   847,   846,   848,   848,
     848,   849,   849,   849,   850,   851,   851,   851,   852,   852,
     852,   852,   852,   852,   852,   852,   853,   854,   854,   854,
     855,   855,   855,   855,   855,   856,   857,   857,   857,   858,
     858,   858,   858,   858,   858,   858,   859,   860,   860,   860,
     861,   861,   861,   862,   863,   864,   865,   866,   867,   867,
     867,   868,   869,   870,   871,   872,   873,   874,   875,   876,
     877,   877,   878,   878,   879,   879,   881,   880,   880,   882,
     880,   880,   883,   883,   884,   885,   884,   886,   884,   887,
     888,   888,   890,   889,   891,   893,   892,   894,   895,   896,
     895,   895,   895,   895,   895,   897,   897,   898,   898,   899,
     899,   900,   900,   901,   902,   903,   904,   905,   905,   906,
     907,   906,   908,   906,   909,   909,   910,   911,   912,   912,
     913,   913,   914,   914,   916,   915,   917,   918,   919,   918,
     920,   918,   921,   921,   922,   922,   923,   923,   925,   926,
     924,   927,   927,   928,   928,   929,   929,   930,   930,   932,
     931,   933,   934,   934,   935,   935,   936,   936,   936,   936,
     936,   936,   936,   936,   936,   938,   939,   937,   940,   940,
     941,   941,   942,   942,   943,   943,   944,   944,   945,   945,
     946,   946,   947,   947,   948,   948,   949,   949,   949,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   951,
     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,
     950,   950,   950,   950,   950,   950,   952,   953,   954,   955,
     956,   956,   956,   956,   956,   956,   956,   957,   957,   957,
     958,   958,   958,   958,   959,   960,   960,   961,   961,   962,
     962,   964,   963,   965,   963,   966,   963,   967,   963,   968,
     963,   969,   963,   970,   963,   963,   971,   971,   972,   973,
     973,   974,   976,   977,   975,   978,   978,   979,   979,   980,
     980,   980,   981,   981,   982,   982,   983,   983,   983,   984,
     985,   986,   986,   986,   986,   986,   986,   986,   986,   986,
     986,   986,   986,   986,   986,   986,   986,   986,   986,   986,
     986,   986,   986,   986,   986,   986,   986,   986,   986,   986,
     986,   986,   986,   986,   986,   986,   986,   986,   986,   986,
     987,   987,   987,   987,   987,   987,   987,   987,   988,   989,
     989,   990,   990,   991,   991,   991,   991,   991,   992,   992,
     992,   992,   992,   993,   993,   993,   994,   994,   995,   995,
     995,   996,   997,   997,   998,   998,   999,   999,   999,  1000,
    1000,  1000,  1000,  1001,  1001,  1002,  1002,  1003,  1003,  1004,
    1004,  1005,  1005,  1005,  1005,  1005,  1005,  1005,  1005,  1005,
    1005,  1005,  1005,  1005,  1005,  1005,  1006,  1007,  1007,  1008,
    1008,  1009,  1009,  1010,  1010,  1011,  1011,  1012,  1012,  1013,
    1013,  1014,  1015,  1015,  1016,  1016,  1017,  1017,  1018,  1018,
    1018,  1019,  1019,  1019,  1019,  1019,  1020,  1020,  1022,  1021,
    1023,  1023,  1024,  1025,  1025,  1025,  1025,  1026,  1027,  1028,
    1028,  1029,  1030,  1030,  1031,  1031,  1032,  1032,  1033,  1034,
    1034,  1035,  1035,  1036,  1036,  1036,  1036,  1037,  1037,  1037,
    1037,  1037,  1038,  1038,  1038,  1038,  1038,  1039,  1039,  1040,
    1040,  1041,  1041,  1042,  1042,  1042,  1043,  1043,  1044,  1045,
    1046,  1046,  1047,  1047,  1048,  1048,  1049,  1049,  1050,  1050,
    1051,  1051,  1052,  1052,  1053,  1053,  1053,  1054,  1054,  1055,
    1055,  1055,  1055,  1055,  1055,  1056,  1056,  1057,  1058,  1058,
    1059,  1059,  1059,  1060,  1060,  1061,  1061,  1062,  1062,  1063,
    1063,  1064,  1064,  1066,  1067,  1065,  1068,  1065,  1065,  1069,
    1065,  1070,  1065,  1071,  1065,  1072,  1065,  1073,  1065,  1065,
    1065,  1065,  1065,  1074,  1065,  1075,  1075,  1075,  1075,  1076,
    1076,  1077,  1077,  1078,  1078,  1079,  1079,  1079,  1079,  1079,
    1079,  1079,  1079,  1079,  1079,  1080,  1079,  1079,  1081,  1079,
    1082,  1079,  1079,  1079,  1079,  1079,  1083,  1084,  1084,  1086,
    1085,  1087,  1087,  1087,  1089,  1088,  1090,  1091,  1090,  1092,
    1092,  1093,  1094,  1094,  1095,  1096,  1096,  1096,  1096,  1096,
    1096,  1096,  1096,  1096,  1096,  1096,  1096,  1096,  1096,  1096,
    1096,  1096,  1096,  1096,  1096,  1097,  1097,  1097,  1097,  1097,
    1098,  1098,  1099,  1099,  1100,  1100,  1101,  1101,  1103,  1102,
    1104,  1104,  1105,  1105,  1106,  1106,  1107,  1107,  1107,  1108,
    1108,  1108,  1109,  1109,  1109,  1109,  1111,  1110,  1112,  1110,
    1110,  1110,  1113,  1114,  1114,  1115,  1115,  1116,  1116,  1116,
    1118,  1117,  1119,  1119,  1120,  1120,  1120,  1121,  1121,  1121,
    1122,  1122,  1124,  1123,  1125,  1125,  1125,  1126,  1127,  1126,
    1129,  1128,  1130,  1130,  1131,  1131,  1132,  1132,  1132,  1133,
    1133,  1135,  1134,  1136,  1136,  1137,  1138,  1138,  1139,  1139,
    1140,  1141,  1140,  1142,  1143,  1142,  1144,  1144,  1144,  1145,
    1145,  1145,  1146,  1146,  1147,  1148,  1149,  1148,  1151,  1150,
    1152,  1152,  1153,  1153,  1154,  1154,  1154,  1154,  1154,  1154,
    1155,  1155,  1157,  1156,  1158,  1158,  1158,  1160,  1159,  1159,
    1161,  1161,  1162,  1162,  1163,  1165,  1164,  1166,  1166,  1167,
    1167,  1168,  1169,  1170,  1170,  1172,  1171,  1173,  1173,  1174,
    1174,  1175,  1176,  1178,  1177,  1180,  1179,  1181,  1181,  1182,
    1182,  1183,  1184,  1184,  1186,  1185,  1185,  1188,  1187,  1187,
    1190,  1189,  1191,  1191,  1191,  1193,  1192,  1194,  1195,  1196,
    1196,  1197,  1197,  1198,  1198,  1199,  1199,  1200,  1200,  1200,
    1201,  1201,  1201,  1202,  1202,  1202,  1203,  1203,  1204,  1205,
    1206,  1207,  1207,  1207,  1207,  1207,  1208,  1208,  1208,  1209,
    1209,  1209,  1210,  1210,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1212,  1212,  1212,  1212,  1212,
    1212,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,
    1215,  1215,  1216,  1216,  1217,  1217,  1218,  1218,  1219,  1219,
    1219,  1219,  1219,  1219,  1220,  1220,  1221,  1221,  1222,  1222,
    1222,  1222,  1222,  1222,  1223,  1222,  1222,  1222,  1222,  1222,
    1224,  1225,  1225,  1226,  1226,  1226,  1226,  1226,  1226,  1226,
    1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,
    1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,  1226,
    1226,  1226,  1226,  1227,  1227,  1227,  1227,  1227,  1227,  1227,
    1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,
    1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,  1227,
    1227,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,
    1228,  1228,  1228,  1228,  1228,  1228,  1228,  1228,  1229,  1229,
    1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,  1229,
    1229,  1229,  1229,  1229,  1230,  1230,  1230,  1230,  1230,  1230,
    1230,  1230,  1232,  1231,  1231,  1233,  1233,  1234,  1234,  1235,
    1235,  1236,  1236,  1237,  1237,  1238,  1239,  1239,  1239,  1239,
    1239,  1239,  1239,  1240,  1241,  1239,  1239,  1239,  1239,  1239,
    1239,  1239,  1239,  1239,  1239,  1239,  1242,  1239,  1244,  1243,
    1245,  1245,  1245,  1246,  1246,  1247,  1247,  1248,  1249,  1248,
    1250,  1250,  1252,  1251,  1253,  1254,  1253,  1253,  1253,  1253,
    1253,  1253,  1253,  1253,  1253,  1253,  1253,  1255,  1253,  1256,
    1256,  1257,  1257,  1258,  1258,  1259,  1259,  1260,  1260,  1261,
    1261,  1262,  1262,  1263,  1263,  1264,  1265,  1265,  1266,  1266,
    1267,  1268,  1267,  1269,  1267,  1267,  1270,  1267,  1271,  1267,
    1267,  1272,  1267,  1273,  1267,  1267,  1274,  1274,  1274,  1275,
    1275,  1276,  1276,  1277,  1279,  1278,  1278,  1278,  1280,  1281,
    1280,  1282,  1284,  1283,  1286,  1285,  1288,  1289,  1287,  1290,
    1291,  1292,  1292,  1293,  1293,  1293,  1293,  1294,  1294,  1296,
    1295,  1297,  1295,  1298,  1298,  1299,  1300,  1299,  1302,  1301,
    1303,  1303,  1304,  1304,  1305,  1305,  1306,  1306,  1307,  1307,
    1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,  1307,
    1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,  1308,  1309,
    1309,  1309,  1309,  1310,  1310,  1310,  1311,  1311,  1312,  1312,
    1313,  1314,  1313,  1315,  1316,  1315,  1317,  1317,  1318,  1318,
    1319,  1319,  1320,  1320,  1320,  1321,  1322,  1322,  1323,  1324,
    1324,  1326,  1325,  1327,  1327,  1328,  1328,  1328,  1329,  1329,
    1330,  1331,  1331,  1331,  1332,  1332,  1332,  1333,  1333,  1333,
    1333,  1333,  1334,  1335,  1335,  1335,  1335,  1336,  1336,  1336,
    1337,  1337,  1337,  1337,  1337,  1337,  1338,  1338,  1338,  1338,
    1338,  1339,  1339,  1339,  1339,  1339,  1340,  1340,  1340,  1340,
    1340,  1341,  1342,  1342,  1343,  1343,  1344,  1345,  1344,  1346,
    1346,  1347,  1347,  1348,  1350,  1349,  1351,  1351,  1352,  1353,
    1353,  1354,  1354,  1356,  1355,  1358,  1359,  1357,  1357,  1357,
    1361,  1360,  1363,  1362,  1364,  1362,  1362,  1362,  1362,  1362,
    1362,  1362,  1365,  1362,  1362,  1362,  1362,  1362,  1362,  1366,
    1366,  1367,  1368,  1369,  1369,  1370,  1371,  1371,  1372,  1372,
    1373,  1373,  1375,  1376,  1374,  1378,  1379,  1377,  1380,  1380,
    1380,  1380,  1381,  1381,  1382,  1382,  1383,  1384,  1384,  1384,
    1385,  1384,  1386,  1386,  1387,  1387,  1388,  1387,  1389,  1387,
    1390,  1390,  1391,  1391,  1392,  1393,  1393,  1394,  1394,  1396,
    1395,  1397,  1397,  1398,  1398,  1399,  1399,  1400,  1401,  1400,
    1403,  1404,  1402,  1405,  1405,  1406,  1407,  1407,  1408,  1409,
    1409,  1411,  1410,  1413,  1414,  1412,  1415,  1412,  1416,  1412,
    1417,  1417,  1418,  1418,  1419,  1419,  1420,  1420,  1421,  1421,
    1422,  1422,  1422,  1424,  1423,  1425,  1425,  1426,  1426,  1427,
    1427,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1429,  1429,  1431,  1430,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1433,  1432,
    1434,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,  1432,
    1432,  1432,  1432,  1432,  1432,  1432,  1432,  1435,  1435,  1435,
    1436,  1436,  1437,  1437,  1438,  1438,  1439,  1439,  1440,  1440,
    1441,  1441,  1442,  1442,  1443,  1443,  1443,  1445,  1444,  1446,
    1444,  1447,  1447,  1447,  1447,  1447,  1448,  1448,  1449,  1450,
    1450,  1450,  1451,  1451,  1452,  1452,  1452,  1454,  1453,  1456,
    1455,  1455,  1457,  1457,  1458,  1459,  1458,  1460,  1460,  1461,
    1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,  1461,
    1461,  1461,  1461,  1461,  1461,  1462,  1462,  1463,  1463,  1464,
    1464,  1464,  1465,  1466,  1466,  1468,  1467,  1469,  1469,  1471,
    1470,  1472,  1470,  1470,  1473,  1473,  1474,  1474,  1476,  1475,
    1477,  1478,  1478,  1480,  1479,  1481,  1481,  1481,  1482,  1482,
    1482,  1482,  1483,  1483,  1484,  1485,  1487,  1488,  1489,  1490,
    1486,  1491,  1491,  1492,  1492,  1493,  1493,  1493,  1494,  1494,
    1494,  1495,  1495,  1496,  1496,  1497,  1497,  1497,  1497,  1498,
    1498,  1499,  1499,  1500,  1500,  1501,  1501,  1502,  1502,  1503,
    1503,  1504,  1504,  1504,  1505,  1505,  1506,  1506,  1507,  1507,
    1508,  1508,  1509,  1510,  1510,  1510,  1510,  1511,  1511,  1512,
    1512,  1512,  1513,  1514,  1514,  1514,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1516,  1516,  1516,  1516,
    1516,  1517,  1517,  1517,  1518,  1518,  1519,  1519,  1520,  1521,
    1521,  1522,  1522,  1523,  1523,  1523,  1524,  1524,  1524,  1524,
    1525,  1525,  1525,  1526,  1526,  1527,  1528,  1528,  1529,  1530,
    1531,  1532,  1532,  1533,  1533,  1534,  1534,  1534,  1535,  1535,
    1535,  1536,  1536,  1537,  1538,  1538,  1538,  1538,  1538,  1538,
    1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,
    1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,
    1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,
    1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,
    1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,  1538,
    1538,  1538,  1538,  1538,  1538,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,  1539,
    1539,  1539,  1539,  1539,  1541,  1540,  1542,  1543,  1540,  1544,
    1544,  1546,  1545,  1547,  1545,  1548,  1545,  1550,  1549,  1549,
    1551,  1551,  1553,  1552,  1554,  1552,  1556,  1555,  1555,  1557,
    1557,  1557,  1558,  1558,  1558,  1558,  1559,  1559,  1559,  1559,
    1560,  1561,  1561,  1561,  1561,  1561,  1561,  1561,  1561,  1561,
    1561,  1562,  1562,  1562,  1563,  1563,  1563,  1563,  1564,  1565,
    1566,  1566,  1567,  1567,  1567,  1567,  1568,  1568,  1569,  1569,
    1569,  1570,  1570,  1570,  1570,  1570,  1572,  1571,  1573,  1573,
    1574,  1574,  1575,  1576,  1576,  1576,  1576,  1576,  1578,  1577,
    1579,  1579,  1580,  1579,  1581,  1581,  1582,  1582,  1583,  1583,
    1583,  1583,  1584,  1583,  1585,  1585,  1585,  1585,  1585,  1586,
    1587,  1587,  1587,  1587,  1587,  1587,  1588,  1588,  1589,  1590,
    1590,  1590,  1590,  1590,  1591,  1591,  1592,  1592,  1593,  1593,
    1594,  1595,  1595,  1596,  1596,  1597,  1597,  1598,  1598,  1599,
    1599,  1601,  1600,  1602,  1600,  1603,  1600,  1604,  1600,  1600,
    1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,
    1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,  1600,
    1600,  1600,  1600,  1600,  1600,  1605,  1605,  1606,  1606,  1607,
    1607,  1607,  1608,  1608,  1608,  1608,  1609,  1609,  1610,  1610,
    1611,  1611,  1612,  1612,  1613,  1613,  1614,  1614,  1614,  1614,
    1614,  1615,  1615,  1616,  1616,  1617,  1618,  1618,  1618,  1618,
    1618,  1619,  1619,  1620,  1620,  1621,  1621,  1622,  1622,  1622,
    1622,  1622,  1622,  1624,  1623,  1625,  1626,  1626,  1627,  1627,
    1628,  1628,  1628,  1629,  1629,  1629,  1630,  1630,  1631,  1632,
    1632,  1633,  1634,  1635,  1635,  1637,  1636,  1638,  1638,  1639,
    1639,  1641,  1640,  1642,  1642,  1643,  1643,  1643,  1644,  1644,
    1645,  1646,  1645,  1647,  1648,  1649,  1650,  1650,  1651,  1651,
    1652,  1652,  1652,  1652,  1652,  1652,  1652,  1652,  1653,  1653,
    1653,  1654,  1654,  1654,  1654,  1654,  1655,  1655,  1655,  1655,
    1655,  1655,  1656,  1656,  1657,  1658,  1659,  1659,  1659,  1660,
    1660,  1660,  1662,  1661,  1663,  1663,  1664,  1664,  1666,  1665,
    1667,  1667,  1668,  1668,  1668,  1668,  1670,  1671,  1672,  1673,
    1669,  1674,  1674,  1675,  1677,  1678,  1679,  1680,  1681,  1676,
    1683,  1684,  1685,  1686,  1682,  1687,  1687,  1687,  1687,  1687,
    1687,  1688,  1688,  1688,  1689,  1689,  1690,  1690,  1690,  1691,
    1691,  1692,  1693,  1692,  1694,  1694,  1695,  1695,  1696,  1696,
    1697
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       4,     1,     2,     0,     4,     0,     2,     3,     1,     2,
       0,     3,     0,     6,     1,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     5,     5,     5,     1,     0,     1,     3,     1,     0,
       1,     3,     1,     0,     1,     3,     1,     3,     3,     3,
       3,     3,     3,     3,     0,     1,     1,     0,     7,     0,
      14,     0,    13,     0,    13,     0,     6,     0,     3,     5,
       6,     4,     3,     0,     3,     0,    12,     1,     3,     2,
       2,     2,     2,     2,     2,     2,     0,    13,     0,     6,
       2,     0,     1,     3,     1,     0,     2,     0,     2,     0,
       1,     4,     0,     2,     0,     2,     0,     3,     1,     0,
       2,     0,     2,     2,     2,     2,     2,     3,     3,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     2,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     4,     0,     1,     1,     3,     1,     3,     3,     1,
       2,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       5,     0,     2,     0,     3,     2,     2,     2,     0,     6,
       2,     0,     2,     1,     1,     3,     0,     0,     0,     7,
       0,     2,     2,     0,     6,     0,     0,     4,     1,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     1,     0,     6,     0,     3,     0,     5,     0,
       4,     3,     0,     6,     0,     6,     1,     0,     0,     6,
       0,     6,     0,     6,     0,     4,     0,     4,     0,     4,
       1,     1,     1,     1,     1,     2,     4,     5,     0,     4,
       4,     4,     3,     3,     2,     2,     0,     2,     1,     2,
       3,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     4,
       0,     1,     1,     1,     1,     1,     0,     7,     3,     0,
       5,     1,     2,     4,     0,     0,     5,     0,     7,     1,
       0,     1,     0,     4,     0,     0,     3,     5,     6,     0,
       4,     2,     2,     2,     2,     0,     1,     0,     3,     0,
       1,     1,     3,     1,     4,     5,     5,     0,     2,     0,
       0,     7,     0,    10,     1,     3,     1,     1,     0,     2,
       0,     3,     1,     3,     0,     6,     1,     0,     0,     5,
       0,     4,     1,     1,     1,     3,     1,     3,     0,     0,
       5,     1,     3,     1,     1,     0,     3,     1,     3,     0,
       4,     1,     0,     1,     2,     1,     3,     4,     3,     3,
       3,     3,     4,     4,     3,     0,     0,     6,     0,     1,
       0,     1,     1,     2,     1,     1,     0,     3,     0,     3,
       1,     3,     0,     1,     1,     2,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
       6,     1,     1,     3,     4,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     4,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     1,     1,     2,
       2,     0,     9,     0,    10,     0,     9,     0,     9,     0,
      10,     0,    11,     0,    10,     2,     0,     1,     4,     0,
       1,     2,     0,     0,     5,     1,     7,     0,     2,     0,
       1,     1,     0,     1,     2,     1,     1,     2,     2,     4,
       3,     3,     3,     3,     1,     2,     1,     1,     3,     2,
       3,     2,     2,     1,     3,     3,     2,     3,     1,     2,
       2,     2,     1,     2,     3,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     5,     5,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     2,     1,     2,     3,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     3,     0,     1,
       1,     5,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     4,     1,     3,     2,     1,     2,
       2,     2,     3,     3,     3,     3,     2,     2,     1,     2,
       1,     1,     1,     1,     1,     0,     2,     1,     1,     1,
       1,     1,     0,     2,     1,     1,     0,     1,     2,     1,
       1,     0,     1,     2,     1,     2,     0,     1,     0,     4,
       1,     1,     1,     0,     1,     2,     1,     1,     2,     1,
       3,     3,     1,     1,     0,     2,     0,     1,     5,     0,
       3,     3,     1,     0,     2,     2,     2,     0,     3,     3,
       6,     6,     1,     1,     2,     2,     2,     2,     2,     1,
       1,     0,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     1,     2,     1,     2,
       1,     2,     0,     2,     0,     2,     2,     2,     2,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       1,     1,     1,     4,     2,     1,     4,     0,     1,     0,
       2,     1,     3,     0,     0,     7,     0,     5,     7,     0,
       5,     0,     5,     0,     5,     0,     4,     0,    11,     3,
       4,     3,     3,     0,     8,     0,     3,     1,     4,     0,
       3,     0,     2,     0,     1,     0,     2,     2,     2,     2,
       1,     1,     1,     4,     4,     0,     6,     4,     0,     5,
       0,     6,     4,     3,     1,     7,     2,     1,     1,     0,
       6,     0,     3,     2,     0,     5,     0,     0,     6,     1,
       3,     1,     1,     3,     3,     3,     2,     4,     6,     5,
       5,     5,     3,     4,     2,     2,     6,     5,     3,     5,
       1,     1,     1,     1,     1,     0,     1,     1,     2,     2,
       3,     3,     3,     3,     0,     1,     0,     1,     0,     2,
       0,     1,     2,     1,     1,     1,     0,     1,     1,     0,
       2,     1,     0,     1,     1,     1,     0,     6,     0,     5,
       4,     4,     3,     0,     1,     1,     3,     3,     2,     2,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     4,
       1,     3,     0,     5,     0,     1,     1,     3,     0,     4,
       0,     4,     0,     1,     1,     2,     1,     1,     1,     0,
       2,     0,     5,     1,     3,     2,     0,     3,     1,     4,
       1,     0,     4,     1,     0,     4,     0,     1,     3,     0,
       1,     3,     1,     1,     2,     3,     0,     4,     0,     3,
       0,     1,     1,     2,     1,     1,     1,     1,     1,     2,
       0,     2,     0,     5,     0,     1,     1,     0,     4,     4,
       3,     5,     1,     3,     3,     0,     6,     1,     1,     1,
       3,     2,     3,     1,     1,     0,     6,     1,     1,     1,
       3,     3,     4,     0,     6,     0,     2,     0,     4,     0,
       2,     1,     2,     4,     0,     3,     3,     0,     4,     3,
       0,     3,     4,     3,    11,     0,     3,     8,     2,     0,
       1,     1,     1,     0,     1,     2,     1,     1,     1,     1,
       0,     2,     4,     3,     1,     1,     3,     4,     0,     0,
       0,     0,     2,     2,     1,     1,     0,     2,     3,     0,
       2,     3,     0,     2,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     2,     1,     2,
       1,     1,     1,     2,     0,     3,     1,     1,     2,     2,
       4,     1,     3,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     3,     2,     2,     2,     2,     3,     3,
       5,     6,     4,     4,     7,     2,     6,     5,     6,     6,
       4,     4,     5,     4,     6,     2,     2,     4,     4,     4,
      10,     6,     8,     6,     4,     4,     6,     4,     4,     4,
       6,     4,     7,     7,     7,     6,     6,     6,     6,     3,
       4,     6,     8,     2,     2,     8,     8,     6,     6,     2,
       6,     6,     8,     8,     6,     8,     6,     2,     8,     8,
       2,     2,     2,     6,     6,     4,     4,     8,     4,     4,
       4,     4,     3,     8,     6,     8,     4,     4,     6,     4,
       4,     4,     6,     8,     4,     3,     6,     4,     6,     5,
       8,     7,    10,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     0,     4,
       4,     2,     0,     3,     2,     0,     4,     2,     1,     1,
       2,     1,     2,     1,     2,     2,     2,     0,     3,     0,
       1,     1,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     0,     6,     0,     8,     4,     0,     8,     0,    10,
       6,     0,     8,     0,    10,     6,     1,     2,     1,     1,
       2,     0,     1,     5,     0,     5,     3,     5,     2,     0,
       5,     1,     0,     3,     0,     3,     0,     0,     5,     0,
       1,     0,     1,     0,     2,     3,     3,     1,     1,     0,
       7,     0,     7,     1,     2,     0,     0,     2,     0,     2,
       0,     1,     1,     1,     1,     3,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     1,     0,     2,     0,     1,
       0,     0,     3,     0,     0,     3,     2,     0,     0,     4,
       4,     2,     0,     1,     1,     3,     3,     1,     2,     0,
       1,     0,     4,     4,     2,     0,     1,     1,     0,     1,
       1,     2,     5,     4,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     0,     2,     3,     4,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     0,     6,     0,
       1,     3,     1,     3,     0,     2,     3,     1,     1,     2,
       1,     0,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     7,     4,     6,     4,     4,
       5,     5,     0,     6,     4,     4,     5,     6,     4,     1,
       3,     1,     2,     1,     3,     1,     0,     2,     0,     2,
       0,     1,     0,     0,     8,     0,     0,     6,     0,     1,
       1,     1,     1,     1,     2,     1,     1,     1,     3,     4,
       0,     3,     3,     1,     2,     2,     0,     3,     0,     5,
       3,     1,     3,     1,     3,     1,     1,     0,     1,     0,
       4,     0,     1,     3,     1,     1,     1,     0,     0,     6,
       0,     0,    11,     3,     1,     3,     3,     1,     3,     0,
       1,     0,     4,     0,     0,     9,     0,     5,     0,     6,
       0,     2,     1,     3,     2,     4,     0,     2,     0,     2,
       1,     1,     1,     0,     4,     0,     1,     0,     1,     1,
       3,     1,     1,     2,     2,     2,     1,     1,     1,     1,
       0,     3,     0,     3,     2,     4,     4,     3,     4,     4,
       1,     3,     3,     3,     3,     6,     2,     2,     0,     6,
       0,     7,     5,     2,     1,     1,     1,     5,     5,     2,
       2,     1,     4,     3,     2,     3,     2,     2,     1,     4,
       4,     3,     3,     2,     3,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     0,     1,     0,     2,     0,     1,     1,     1,
       0,     2,     0,     2,     0,     3,     3,     0,     4,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     0,     3,     0,     1,     1,     0,     4,     0,
       4,     1,     0,     1,     4,     0,     3,     3,     1,     2,
       2,     2,     2,     3,     3,     2,     1,     1,     1,     1,
       2,     1,     1,     1,     2,     0,     1,     0,     5,     0,
       1,     3,     1,     0,     3,     0,     3,     3,     1,     0,
       4,     0,     3,     2,     0,     1,     0,     2,     0,     3,
       3,     2,     2,     0,     5,     0,     1,     1,     0,     1,
       1,     2,     1,     2,     1,     2,     0,     0,     0,     0,
      22,     1,     1,     0,     1,     0,     1,     1,     0,     1,
       1,     0,     2,     2,     1,     3,     4,     3,     3,     0,
       2,     2,     1,     3,     3,     0,     4,     0,     3,     1,
       1,     0,     3,     2,     3,     1,     1,     2,     0,     2,
       3,     1,     5,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     2,     2,     2,     1,     1,     3,     5,     1,     1,
       1,     1,     1,     3,     4,     5,     1,     5,     3,     2,
       1,     3,     2,     2,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     0,     0,     7,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     2,
       0,     2,     0,     2,     0,     4,     0,     3,     1,     1,
       1,     1,     0,     1,     1,     1,     0,     2,     2,     2,
       3,     3,     4,     6,     2,     3,     3,     3,     5,     2,
       3,     1,     3,     3,     1,     1,     3,     3,     1,     3,
       2,     2,     2,     2,     2,     1,     1,     3,     1,     4,
       4,     1,     1,     1,     1,     1,     0,     4,     1,     1,
       1,     3,     3,     1,     1,     2,     2,     2,     0,     3,
       4,     3,     0,     7,     1,     2,     1,     1,     1,     1,
       1,     1,     0,     5,     1,     1,     1,     1,     1,     3,
       6,     6,     6,     7,     5,     3,     4,     1,     3,     8,
       8,     8,     6,     4,     0,     3,     0,     3,     1,     3,
       2,     1,     1,     0,     1,     1,     2,     0,     1,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     0,     1,     3,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     3,     1,     3,
       1,     3,     1,     1,     1,     1,     4,     5,     4,     6,
       1,     0,     3,     3,     1,     1,     0,     2,     2,     2,
       2,     0,     2,     0,     3,     2,     1,     2,     2,     2,
       2,     2,     2,     0,     3,     1,     0,     1,     0,     1,
       0,     3,     2,     0,     1,     2,     0,     1,     4,     4,
       5,     2,     3,     0,     1,     0,     4,     1,     1,     0,
       1,     0,     2,     2,     1,     0,     1,     1,     3,     4,
       1,     0,     5,     3,     0,     0,     0,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     3,     3,     3,     3,     0,
       3,     3,     0,     8,     0,     3,     1,     3,     0,     3,
       2,     4,     0,     3,     4,     4,     0,     0,     0,     0,
      18,     2,     1,     7,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     0,    12,     4,     4,     3,     4,     3,
       2,     1,     3,     5,     1,     1,     0,     1,     1,     0,
       2,     0,     0,     3,     0,     2,     5,     3,     3,     3,
       1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (thd);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, THD *thd)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, thd); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
{
  YYUSE (yyvaluep);
  YYUSE (thd);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (THD *thd)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, thd);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 2026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
              my_yyabort_error((ER_EMPTY_QUERY, MYF(0)));

            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
#line 19842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 2035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
#line 19869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 2060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
#line 19878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 2139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 19888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 2153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[-2].lex_str);
          }
#line 19898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 2162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[0].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
#line 19908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 2168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[0].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
#line 19918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 2177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 19928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 2183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 19934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 2198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr,
                                                               thd->mem_root))
              MYSQL_YYABORT;
          }
#line 19946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 2211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HELP"));
          }
#line 19955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 2216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[0].lex_str).str;
          }
#line 19965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 2227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
#line 19973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 2231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 19979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 2241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.host = (yyvsp[0].lex_str).str;
          }
#line 19987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 2245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.user = (yyvsp[0].lex_str).str;
          }
#line 19995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 2249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.password = (yyvsp[0].lex_str).str;
          }
#line 20003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 2253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.port = (yyvsp[0].ulong_num);
          }
#line 20011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 2257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.connect_retry = (yyvsp[0].ulong_num);
          }
#line 20019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 2261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl= (yyvsp[0].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 20028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 2266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_ca= (yyvsp[0].lex_str).str;
          }
#line 20036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 2270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_capath= (yyvsp[0].lex_str).str;
          }
#line 20044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 2274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cert= (yyvsp[0].lex_str).str;
          }
#line 20052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 2278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cipher= (yyvsp[0].lex_str).str;
          }
#line 20060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 2282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_key= (yyvsp[0].lex_str).str;
          }
#line 20068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 2286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[0].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 20077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 2291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crl= (yyvsp[0].lex_str).str;
          }
#line 20085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 2295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crlpath= (yyvsp[0].lex_str).str;
          }
#line 20093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 2300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[0].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
               my_yyabort_error((ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0),
                                 SLAVE_MAX_HEARTBEAT_PERIOD));

            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER_THD(thd, ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 20124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 2327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
#line 20132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 2331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_do_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 20140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 2335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_domain_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 20148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 2350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 20156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 2363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_do_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 20164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 2376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_domain_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 20172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 2383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.log_file_name = (yyvsp[0].lex_str).str;
          }
#line 20180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 2387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, (yyvsp[0].ulonglong_number));
          }
#line 20199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 2402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_name = (yyvsp[0].lex_str).str;
          }
#line 20207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 2406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_pos = (yyvsp[0].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
#line 20217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 2412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
#line 20227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 2418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
#line 20237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 2424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid"));
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
#line 20247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 2433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
          }
#line 20256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 2442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->mi.connection_name= (yyvsp[0].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME"));
#endif
         }
#line 20268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 2455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->create_info.init();
            if (lex->set_command_with_check(SQLCOM_CREATE_TABLE, (yyvsp[-3].num), (yyvsp[-4].object_ddl_options) | (yyvsp[-1].object_ddl_options)))
               MYSQL_YYABORT;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.default_table_charset= NULL;
            lex->name= null_lex_str;
            lex->create_last_non_select_table= lex->last_table();
          }
#line 20292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 2475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.use_default_db_type(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER_THD(thd, ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[-2].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
#line 20312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 2493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-6].key_type), (yyvsp[-3].lex_str), (yyvsp[-2].key_alg), (yyvsp[-7].object_ddl_options) | (yyvsp[-4].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 2500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 2503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 2510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 2513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
            if (Lex->add_create_index((yyvsp[-5].key_type), (yyvsp[-2].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-6].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 2520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 2522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 20372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 2527 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->set_command_with_check(SQLCOM_CREATE_DB, 0, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
               MYSQL_YYABORT;
            lex->name= (yyvsp[-2].lex_str);
          }
#line 20383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 2534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.set((yyvsp[0].object_ddl_options));
            Lex->create_view_mode= ((yyvsp[0].object_ddl_options).or_replace() ? VIEW_CREATE_OR_REPLACE :
                                                      VIEW_CREATE_NEW);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
#line 20395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 2541 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 2543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_USER, (yyvsp[-4].object_ddl_options) | (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 2549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->set_command_with_check(SQLCOM_CREATE_ROLE, (yyvsp[-5].object_ddl_options) | (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 20419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 2554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
#line 20427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 2558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
#line 20435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 2561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_command(SQLCOM_CREATE_SERVER, (yyvsp[0].object_ddl_options)); }
#line 20441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 2563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 2568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 20457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 2575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->server_options.scheme= (yyvsp[-4].lex_str); }
#line 20463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 2585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.username.str == 0);
            Lex->server_options.username= (yyvsp[0].lex_str);
          }
#line 20472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 2590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.host.str == 0);
            Lex->server_options.host= (yyvsp[0].lex_str);
          }
#line 20481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 2595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.db.str == 0);
            Lex->server_options.db= (yyvsp[0].lex_str);
          }
#line 20490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 2600 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.owner.str == 0);
            Lex->server_options.owner= (yyvsp[0].lex_str);
          }
#line 20499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 2605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.password.str == 0);
            Lex->server_options.password= (yyvsp[0].lex_str);
          }
#line 20508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 2610 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS(Lex->server_options.socket.str == 0);
            Lex->server_options.socket= (yyvsp[0].lex_str);
          }
#line 20517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 2615 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.port= (yyvsp[0].ulong_num);
          }
#line 20525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 2622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[-3].simple_string);
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[0].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
#line 20545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 2642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
#line 20557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 2653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_expression= (yyvsp[-1].item);
            Lex->event_parse_data->interval= (yyvsp[0].interval);
          }
#line 20566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 2660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[0].item);
          }
#line 20574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 2666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 2668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 20590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 2674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
#line 20600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 2680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 20610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 2689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, 0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
#line 20621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 2696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_starts= (yyvsp[0].item);
          }
#line 20629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 2704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_ends= (yyvsp[0].item);
          }
#line 20637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 2710 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 171:
#line 2716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->on_completion= (yyvsp[-1].num)
                                    ? Event_parse_data::ON_COMPLETION_DROP
                                    : Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
#line 20654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 172:
#line 2725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 173:
#line 2727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[0].lex_str);
            (yyval.num)= 1;
          }
#line 20669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 174:
#line 2734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
              my_yyabort_error((ER_EVENT_RECURSION_FORBIDDEN, MYF(0)));
              
            if (!make_sp_head(thd, lex->event_parse_data->identifier, TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 20704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 175:
#line 2765 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->event_parse_data->body_changed= TRUE;
          }
#line 20718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 176:
#line 2778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
#line 20734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 177:
#line 2793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-2].lex_str).str || check_db_name(&(yyvsp[-2].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (check_routine_name(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 20749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 178:
#line 2804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[0].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 20768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 2821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 2822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 2826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 2827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 2833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.comment= (yyvsp[0].lex_str); }
#line 20798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 2835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Just parse it, we only have one language for now. */ }
#line 20804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 2837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
#line 20810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 2839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
#line 20816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 2841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
#line 20822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 2843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
#line 20828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 2845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 2850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 2851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.detistic= ! (yyvsp[-1].num); }
#line 20846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 2856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
#line 20854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 2860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
#line 20862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 2867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[0].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE);
          }
#line 20875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 2875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 200:
#line 2891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 20889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 201:
#line 2895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->value_list.push_back((yyvsp[0].item), thd->mem_root);
          }
#line 20897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 206:
#line 2913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_PARAM, MYF(0), (yyvsp[0].lex_str).str));

            sp_variable *spvar= spc->add_variable(thd, (yyvsp[0].lex_str));

            lex->init_last_field(&spvar->field_def, (yyvsp[0].lex_str).str,
                                 thd->variables.collation_database);
            (yyval.spvar)= spvar;
          }
#line 20915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 207:
#line 2927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_variable *spvar= (yyvsp[-1].spvar);

            spvar->type= (yyvsp[0].field_type);
            if (lex->sphead->fill_field_definition(thd, lex, (yyvsp[0].field_type),
                                                   lex->last_field))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;

            (yyval.spvar)= spvar;
          }
#line 20935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 212:
#line 2956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyvsp[0].spvar)->mode=(yyvsp[-1].spvar_mode); }
#line 20941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 213:
#line 2960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 20947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 214:
#line 2961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_IN; }
#line 20953 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 215:
#line 2962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_OUT; }
#line 20959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 2963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spvar_mode)= sp_variable::MODE_INOUT; }
#line 20965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 2967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 2972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 2978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 20985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 222:
#line 2982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[-1].spblock).vars || (yyvsp[-1].spblock).conds) && ((yyvsp[-2].spblock).curs || (yyvsp[-2].spblock).hndlrs))
              my_yyabort_error((ER_SP_VARCOND_AFTER_CURSHNDLR, MYF(0)));
            if ((yyvsp[-1].spblock).curs && (yyvsp[-2].spblock).hndlrs)
              my_yyabort_error((ER_SP_CURSOR_AFTER_HANDLER, MYF(0)));
            (yyval.spblock).vars= (yyvsp[-2].spblock).vars + (yyvsp[-1].spblock).vars;
            (yyval.spblock).conds= (yyvsp[-2].spblock).conds + (yyvsp[-1].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[-2].spblock).hndlrs + (yyvsp[-1].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[-2].spblock).curs + (yyvsp[-1].spblock).curs;
          }
#line 21004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 3000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;

            // get the last variable:
            uint num_vars= pctx->context_var_count();
            uint var_idx= pctx->var_context2runtime(num_vars - 1);
            sp_variable *spvar= pctx->find_variable(var_idx);

            lex->sphead->reset_lex(thd);
            pctx->declare_var_boundary((yyvsp[0].num));
            thd->lex->init_last_field(&spvar->field_def, spvar->name.str,
                                      thd->variables.collation_database);
          }
#line 21023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 224:
#line 3016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (yyvsp[-1].field_type);
            Item *dflt_value_item= (yyvsp[0].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null(thd);
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[-3].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
              bool last= i == num_vars - 1;
            
              if (!spvar)
                MYSQL_YYABORT;
            
              if (!last)
                spvar->field_def= *lex->last_field;

              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
              spvar->field_def.field_name= spvar->name.str;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new (thd->mem_root)
                                  sp_instr_set(lex->sphead->instructions(),
                                               pctx, var_idx, dflt_value_item,
                                               var_type, lex, last);
              if (is == NULL || lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[-3].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 21083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 3072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[-3].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_COND, MYF(0), (yyvsp[-3].lex_str).str));
            if(spc->add_condition(thd, (yyvsp[-3].lex_str), (yyvsp[0].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
#line 21099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 3084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[-2].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new (thd->mem_root) sp_instr_hpush_jump(sp->instructions(),
                   ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[-2].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
#line 21130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 3111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[-5].num) == sp_handler::CONTINUE)
            {
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new (thd->mem_root)
                 sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
#line 21166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 3143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[-3].lex_str), &offp, TRUE))
              my_yyabort_error((ER_SP_DUP_CURS, MYF(0), (yyvsp[-3].lex_str).str));

            i= new (thd->mem_root)
                 sp_instr_cpush(sp->instructions(), ctx, (yyvsp[0].lex),
                                ctx->current_cursor_count());
            if (i == NULL || sp->add_instr(i) || ctx->add_cursor((yyvsp[-3].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
#line 21189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 3164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd);
          }
#line 21197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 3168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
              my_yyabort_error((ER_SP_BAD_CURSOR_SELECT, MYF(0)));
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 3183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::EXIT; }
#line 21220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 3184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::CONTINUE; }
#line 21226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 3190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 21232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 3192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)+= 1; }
#line 21238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 3197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[0].spcondvalue)))
              my_yyabort_error((ER_SP_DUP_HANDLER, MYF(0)));

            sp_instr_hpush_jump *i= (sp_instr_hpush_jump *)sp->last_instruction();
            i->add_condition((yyvsp[0].spcondvalue));
          }
#line 21254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 3212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* mysql errno */
            if ((yyvsp[0].ulong_num) == 0)
              my_yyabort_error((ER_WRONG_VALUE, MYF(0), "CONDITION", "0"));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 3224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[0].lex_str)) || is_sqlstate_completion((yyvsp[0].lex_str).str))
              my_yyabort_error((ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 3242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 3243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 241:
#line 3248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= (yyvsp[0].spcondvalue);
          }
#line 21306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 3252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 21316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 3258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 3264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 3270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 3279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[-1].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 3293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_condition_value *cond;

            /* SIGNAL foo cannot be used outside of stored programs */
            if (lex->spcont == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            cond= lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if (cond == NULL)
              my_yyabort_error((ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            if (cond->type != sp_condition_value::SQLSTATE)
              my_yyabort_error((ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0)));
            (yyval.spcondvalue)= cond;
          }
#line 21380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 3308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 21386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 3313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= NULL; }
#line 21392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 3315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 21398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 3320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
#line 21406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 3328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[0].item);
          }
#line 21418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 3337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            if (info->m_item[index] != NULL)
              my_yyabort_error((ER_DUP_SIGNAL_SET, MYF(0),
                                Diag_condition_item_names[index].str));
            info->m_item[index]= (yyvsp[0].item);
          }
#line 21432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 3353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 256:
#line 3355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[0].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[0].item);
          }
#line 21460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 3373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 3379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
#line 21472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 3381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
#line 21478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 3383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
#line 21484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 3385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
#line 21490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 3387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
#line 21496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 3389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
#line 21502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 3391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
#line 21508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 3393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
#line 21514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 3395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
#line 21520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 3397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
#line 21526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 3399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
#line 21532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 3401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
#line 21538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 3406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[-1].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 3421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Diagnostics_information *info= (yyvsp[0].diag_info);

            info->set_which_da((yyvsp[-2].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 3436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 21576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 3438 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 21582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 3443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[0].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 21592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 3449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[-1].item), (yyvsp[0].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 21602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 3458 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 21612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 3464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].stmt_info_list)->push_back((yyvsp[0].stmt_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[-2].stmt_info_list);
          }
#line 21622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 3473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[0].stmt_info_item_name), (yyvsp[-2].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 21632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 3481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[0].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 21645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 3490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 21655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 3499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
#line 21661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 3501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
#line 21667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 3510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 3515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 21683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 3521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].cond_info_list)->push_back((yyvsp[0].cond_info_item), thd->mem_root))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[-2].cond_info_list);
          }
#line 21693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 3530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[0].cond_info_item_name), (yyvsp[-2].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 21703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 3538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
#line 21709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 3540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
#line 21715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 3542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
#line 21721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 3544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
#line 21727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 3546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
#line 21733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 3548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
#line 21739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 3550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
#line 21745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 3552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
#line 21751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 3554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
#line 21757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 3556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
#line 21763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 3558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
#line 21769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 3560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
#line 21775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 3562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
#line 21781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 3567 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= 1;
          }
#line 21797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 3579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
              my_yyabort_error((ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str));
            spc->add_variable(thd, (yyvsp[0].lex_str));
            (yyval.num)= (yyvsp[-2].num) + 1;
          }
#line 21813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 3593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = NULL; }
#line 21819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 3594 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 21825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 319:
#line 3620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->sphead->new_cont_backpatch(NULL);
          }
#line 21835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 320:
#line 3626 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->do_cont_backpatch(); }
#line 21841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 321:
#line 3630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
#line 21853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 322:
#line 3638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            /* "USE db" doesn't work in a procedure */
            if (lex->sql_command == SQLCOM_CHANGE_DB)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "USE"));
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new (thd->mem_root)
                sp_instr_stmt(sp->instructions(), lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 323:
#line 3683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 21905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 324:
#line 3685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
              my_yyabort_error((ER_SP_BADRETURN, MYF(0)));

            sp_instr_freturn *i;

            i= new (thd->mem_root)
                 sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[0].item),
                                  sp->m_return_field_def.sql_type, lex);
            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;
            sp->m_flags|= sp_head::HAS_RETURN;

            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 325:
#line 3708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;
            /*
              When jumping to a BEGIN-END block end, the target jump
              points to the block hpop/cpop cleanup instructions,
              so we should exclude the block context here.
              When jumping to something else (i.e., SP_LAB_ITER),
              there are no hpop/cpop at the jump destination,
              so we should include the block context here for cleanup.
            */
            bool exclusive= (lab->type == sp_label::BEGIN);

            n= ctx->diff_handlers(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(hpop);
            }
            n= ctx->diff_cursors(lab->ctx, exclusive);
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL)
                MYSQL_YYABORT;
              sp->add_instr(cpop);
            }
            i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL)
              MYSQL_YYABORT;
            sp->push_backpatch(i, lab);  /* Jumping forward */
            sp->add_instr(i);
          }
#line 21980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 3758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
              my_yyabort_error((ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[0].lex_str).str));

            sp_instr_jump *i;
            uint ip= sp->instructions();
            uint n;

            n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_hpop *hpop= new (thd->mem_root)
                sp_instr_hpop(ip++, ctx, n);
              if (hpop == NULL ||
                  sp->add_instr(hpop))
                MYSQL_YYABORT;
            }
            n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
            if (n)
            {
              sp_instr_cpop *cpop= new (thd->mem_root)
                sp_instr_cpop(ip++, ctx, n);
              if (cpop == NULL ||
                  sp->add_instr(cpop))
                MYSQL_YYABORT;
            }
            i= new (thd->mem_root)
              sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 3799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 3817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[-1].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[-1].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 3832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 3837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
              my_yyabort_error((ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            i= new (thd->mem_root)
              sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 334:
#line 3861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 22103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 335:
#line 3875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));

            /* An SP local variable */
            sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();
            i->add_to_varlist(spv);
          }
#line 22121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 336:
#line 3891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 337:
#line 3893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, ctx, (yyvsp[-1].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 338:
#line 3909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i= new (thd->mem_root) sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
#line 22163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 3921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
#line 22173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 3936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;

            /**
              An example of the CASE statement in use is
            <pre>
            CREATE PROCEDURE proc_19194_simple(i int)
            BEGIN
              DECLARE str CHAR(10);

              CASE i
                WHEN 1 THEN SET str="1";
                WHEN 2 THEN SET str="2";
                WHEN 3 THEN SET str="3";
                ELSE SET str="unknown";
              END CASE;

              SELECT str;
            END
            </pre>
              The actions are used to generate the following code:
            <pre>
            SHOW PROCEDURE CODE proc_19194_simple;
            Pos     Instruction
            0       set str@1 NULL
            1       set_case_expr (12) 0 i@0
            2       jump_if_not 5(12) (case_expr@0 = 1)
            3       set str@1 _latin1'1'
            4       jump 12
            5       jump_if_not 8(12) (case_expr@0 = 2)
            6       set str@1 _latin1'2'
            7       jump 12
            8       jump_if_not 11(12) (case_expr@0 = 3)
            9       set str@1 _latin1'3'
            10      jump 12
            11      set str@1 _latin1'unknown'
            12      stmt 0 "SELECT str"
            </pre>
            */

            Lex->sphead->new_cont_backpatch(NULL);

            /*
              BACKPATCH: Creating target label for the jump to after END CASE
              (instruction 12 in the example)
            */
            Lex->spcont->push_label(thd, empty_lex_str, Lex->sphead->instructions());
          }
#line 22227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 344:
#line 3989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              BACKPATCH: Resolving forward jump from
              "case_stmt_action_then" to after END CASE
              (jump from instruction 4 to 12, 7 to 12 ... in the example)
            */
            Lex->sphead->backpatch(Lex->spcont->pop_label());

            if ((yyvsp[-3].num))
              Lex->spcont->pop_case_expr_id();

            Lex->sphead->do_cont_backpatch();
          }
#line 22245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 345:
#line 4005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); /* For expr $2 */ }
#line 22251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 346:
#line 4007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (case_stmt_action_expr(Lex, (yyvsp[0].item)))
              MYSQL_YYABORT;

            if (Lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 347:
#line 4015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 22269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 348:
#line 4017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 22275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 4032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 354:
#line 4036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 355:
#line 4048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 22308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 356:
#line 4057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 357:
#line 4061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 4071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 22339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 4080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new (thd->mem_root)
              sp_instr_error(ip, lex->spcont, ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 4094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 22360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 4095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 22366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 4100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[-2].lex_str));

            if (lab)
              my_yyabort_error((ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[-2].lex_str).str));
            lex->name= (yyvsp[-2].lex_str);
          }
#line 22380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 4110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, (yyvsp[-1].splabel)->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 22392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 365:
#line 4121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 22400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 4125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 4130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (maybe_start_compound_statement(thd))
              MYSQL_YYABORT;
            Lex->name= empty_lex_str; // Unlabeled blocks get an empty label
          }
#line 22416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 4136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 4140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->push_label(thd, lex->name,
                                                   lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
#line 22435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 4151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[-2].spblock).hndlrs)
            {
              i= new (thd->mem_root)
                sp_instr_hpop(sp->instructions(), ctx, (yyvsp[-2].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[-2].spblock).curs)
            {
              i= new (thd->mem_root)
                sp_instr_cpop(sp->instructions(), ctx, (yyvsp[-2].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
            (yyval.splabel) = lex->spcont->pop_label();
          }
#line 22466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 371:
#line 4181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 372:
#line 4195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-1].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 373:
#line 4211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i= new (thd->mem_root)
              sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
#line 22517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 374:
#line 4226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 375:
#line 4228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i= new (thd->mem_root)
              sp_instr_jump_if_not(ip, lex->spcont, (yyvsp[-2].item), lab->ip, lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
#line 22542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 376:
#line 4246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str,
                                lab->name.str) != 0)
                my_yyabort_error((ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str));
            }
          }
#line 22557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 377:
#line 4259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_label *lab;
            Lex->sphead->backpatch(lab= Lex->spcont->pop_label());
            DBUG_ASSERT(lab->name.length == 0);
          }
#line 22567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 378:
#line 4268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 22576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 379:
#line 4273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 380:
#line 4275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 22592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 381:
#line 4281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 382:
#line 4283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_label(thd, (yyvsp[-2].lex_str)))
              MYSQL_YYABORT;
          }
#line 22607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 383:
#line 4288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 384:
#line 4293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 22622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 385:
#line 4299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 386:
#line 4301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
            Lex->sphead->reset_lex(thd);
          }
#line 22638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 387:
#line 4308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 388:
#line 4310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (push_sp_empty_label(thd))
              MYSQL_YYABORT;
          }
#line 22653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 389:
#line 4316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 22659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 390:
#line 4321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
#line 22665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 391:
#line 4323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
#line 22671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 392:
#line 4328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
#line 22677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 393:
#line 4330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
#line 22683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 394:
#line 4332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
#line 22689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 398:
#line 4366 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 399:
#line 4368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
          }
#line 22704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 400:
#line 4378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
#line 22712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 401:
#line 4384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
#line 22720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 406:
#line 4407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 453:
#line 4501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[0].lex_str).str;
          }
#line 22735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 454:
#line 4509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[0].lex_str).str;
          }
#line 22744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 455:
#line 4517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[0].lex_str).str;
          }
#line 22753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 456:
#line 4525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 22767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 457:
#line 4538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= (new (thd->mem_root)
                                         st_alter_tablespace());
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 22781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 458:
#line 4551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
#line 22790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 459:
#line 4556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
#line 22799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 460:
#line 4561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
#line 22808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 461:
#line 4569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[0].ulonglong_number);
          }
#line 22817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 462:
#line 4577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[0].ulonglong_number);
          }
#line 22826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 463:
#line 4585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[0].ulonglong_number);
          }
#line 22835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 464:
#line 4593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[0].ulonglong_number);
          }
#line 22844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 465:
#line 4601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 22853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 466:
#line 4609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 22862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 467:
#line 4617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP"));
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[0].ulong_num);
          }
#line 22873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 468:
#line 4627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT"));
            lex->alter_tablespace_info->ts_comment= (yyvsp[0].lex_str).str;
          }
#line 22884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 469:
#line 4637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE, MYF(0),
                                "STORAGE ENGINE"));
            lex->alter_tablespace_info->storage_engine= (yyvsp[0].db_type);
          }
#line 22896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 472:
#line 4653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
#line 22905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 473:
#line 4658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
              my_yyabort_error((ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT"));
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
#line 22916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 474:
#line 4667 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= (yyvsp[0].ulonglong_number);}
#line 22922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 475:
#line 4669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[0].lex_str).str;
            uint str_len= (yyvsp[0].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G': text_shift_number+=30; break;
                case 'm':
                case 'M': text_shift_number+=20; break;
                case 'k':
                case 'K': text_shift_number+=10; break;
                default:
                  my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
              }
              if (prefix_number >> 31)
                my_yyabort_error((ER_SIZE_OVERFLOW_ERROR, MYF(0)));
              number= prefix_number << text_shift_number;
            }
            else
              my_yyabort_error((ER_WRONG_SIZE_NUMBER, MYF(0)));
            (yyval.ulonglong_number)= number;
          }
#line 22957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 476:
#line 4707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.option_list= NULL; }
#line 22963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 477:
#line 4708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 478:
#line 4709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 479:
#line 4715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 22981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 480:
#line 4715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 481:
#line 4717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

            Lex->create_info.add(DDL_options_st::OPT_LIKE);
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[0].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
#line 23002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 482:
#line 4730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[0].table); }
#line 23008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 483:
#line 4731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[-1].table); }
#line 23014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 484:
#line 4735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 485:
#line 4737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(0);}
#line 23026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 486:
#line 4738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 487:
#line 4740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 23038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 488:
#line 4741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 489:
#line 4746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
#line 23058 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 490:
#line 4782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 492:
#line 4788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
#line 23082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 494:
#line 4806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
              my_yyabort_error((ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                                "--skip-partition"));
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), "partitioning",
                              "--with-plugin-partition"));
#endif
          }
#line 23098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 495:
#line 4821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(thd, ER_PARTITION_ENTRY_ERROR);
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
#line 23115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 496:
#line 4833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 498:
#line 4842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
#line 23132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 499:
#line 4849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= HASH_PARTITION; }
#line 23138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 500:
#line 4850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 501:
#line 4852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 23150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 502:
#line 4854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 23156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 503:
#line 4856 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 23162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 504:
#line 4858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 23168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 505:
#line 4862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 506:
#line 4864 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->linear_hash_ind= TRUE;}
#line 23180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 507:
#line 4869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
#line 23186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 508:
#line 4871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch ((yyvsp[0].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 23204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 509:
#line 4887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 510:
#line 4888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 511:
#line 4892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 512:
#line 4893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 513:
#line 4898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of partition fields"));
          }
#line 23245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 514:
#line 4914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
#line 23255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 515:
#line 4924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[-3].simple_string)+1, (yyvsp[-2].item), (yyvsp[-1].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
#line 23267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 516:
#line 4935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->part_info->set_part_expr((yyvsp[-3].simple_string)+1, (yyvsp[-2].item), (yyvsp[-1].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
#line 23276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 517:
#line 4943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 518:
#line 4945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            uint num_parts= (yyvsp[0].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "partitions"));

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
#line 23296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 519:
#line 4957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 520:
#line 4959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->subpart_type= HASH_PARTITION; }
#line 23308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 521:
#line 4960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 522:
#line 4963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
#line 23324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 523:
#line 4968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 524:
#line 4972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 525:
#line 4973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 526:
#line 4978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[0].lex_str).str, thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
              my_yyabort_error((ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                                "list of subpartition fields"));
          }
#line 23358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 527:
#line 4993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[0].item);
          }
#line 23375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 528:
#line 5008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 529:
#line 5010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint num_parts= (yyvsp[0].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
              my_yyabort_error((ER_NO_PARTS_ERROR, MYF(0), "subpartitions"));
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
#line 23394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 530:
#line 5022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "RANGE"));
            if (part_info->part_type == LIST_PARTITION)
              my_yyabort_error((ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                                "LIST"));
          }
#line 23408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 531:
#line 5032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_PART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 23431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 532:
#line 5053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 533:
#line 5054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 534:
#line 5059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new (thd->mem_root) partition_element();

            if (!p_elem ||
                 part_info->partitions.push_back(p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
#line 23464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 535:
#line 5079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23470 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 536:
#line 5084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 23482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 537:
#line 5095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->error_if_requires_values())
                 MYSQL_YYABORT;
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
#line 23498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 538:
#line 5107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "RANGE", "LESS THAN"));
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
#line 23515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 539:
#line 5119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 540:
#line 5121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
                my_yyabort_error((ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                                  "LIST", "IN"));
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
#line 23538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 541:
#line 5133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 542:
#line 5138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 23570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 543:
#line 5159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 544:
#line 5164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val(thd))
              {
                MYSQL_YYABORT;
              }
            }
          }
#line 23609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 545:
#line 5193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(thd, ER_ROW_SINGLE_PARTITION_FIELD_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 23622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 546:
#line 5204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 547:
#line 5205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 548:
#line 5210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 23650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 549:
#line 5221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 550:
#line 5223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(thd, ER_PARTITION_COLUMN_LIST_ERROR);
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
#line 23681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 551:
#line 5246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 552:
#line 5247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 553:
#line 5252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(thd, ER_MAXVALUE_IN_VALUES_IN);
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value(thd))
            {
              MYSQL_YYABORT;
            }
          }
#line 23710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 554:
#line 5265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[0].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(thd, ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR);
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
#line 23730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 555:
#line 5285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 23748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 556:
#line 5299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 23775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 557:
#line 5324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 558:
#line 5325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 559:
#line 5330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new (thd->mem_root)
                                           partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(thd, ER_PARTITION_WRONG_NO_SUBPART_ERROR);
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem, thd->mem_root))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
#line 23825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 560:
#line 5363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 561:
#line 5368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 23841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 562:
#line 5376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 563:
#line 5377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 564:
#line 5381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 565:
#line 5382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 566:
#line 5387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[0].lex_str).str; }
#line 23871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 567:
#line 5389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[0].db_type);
            part_info->default_engine_type= (yyvsp[0].db_type);
          }
#line 23881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 568:
#line 5395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[0].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[0].lex_str).length;
          }
#line 23891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 569:
#line 5401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[0].ulong_num); }
#line 23897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 570:
#line 5403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 23903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 571:
#line 5405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 23909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 572:
#line 5407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[0].lex_str).str; }
#line 23915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 573:
#line 5409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[0].lex_str).str; }
#line 23921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 574:
#line 5411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[0].lex_str).str; }
#line 23927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 575:
#line 5420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 23946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 576:
#line 5435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 23954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 577:
#line 5439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
#line 23966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 578:
#line 5449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 579:
#line 5450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 580:
#line 5454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 581:
#line 5455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 582:
#line 5459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 583:
#line 5460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 584:
#line 5464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 585:
#line 5465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 586:
#line 5470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= FALSE;
          }
#line 24022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 587:
#line 5474 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= TRUE;
          }
#line 24030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 588:
#line 5481 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 24038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 589:
#line 5485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_NOT_EXISTS);
          }
#line 24046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 590:
#line 5492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).init();
          }
#line 24054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 591:
#line 5496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.object_ddl_options).set(DDL_options_st::OPT_OR_REPLACE);
          }
#line 24062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 599:
#line 5519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.db_type= (yyvsp[0].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
#line 24071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 600:
#line 5524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.max_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
#line 24080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 601:
#line 5529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.min_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
#line 24089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 602:
#line 5534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.avg_row_length=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
#line 24098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 603:
#line 5539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.password=(yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
#line 24107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 604:
#line 5544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.comment=(yyvsp[0].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
#line 24116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 605:
#line 5549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.auto_increment_value=(yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
#line 24125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 606:
#line 5554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 24144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 607:
#line 5569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 24154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 608:
#line 5575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 24173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 609:
#line 5590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 24182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 610:
#line 5595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 24201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 611:
#line 5610 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 24211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 612:
#line 5616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[0].ulong_num) == 0 || (yyvsp[0].ulong_num) > 0xffff)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 24233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 613:
#line 5634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 24242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 614:
#line 5639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 24251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 615:
#line 5644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 24260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 616:
#line 5649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[0].choice);
          }
#line 24269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 617:
#line 5654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
#line 24278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 618:
#line 5659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.row_type= (yyvsp[0].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
#line 24287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 619:
#line 5664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
#line 24295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 620:
#line 5668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
#line 24321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 623:
#line 5692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.merge_insert_method= (yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
#line 24330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 624:
#line 5697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.data_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
#line 24339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 625:
#line 5702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.index_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
#line 24348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 626:
#line 5707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.tablespace= (yyvsp[0].lex_str).str;}
#line 24354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 627:
#line 5709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_DISK;}
#line 24360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 628:
#line 5711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
#line 24366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 629:
#line 5713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.connect_string.str= (yyvsp[0].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[0].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
#line 24376 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 630:
#line 5719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[0].ulong_num);
          }
#line 24385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 631:
#line 5724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[0].choice);
          }
#line 24394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 632:
#line 5729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 633:
#line 5737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 634:
#line 5745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 24428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 635:
#line 5751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 636:
#line 5760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
          }
#line 24447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 637:
#line 5768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[0].charset) &&
                 !((yyvsp[0].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[0].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[0].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
#line 24465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 638:
#line 5785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str),
                                            thd->lex->create_info.tmp_table());

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
                my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str));
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER_THD(thd, ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[0].lex_str).str);
            }
          }
#line 24487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 639:
#line 5806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str), false)))
              (yyval.db_type)= plugin_hton(plugin);
            else
              my_yyabort_error((ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 24499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 640:
#line 5816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
#line 24505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 641:
#line 5817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_FIXED; }
#line 24511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 642:
#line 5818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
#line 24517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 643:
#line 5819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
#line 24523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 644:
#line 5820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
#line 24529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 645:
#line 5821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
#line 24535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 646:
#line 5822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_PAGE; }
#line 24541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 647:
#line 5826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
#line 24547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 648:
#line 5827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
#line 24553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 649:
#line 5828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
#line 24559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 650:
#line 5832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) STRING_RESULT; }
#line 24565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 651:
#line 5833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) REAL_RESULT; }
#line 24571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 652:
#line 5834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) DECIMAL_RESULT; }
#line 24577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 653:
#line 5835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) INT_RESULT; }
#line 24583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 654:
#line 5841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
#line 24591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 661:
#line 5863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-1].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 662:
#line 5868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 663:
#line 5870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key(Key::MULTIPLE, (yyvsp[-2].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 664:
#line 5875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 665:
#line 5877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 666:
#line 5882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 667:
#line 5884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[0].lex_str), HA_KEY_ALG_UNDEF, (yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 668:
#line 5889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 669:
#line 5893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-3].key_type), (yyvsp[-1].lex_str).str ? (yyvsp[-1].lex_str) : (yyvsp[-4].lex_str), (yyvsp[0].key_alg), (yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 670:
#line 5898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 671:
#line 5901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_list= NULL;
            if (Lex->add_key((yyvsp[-4].key_type), (yyvsp[-2].lex_str).str ? (yyvsp[-2].lex_str) : (yyvsp[-5].lex_str), (yyvsp[0].key_alg), (yyvsp[-3].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 24681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 672:
#line 5906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 673:
#line 5908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->check_add_key((yyvsp[-1].object_ddl_options)) ||
               !(Lex->last_key= (new (thd->mem_root)
                                 Key(Key::MULTIPLE, (yyvsp[-4].lex_str).str ? (yyvsp[-4].lex_str) : (yyvsp[0].lex_str),
                                     HA_KEY_ALG_UNDEF, true, (yyvsp[-1].object_ddl_options)))))
              MYSQL_YYABORT;
            Lex->option_list= NULL;
          }
#line 24700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 674:
#line 5917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Key *key= (new (thd->mem_root)
                       Foreign_key((yyvsp[-5].lex_str).str ? (yyvsp[-5].lex_str) : (yyvsp[-9].lex_str),
                                   lex->last_key->columns,
                                   (yyvsp[0].table)->db,
                                   (yyvsp[0].table)->table,
                                   lex->ref_list,
                                   lex->fk_delete_opt,
                                   lex->fk_update_opt,
                                   lex->fk_match_option,
                                    (yyvsp[-6].object_ddl_options)));
            if (key == NULL)
              MYSQL_YYABORT;
            /*
              handle_if_exists_options() expectes the two keys in this order:
              the Foreign_key, followed by its auto-generated Key.
            */
            lex->alter_info.key_list.push_back(key, thd->mem_root);
            lex->alter_info.key_list.push_back(Lex->last_key, thd->mem_root);
            lex->option_list= NULL;

            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
#line 24730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 675:
#line 5942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 24736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 679:
#line 5955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 24742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 680:
#line 5956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 24748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 681:
#line 5960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 24754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 682:
#line 5965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Create_field *f= new (thd->mem_root) Create_field();

            if (check_string_char_length(&(yyvsp[0].lex_str), 0, NAME_CHAR_LEN,
                                         system_charset_info, 1))
              my_yyabort_error((ER_TOO_LONG_IDENT, MYF(0), (yyvsp[0].lex_str).str));

            if (!f)
              MYSQL_YYABORT;

            lex->init_last_field(f, (yyvsp[0].lex_str).str, NULL);
          }
#line 24772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 683:
#line 5978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->set_last_field_type((yyvsp[0].field_type)); }
#line 24778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 684:
#line 5980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Create_field *f= lex->last_field;

            if (f->check(thd))
              MYSQL_YYABORT;

            lex->alter_info.create_list.push_back(f, thd->mem_root);

            if (f->flags & PRI_KEY_FLAG)
              add_key_to_list(lex, &(yyvsp[-4].lex_str), Key::PRIMARY, Lex->check_exists);
            else if (f->flags & (UNIQUE_FLAG | UNIQUE_KEY_FLAG))
              add_key_to_list(lex, &(yyvsp[-4].lex_str), Key::UNIQUE, Lex->check_exists);
          }
#line 24797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 687:
#line 6004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 688:
#line 6005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 689:
#line 6010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 24817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 690:
#line 6014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 24825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 691:
#line 6018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 24833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 692:
#line 6024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 693:
#line 6025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24845 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 694:
#line 6029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 696:
#line 6035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 24861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 697:
#line 6041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 24871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 698:
#line 6046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->comment= (yyvsp[0].lex_str); }
#line 24877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 699:
#line 6051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
              my_yyabort_error((ER_SYNTAX_ERROR, MYF(0)));
          }
#line 24891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 700:
#line 6064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Virtual_column_info *v= new (thd->mem_root) Virtual_column_info();
            if (!v)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)) - 1;
            v->expr_str.str= (char* ) thd->memdup((yyvsp[-2].simple_string) + 1, expr_len);
            v->expr_str.length= expr_len;
            v->expr_item= (yyvsp[-1].item);
            Lex->last_field->vcol_info= v;
          }
#line 24909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 701:
#line 6080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=(yyvsp[-2].field_type); }
#line 24915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 702:
#line 6081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=(yyvsp[-2].field_type); }
#line 24921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 703:
#line 6083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_FLOAT;
            if (Lex->length && !Lex->dec)
            {
              int err;
              ulonglong tmp_length= my_strtoll10(Lex->length, NULL, &err);
              if (err || tmp_length > PRECISION_FOR_DOUBLE)
                my_yyabort_error((ER_WRONG_FIELD_SPEC, MYF(0),
                                  Lex->last_field->field_name));
              if (tmp_length > PRECISION_FOR_FLOAT)
                (yyval.field_type)= MYSQL_TYPE_DOUBLE;
              Lex->length= 0;
            }
          }
#line 24940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 704:
#line 6098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_BIT;
          }
#line 24949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 705:
#line 6103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_BIT;
          }
#line 24957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 706:
#line 6107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_TINY;
          }
#line 24966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 707:
#line 6112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_TINY;
          }
#line 24975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 708:
#line 6117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 24983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 709:
#line 6121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 24992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 710:
#line 6126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_STRING;
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 25001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 711:
#line 6131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.field_type)=MYSQL_TYPE_STRING;
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 25011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 712:
#line 6137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 25020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 713:
#line 6142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_STRING;
          }
#line 25030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 714:
#line 6148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
          }
#line 25038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 715:
#line 6152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
            bincmp_collation(national_charset_info, (yyvsp[0].num));
          }
#line 25047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 716:
#line 6157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)= MYSQL_TYPE_VARCHAR;
          }
#line 25056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 717:
#line 6162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER_THD(thd, ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.field_type)=MYSQL_TYPE_YEAR;
          }
#line 25078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 718:
#line 6180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DATE; }
#line 25084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 719:
#line 6182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)= opt_mysql56_temporal_format ?
                MYSQL_TYPE_TIME2 : MYSQL_TYPE_TIME; }
#line 25091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 720:
#line 6185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.field_type)= opt_mysql56_temporal_format ?
                  MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
                Unless --explicit-defaults-for-timestamp is given.
              */
              if (!opt_explicit_defaults_for_timestamp)
                Lex->last_field->flags|= NOT_NULL_FLAG;
              (yyval.field_type)= opt_mysql56_temporal_format ? MYSQL_TYPE_TIMESTAMP2
                                              : MYSQL_TYPE_TIMESTAMP;
            }
          }
#line 25112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 721:
#line 6202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)= opt_mysql56_temporal_format ?
                MYSQL_TYPE_DATETIME2 : MYSQL_TYPE_DATETIME; }
#line 25119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 722:
#line 6205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_TINY_BLOB;
          }
#line 25128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 723:
#line 6210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_BLOB;
          }
#line 25137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 724:
#line 6215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->last_field->geom_type= (yyvsp[-2].geom_type);
            (yyval.field_type)=MYSQL_TYPE_GEOMETRY;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 25152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 725:
#line 6226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB;
          }
#line 25161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 726:
#line 6231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_LONG_BLOB;
          }
#line 25170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 727:
#line 6236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB;
          }
#line 25179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 728:
#line 6241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 729:
#line 6243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_TINY_BLOB; }
#line 25191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 730:
#line 6245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_BLOB; }
#line 25197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 731:
#line 6247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 732:
#line 6249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONG_BLOB; }
#line 25209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 733:
#line 6251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
#line 25215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 734:
#line 6253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
#line 25221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 735:
#line 6255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_NEWDECIMAL;}
#line 25227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 736:
#line 6257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_ENUM; }
#line 25233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 737:
#line 6259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_SET; }
#line 25239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 738:
#line 6261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 739:
#line 6263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)=MYSQL_TYPE_LONGLONG;
            Lex->last_field->flags|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
#line 25255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 740:
#line 6271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRY; }
#line 25261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 741:
#line 6272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_GEOMETRYCOLLECTION; }
#line 25267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 742:
#line 6274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.geom_type)= Field::GEOM_POINT;
          }
#line 25277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 743:
#line 6279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOINT; }
#line 25283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 744:
#line 6280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_LINESTRING; }
#line 25289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 745:
#line 6281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTILINESTRING; }
#line 25295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 746:
#line 6282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_POLYGON; }
#line 25301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 747:
#line 6283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.geom_type)= Field::GEOM_MULTIPOLYGON; }
#line 25307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 748:
#line 6287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 749:
#line 6291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 750:
#line 6292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 751:
#line 6296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 752:
#line 6297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 753:
#line 6301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 754:
#line 6302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 755:
#line 6303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 756:
#line 6304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 757:
#line 6305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 758:
#line 6309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONG; }
#line 25373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 759:
#line 6310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_TINY; }
#line 25379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 760:
#line 6311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_SHORT; }
#line 25385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 761:
#line 6312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_INT24; }
#line 25391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 762:
#line 6313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_LONGLONG; }
#line 25397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 763:
#line 6318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.field_type)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
#line 25406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 764:
#line 6323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 25412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 765:
#line 6325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.field_type)=MYSQL_TYPE_DOUBLE; }
#line 25418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 766:
#line 6330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->srid= 0; }
#line 25424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 767:
#line 6333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_field->srid=atoi((yyvsp[0].lex_str).str);
          }
#line 25432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 768:
#line 6340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->dec=Lex->length= (char*)0; }
#line 25438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 769:
#line 6342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->dec= (char*)0; }
#line 25444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 770:
#line 6344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 771:
#line 6349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[-3].lex_str).str;
            lex->dec=(yyvsp[-1].lex_str).str;
          }
#line 25460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 772:
#line 6357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 773:
#line 6358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 774:
#line 6362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 775:
#line 6363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 776:
#line 6367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 777:
#line 6368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG;}
#line 25496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 778:
#line 6369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 25502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 779:
#line 6373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 780:
#line 6374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 781:
#line 6375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 782:
#line 6376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 783:
#line 6379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length=(char*) 0; /* use default length */ }
#line 25532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 784:
#line 6380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 25538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 785:
#line 6384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 786:
#line 6385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 787:
#line 6389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 788:
#line 6390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 789:
#line 6394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 791:
#line 6399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags&= ~ NOT_NULL_FLAG; }
#line 25574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 792:
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= NOT_NULL_FLAG; }
#line 25580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 793:
#line 6401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->def= (yyvsp[0].item); }
#line 25586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 794:
#line 6403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->last_field->on_update= item;
          }
#line 25597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 795:
#line 6409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
#line 25603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 796:
#line 6411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->last_field->flags|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 797:
#line 6417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 798:
#line 6423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 799:
#line 6429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->last_field->flags|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
#line 25643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 800:
#line 6434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->comment= (yyvsp[0].lex_str); }
#line 25649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 801:
#line 6436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name,Lex->charset->csname));
            Lex->last_field->charset= (yyvsp[0].charset);
          }
#line 25660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 802:
#line 6443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 25672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 803:
#line 6451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->last_field->option_list,
                                  &Lex->option_list_last);
          }
#line 25684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 804:
#line 6459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->last_field->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 25694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 805:
#line 6465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->last_field->option_list, &Lex->option_list_last);
          }
#line 25703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 806:
#line 6474 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.field_type)= (yyvsp[-1].field_type);

          if ((yyvsp[0].charset))
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[0].charset))))
              MYSQL_YYABORT;
          }
          Lex->set_last_field_type((yyvsp[-1].field_type));
        }
#line 25718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 807:
#line 6489 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 25728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 808:
#line 6495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 25734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 809:
#line 6499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 810:
#line 6500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 811:
#line 6505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 25755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 812:
#line 6509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 25761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 813:
#line 6513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 25767 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 814:
#line 6514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 815:
#line 6518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= NULL; }
#line 25779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 816:
#line 6519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 25785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 817:
#line 6524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[0].lex_str).str)))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 25795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 818:
#line 6529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 25801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 819:
#line 6533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 25807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 820:
#line 6534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 821:
#line 6539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[0].lex_str).str)))
              MYSQL_YYABORT;
          }
#line 25822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 822:
#line 6546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 823:
#line 6547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 25834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 824:
#line 6551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 25840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 825:
#line 6552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 826:
#line 6556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 827:
#line 6557 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 828:
#line 6561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 25864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 829:
#line 6562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_latin1; }
#line 25870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 830:
#line 6564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= get_charset_by_csname("ucs2", MY_CS_PRIMARY,MYF(0))))
              my_yyabort_error((ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2"));
          }
#line 25879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 831:
#line 6571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, false); }
#line 25885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 832:
#line 6572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(&my_charset_bin, false); }
#line 25891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 833:
#line 6573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[-1].charset), (yyvsp[0].num)); }
#line 25897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 834:
#line 6574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation(NULL, true); }
#line 25903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 835:
#line 6575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { bincmp_collation((yyvsp[0].charset), true); }
#line 25909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 836:
#line 6579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 25915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 837:
#line 6580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 25921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 838:
#line 6585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          if ((yyvsp[0].ulong_num) == 0)
          {
            my_parse_error(thd, ER_SYNTAX_ERROR);
            MYSQL_YYABORT;
          }
        }
#line 25933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 839:
#line 6593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-2].ulong_num); }
#line 25939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 840:
#line 6597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 25945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 841:
#line 6598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
#line 25951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 842:
#line 6602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
#line 25957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 843:
#line 6605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 25963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 844:
#line 6606 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 25969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 845:
#line 6607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-1].ulong_num) | (yyvsp[0].ulong_num); }
#line 25975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 846:
#line 6608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num) ; }
#line 25981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 847:
#line 6613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (yyvsp[0].ulong_num) < 1 ? 1 : ((yyvsp[0].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[0].ulong_num));
          (yyval.ulong_num)--;
        }
#line 25990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 848:
#line 6621 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (1 | (yyvsp[0].ulong_num)) << (yyvsp[-1].ulong_num);
        }
#line 25998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 849:
#line 6627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 850:
#line 6628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)|= (yyvsp[0].ulong_num); }
#line 26010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 851:
#line 6633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          uint start= (yyvsp[-2].ulong_num);
          uint end= (yyvsp[0].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
#line 26021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 852:
#line 6642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 853:
#line 6643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 854:
#line 6647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 26039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 855:
#line 6648 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 26045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 858:
#line 6662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)=(yyvsp[-3].table);
          }
#line 26053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 859:
#line 6669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ref_list.empty(); }
#line 26059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 861:
#line 6675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key, thd->mem_root);
          }
#line 26070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 862:
#line 6682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key, thd->mem_root);
          }
#line 26083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 863:
#line 6694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
#line 26089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 864:
#line 6696 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
#line 26095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 865:
#line 6698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
#line 26101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 866:
#line 6700 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
#line 26107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 867:
#line 6705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
#line 26117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 868:
#line 6711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
#line 26127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 869:
#line 6717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 26137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 870:
#line 6724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[-3].m_fk_option);
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 26147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 871:
#line 6731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= (yyvsp[-3].m_fk_option);
          }
#line 26157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 872:
#line 6739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
#line 26163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 873:
#line 6740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
#line 26169 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 874:
#line 6741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
#line 26175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 875:
#line 6742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
#line 26181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 876:
#line 6743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
#line 26187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 877:
#line 6747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::PRIMARY; }
#line 26193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 878:
#line 6748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 26199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 879:
#line 6752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26205 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 880:
#line 6753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 881:
#line 6757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 883:
#line 6762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 884:
#line 6763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 885:
#line 6764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 886:
#line 6768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::MULTIPLE; }
#line 26241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 887:
#line 6769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 26247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 888:
#line 6773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::FULLTEXT;}
#line 26253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 889:
#line 6778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 26266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 890:
#line 6789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 891:
#line 6790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 26278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 892:
#line 6794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 893:
#line 6795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 26290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 894:
#line 6799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 895:
#line 6800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->option_list= Lex->option_list; }
#line 26302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 902:
#line 6819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 26308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 903:
#line 6820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 26314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 904:
#line 6824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_UNDEF; }
#line 26320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 905:
#line 6825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 26326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 906:
#line 6826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= (yyvsp[0].key_alg); }
#line 26332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 907:
#line 6830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 26338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 908:
#line 6832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 26344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 909:
#line 6837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.block_size= (yyvsp[0].ulong_num); }
#line 26350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 910:
#line 6839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_key->key_create_info.comment= (yyvsp[0].lex_str); }
#line 26356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 911:
#line 6841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 26368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 912:
#line 6849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].lex_str).length > ENGINE_OPTION_MAX_LENGTH)
              my_yyabort_error((ER_VALUE_TOO_LONG, MYF(0), (yyvsp[-2].lex_str).str));
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 26380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 913:
#line 6857 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 26390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 914:
#line 6863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
#line 26399 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 919:
#line 6881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (plugin_is_ready(&(yyvsp[0].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->last_key->key_create_info.parser_name= (yyvsp[0].lex_str);
            else
              my_yyabort_error((ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 26410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 920:
#line 6890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
#line 26416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 921:
#line 6891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
#line 26422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 922:
#line 6892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
#line 26428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 923:
#line 6897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 26436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 924:
#line 6901 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->last_key->columns.push_back((yyvsp[-1].key_part), thd->mem_root);
          }
#line 26444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 925:
#line 6908 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[0].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 26454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 926:
#line 6914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int key_part_len= atoi((yyvsp[-1].lex_str).str);
            if (!key_part_len)
              my_yyabort_error((ER_KEY_PART_0, MYF(0), (yyvsp[-3].lex_str).str));
            (yyval.key_part)= new (thd->mem_root) Key_part_spec((yyvsp[-3].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 26467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 927:
#line 6925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 928:
#line 6926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 929:
#line 6930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 930:
#line 6931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 931:
#line 6936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 26497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 932:
#line 6938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->last_field->interval_list.push_back((yyvsp[0].string), thd->mem_root); }
#line 26503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 933:
#line 6946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name= null_lex_str;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->select_lex.init_order();
            Lex->create_info.init();
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
#line 26521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 934:
#line 6960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 26535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 935:
#line 6970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
#line 26549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 936:
#line 6980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 26558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 937:
#line 6985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[-2].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
#line 26571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 938:
#line 6994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "DATABASE"));
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[-4].lex_str);
          }
#line 26583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 939:
#line 7002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 26595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 940:
#line 7010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[-2].spname);
          }
#line 26606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 941:
#line 7017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 26618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 942:
#line 7025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[-2].spname);
          }
#line 26629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 943:
#line 7032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_mode= VIEW_ALTER;
          }
#line 26641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 944:
#line 7040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 945:
#line 7047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW"));
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
#line 26660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 946:
#line 7056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 947:
#line 7058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[0].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_begin= (yyvsp[-2].simple_string);
          }
#line 26687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 948:
#line 7079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyvsp[-4].num) || (yyvsp[-3].num) || (yyvsp[-2].num) || (yyvsp[-1].num) || (yyvsp[0].num)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
            Lex->stmt_definition_end= (char*)YYLIP->get_cpp_ptr();
          }
#line 26705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 949:
#line 7093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
#line 26714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 950:
#line 7098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
#line 26723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 951:
#line 7103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
#line 26732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 952:
#line 7108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
#line 26741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 953:
#line 7113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 26751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 954:
#line 7117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 26757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 955:
#line 7121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 956:
#line 7122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 957:
#line 7123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 958:
#line 7124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 959:
#line 7128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 960:
#line 7130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[0].spname); 
            (yyval.num)= 1;
          }
#line 26800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 961:
#line 7141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 962:
#line 7142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 963:
#line 7146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 964:
#line 7147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 966:
#line 7153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 967:
#line 7161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26848 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 973:
#line 7183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
            DBUG_ASSERT(!Lex->if_exists());
            Lex->create_info.add((yyvsp[-1].object_ddl_options));
          }
#line 26858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 974:
#line 7190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
          }
#line 26868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 975:
#line 7197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 977:
#line 7210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
#line 26898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 978:
#line 7221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 980:
#line 7233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 982:
#line 7245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->alter_info.num_parts= (yyvsp[0].ulong_num);
          }
#line 26938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 983:
#line 7252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 985:
#line 7264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[-1].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[-1].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 986:
#line 7290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
#line 26987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 987:
#line 7297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
#line 26995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 989:
#line 7306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            DBUG_ASSERT(!Lex->create_info.if_not_exists());
            lex->create_info.set((yyvsp[-1].object_ddl_options));
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 27013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 990:
#line 7320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 992:
#line 7326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
#line 27028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 993:
#line 7331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->part_info->num_parts= (yyvsp[0].ulong_num);
          }
#line 27036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 994:
#line 7338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new (thd->mem_root) partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 27051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 996:
#line 7353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
#line 27059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 997:
#line 7357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
#line 27067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 998:
#line 7361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
#line 27076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 999:
#line 7368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1000:
#line 7369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1001:
#line 7374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[0].lex_str).str,
                                                          thd->mem_root))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
#line 27101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1004:
#line 7395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
#line 27110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1005:
#line 7403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 27118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1006:
#line 7407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 27127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1007:
#line 7412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
#line 27136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1008:
#line 7418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->last_field->change= (yyvsp[-2].lex_str).str;
          }
#line 27146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1009:
#line 7425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->last_field->change= Lex->last_field->field_name;
          }
#line 27156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1010:
#line 7431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::COLUMN, (yyvsp[-1].lex_str).str, (yyvsp[-2].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
#line 27170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1011:
#line 7441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
#line 27184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1012:
#line 7451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, primary_key_name,
                                        FALSE));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 27199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1013:
#line 7462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 27213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1014:
#line 7472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 27223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1015:
#line 7478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 27233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1016:
#line 7484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= new (thd->mem_root) Alter_column((yyvsp[-3].lex_str).str,(yyvsp[0].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 27246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1017:
#line 7493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= (new (thd->mem_root)
                               Alter_column((yyvsp[-2].lex_str).str, (Item*) 0));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac, thd->mem_root);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 27260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1018:
#line 7503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[0].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[0].table)->table.str,(yyvsp[0].table)->table.length, FALSE) ||
                ((yyvsp[0].table)->db.str && check_db_name(&(yyvsp[0].table)->db)))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[0].table)->table.str));
            lex->name= (yyvsp[0].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
#line 27280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1019:
#line 7519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-1].charset))
            {
              (yyvsp[-1].charset)= thd->variables.collation_database;
            }
            (yyvsp[0].charset)= (yyvsp[0].charset) ? (yyvsp[0].charset) : (yyvsp[-1].charset);
            if (!my_charset_same((yyvsp[-1].charset),(yyvsp[0].charset)))
              my_yyabort_error((ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                                (yyvsp[0].charset)->name, (yyvsp[-1].charset)->csname));
            if (Lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
            Lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 27298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1020:
#line 7533 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
#line 27312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1021:
#line 7543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
#line 27320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1022:
#line 7547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
#line 27329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1030:
#line 7564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
#line 27338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1031:
#line 7569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 27347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1032:
#line 7577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
#line 27356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1033:
#line 7582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[0].lex_str)))
              my_yyabort_error((ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 27365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1034:
#line 7589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1035:
#line 7590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1036:
#line 7594 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 27383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1037:
#line 7595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 27389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1038:
#line 7599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 27395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1044:
#line 7613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 27401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1045:
#line 7615 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
#line 27410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1046:
#line 7622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_DEFAULT; }
#line 27416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1047:
#line 7623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_RESTRICT; }
#line 27422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1048:
#line 7624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_CASCADE; }
#line 27428 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1049:
#line 7628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1050:
#line 7630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            store_position_for_column((yyvsp[0].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 27443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1051:
#line 7635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 27452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1052:
#line 7642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1053:
#line 7643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1054:
#line 7644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27470 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1055:
#line 7645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1056:
#line 7650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
#line 27487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1057:
#line 7657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1058:
#line 7659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
#line 27503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1059:
#line 7664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1060:
#line 7666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 27520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1061:
#line 7673 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 27531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1062:
#line 7683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[0].num);
          }
#line 27548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1063:
#line 7699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= 0;
          }
#line 27556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1064:
#line 7703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 27564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1065:
#line 7710 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 27572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1066:
#line 7714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[-2].num) | (yyvsp[0].num);
          }
#line 27580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1067:
#line 7721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
#line 27588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1068:
#line 7725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
#line 27596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1069:
#line 7729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
#line 27604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1070:
#line 7735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt= 0; }
#line 27610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1071:
#line 7737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1074:
#line 7746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1075:
#line 7747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_SQL; }
#line 27628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1076:
#line 7748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_IO; }
#line 27634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1077:
#line 7752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1078:
#line 7754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
               my_yyabort_error((ER_BAD_SLAVE_UNTIL_COND, MYF(0)));
          }
#line 27653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1079:
#line 7763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.gtid_pos_str = (yyvsp[0].lex_str);
          }
#line 27661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1082:
#line 7775 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1083:
#line 7782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1084:
#line 7786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= 0; }
#line 27684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1085:
#line 7787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_QUICK; }
#line 27690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1086:
#line 7788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_EXTEND; }
#line 27696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1088:
#line 7793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 27702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1090:
#line 7798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[0].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1091:
#line 7808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1092:
#line 7818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 27734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1093:
#line 7819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1094:
#line 7823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1095:
#line 7824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1096:
#line 7828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 27758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1097:
#line 7829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 27764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1098:
#line 7830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
#line 27770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1099:
#line 7834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 27776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1100:
#line 7835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
#line 27782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1101:
#line 7840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1102:
#line 7850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1106:
#line 7870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1107:
#line 7872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
#line 27822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1108:
#line 7879 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1109:
#line 7881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1110:
#line 7884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1111:
#line 7886 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->column_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
#line 27851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1113:
#line 7897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27857 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1114:
#line 7899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->index_list= new (thd->mem_root) List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
#line 27868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1116:
#line 7911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1117:
#line 7913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 27883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1118:
#line 7918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
                thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)), thd->mem_root);
          }
#line 27892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1119:
#line 7926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1122:
#line 7933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->index_list->push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
          }
#line 27908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1123:
#line 7940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back((LEX_STRING*)
                                        thd->memdup(&str, sizeof(LEX_STRING)),
                                        thd->mem_root);
          }
#line 27919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1124:
#line 7950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[0].lex_str);
          }
#line 27928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1126:
#line 7958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 27934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1128:
#line 7962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1129:
#line 7972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "CHECK"));
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1130:
#line 7984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 27968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1131:
#line 7985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1132:
#line 7989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1133:
#line 7990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1134:
#line 7994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 27992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1135:
#line 7995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_FAST; }
#line 27998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1136:
#line 7996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_MEDIUM; }
#line 28004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1137:
#line 7997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 28010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1138:
#line 7998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
#line 28016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1139:
#line 7999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 28022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1140:
#line 8003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1141:
#line 8004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 28034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1142:
#line 8009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 28048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1143:
#line 8019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 28060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1144:
#line 8029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 28066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1145:
#line 8030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1146:
#line 8031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 28078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1147:
#line 8036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
#line 28086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1148:
#line 8040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1149:
#line 8042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
#line 28100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1150:
#line 8049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 28110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1151:
#line 8055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user), thd->mem_root) ||
                Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 28120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1154:
#line 8069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(thd, (yyvsp[-2].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(thd, (yyvsp[0].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
#line 28134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1155:
#line 8082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.reset();
          }
#line 28142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1156:
#line 8086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 28152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1161:
#line 8105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28163 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1162:
#line 8115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1163:
#line 8124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1164:
#line 8125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str) = default_key_cache_base; }
#line 28186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1165:
#line 8130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
#line 28196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1166:
#line 8136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1171:
#line 8151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1172:
#line 8161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-3].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1173:
#line 8171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
#line 28232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1175:
#line 8178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
#line 28242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1177:
#line 8187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1179:
#line 8193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 28254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1180:
#line 8194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
#line 28260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1181:
#line 8204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
#line 28269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1184:
#line 8217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              In order to correctly parse UNION's global ORDER BY we need to
              set braces before parsing the clause.
            */
            Lex->current_select->set_braces(true);
          }
#line 28281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1185:
#line 8225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
#line 28290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1187:
#line 8234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->current_select->set_braces(true);
          }
#line 28298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1188:
#line 8239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
#line 28307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1190:
#line 8248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            /* Parentheses carry no meaning here */
            lex->current_select->set_braces(false);
          }
#line 28317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1194:
#line 8278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-9].num) && (yyvsp[-1].num))         /* double "INTO" clause */
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "INTO", "INTO"));

            if ((yyvsp[-2].num) && ((yyvsp[-9].num) || (yyvsp[-1].num))) /* "INTO" with "PROCEDURE ANALYSE" */
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "PROCEDURE", "INTO"));
          }
#line 28329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1195:
#line 8288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 28341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1196:
#line 8296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 28349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1201:
#line 8323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
#line 28359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1204:
#line 8338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT"));
          }
#line 28368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1208:
#line 8352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE"));

            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
#line 28389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1209:
#line 8369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
              my_yyabort_error((ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE"));
            if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE"));

            Lex->safe_to_cache_query=1;
            Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
          }
#line 28410 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1211:
#line 8390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
#line 28421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1212:
#line 8397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
#line 28433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1215:
#line 8410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root)
                          Item_field(thd, &thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
#line 28448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1216:
#line 8424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
          }
#line 28457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1217:
#line 8429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT((yyvsp[-3].simple_string) < (yyvsp[-1].simple_string));

            if (add_item_to_list(thd, (yyvsp[-2].item)))
              MYSQL_YYABORT;
            if ((yyvsp[0].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[0].lex_str).str))
                my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[0].lex_str).str));
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[-2].item)->name)
            {
              (yyvsp[-2].item)->set_name((yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            }
          }
#line 28480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1218:
#line 8450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_tok_start();
          }
#line 28488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1219:
#line 8456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
#line 28496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1220:
#line 8462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
#line 28504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1221:
#line 8468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=null_lex_str;}
#line 28510 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1222:
#line 8469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1223:
#line 8470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1224:
#line 8471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1225:
#line 8472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1226:
#line 8476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 28540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1227:
#line 8477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 28546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1228:
#line 8478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 28552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1229:
#line 8482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 28558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1230:
#line 8483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 28564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1231:
#line 8484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 28570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1232:
#line 8488 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1233:
#line 8489 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1234:
#line 8495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[-2].item)))
            {
              item1= (Item_cond_or*) (yyvsp[-2].item);
              if (is_cond_or((yyvsp[0].item)))
              {
                item3= (Item_cond_or*) (yyvsp[0].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_or((yyvsp[0].item)))
            {
              item3= (Item_cond_or*) (yyvsp[0].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item)= new (thd->mem_root) Item_cond_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1235:
#line 8546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* XOR is a proprietary extension */
            (yyval.item)= new (thd->mem_root) Item_func_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1236:
#line 8553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[-2].item)))
            {
              item1= (Item_cond_and*) (yyvsp[-2].item);
              if (is_cond_and((yyvsp[0].item)))
              {
                item3= (Item_cond_and*) (yyvsp[0].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[0].item), thd->mem_root);
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_and((yyvsp[0].item)))
            {
              item3= (Item_cond_and*) (yyvsp[0].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item), thd->mem_root);
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item)= new (thd->mem_root) Item_cond_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1237:
#line 8596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1238:
#line 8602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1239:
#line 8608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1240:
#line 8614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1241:
#line 8620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1242:
#line 8626 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1243:
#line 8632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1245:
#line 8642 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull(thd, (yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1246:
#line 8648 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull(thd, (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1247:
#line 8654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1248:
#line 8660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (*(yyvsp[-1].boolfunc2creator))(0)->create(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1249:
#line 8666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= all_any_subquery_creator(thd, (yyvsp[-5].item), (yyvsp[-4].boolfunc2creator), (yyvsp[-3].num), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1251:
#line 8676 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-4].item), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1252:
#line 8682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_in_subselect(thd, (yyvsp[-5].item), (yyvsp[-1].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1253:
#line 8691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-4].item), true, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28848 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1254:
#line 8697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-6].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1255:
#line 8705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-5].item), false, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1256:
#line 8711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-7].item), thd->mem_root);
            Item_func_in *item= new (thd->mem_root) Item_func_in(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
#line 28884 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1257:
#line 8721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_between(thd, (yyvsp[-4].item), (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1258:
#line 8727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
#line 28907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1259:
#line 8736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item1= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[-3].item));
            Item *item4= new (thd->mem_root) Item_func_soundex(thd, (yyvsp[0].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(thd, item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1260:
#line 8746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_like(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[0].item),
                                                   Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1261:
#line 8753 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_like(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1262:
#line 8763 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1263:
#line 8769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_regex(thd, (yyvsp[-3].item), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1265:
#line 8782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1266:
#line 8788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1267:
#line 8794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1268:
#line 8800 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1269:
#line 8806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1270:
#line 8812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1271:
#line 8818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1272:
#line 8824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-4].item), (yyvsp[-1].item), (yyvsp[0].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1273:
#line 8830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1274:
#line 8836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1275:
#line 8842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1276:
#line 8848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1277:
#line 8854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1278:
#line 8860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1288:
#line 8889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
#line 29115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1289:
#line 8890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
#line 29121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1290:
#line 8891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
#line 29127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1291:
#line 8892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_le_creator; }
#line 29133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1292:
#line 8893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
#line 29139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1293:
#line 8894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
#line 29145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1294:
#line 8898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 29151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1295:
#line 8899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 29157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1296:
#line 8904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
#line 29168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1297:
#line 8910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[0].num); }
#line 29174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1298:
#line 8915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1299:
#line 8922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1300:
#line 8929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1301:
#line 8936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1302:
#line 8943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1303:
#line 8950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
#line 29238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1304:
#line 8955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 29244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1305:
#line 8957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
#line 29254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1306:
#line 8963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
#line 29265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1307:
#line 8970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1308:
#line 8977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
#line 29288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1309:
#line 8985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
#line 29300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1310:
#line 8996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[-3].item);
     (yyval.dyncol_def)->value= (yyvsp[-1].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[0].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
#line 29324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1311:
#line 9018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
       }
#line 29335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1312:
#line 9025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyvsp[-2].dyncol_def_list)->push_back((yyvsp[0].dyncol_def), thd->mem_root);
         (yyval.dyncol_def_list)= (yyvsp[-2].dyncol_def_list);
       }
#line 29344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1318:
#line 9038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str,
                                                      (yyvsp[0].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation(thd, (yyvsp[-2].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1320:
#line 9049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item_param); }
#line 29365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1323:
#line 9053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat(thd, (yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1324:
#line 9059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 29383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1325:
#line 9063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1326:
#line 9069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1327:
#line 9075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1328:
#line 9081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect(thd, (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1329:
#line 9087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[-1].item); }
#line 29429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1330:
#line 9089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29440 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1331:
#line 9096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyval.item)= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1332:
#line 9103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect(thd, (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1333:
#line 9109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[-1].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[-1].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[-2].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[-1].item);
          }
#line 29489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1334:
#line 9133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-5].item_list)->push_front((yyvsp[-2].item), thd->mem_root);
            Item_func_match *i1= new (thd->mem_root) Item_func_match(thd, *(yyvsp[-5].item_list),
                                                                     (yyvsp[-1].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(thd, i1);
            (yyval.item)= i1;
          }
#line 29503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1335:
#line 9143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[0].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1336:
#line 9150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1337:
#line 9158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(thd, *(yyvsp[-2].item_list), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1338:
#line 9164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1339:
#line 9171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset(thd, (yyvsp[-3].item), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1340:
#line 9177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_splocal *il= (yyvsp[-1].item)->get_item_splocal();
            if (il)
              my_yyabort_error((ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str));
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context(),
                                                         (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1341:
#line 9187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(thd, Lex->current_context(),
                                                        (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1342:
#line 9195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[0].item), (yyvsp[-3].item), (yyvsp[-2].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1343:
#line 9210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1344:
#line 9216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(thd, *(yyvsp[-3].item_list), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1345:
#line 9222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 29625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1346:
#line 9231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(thd,
                                      Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 29638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1347:
#line 9240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1348:
#line 9246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1349:
#line 9252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1350:
#line 9258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert(thd, (yyvsp[-7].item), (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1351:
#line 9264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[-1].item), thd->mem_root);
            list->push_front((yyvsp[-3].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1352:
#line 9278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item), thd->mem_root);
            (yyvsp[-1].item_list)->push_front((yyvsp[-5].item), thd->mem_root);
            Item_row *item= new (thd->mem_root) Item_row(thd, *(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1353:
#line 9289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_left(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1354:
#line 9295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1355:
#line 9301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_month(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1356:
#line 9307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_right(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1357:
#line 9313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_second(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1358:
#line 9319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1359:
#line 9326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast(thd, (yyvsp[-1].item),
                                      AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1360:
#line 9333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1361:
#line 9339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1362:
#line 9345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1363:
#line 9351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1364:
#line 9357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29833 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1365:
#line 9363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1366:
#line 9369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1367:
#line 9375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1368:
#line 9381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1369:
#line 9387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_user(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
#line 29885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1370:
#line 9395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_year(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1371:
#line 9416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1372:
#line 9423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1373:
#line 9429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1374:
#line 9436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1375:
#line 9444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1376:
#line 9451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1377:
#line 9457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_extract(thd, (yyvsp[-3].interval), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1378:
#line 9463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format(thd, (yyvsp[-3].date_time_type), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1379:
#line 9469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1380:
#line 9476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_locate(thd, (yyvsp[-1].item), (yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1381:
#line 9482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1382:
#line 9489 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1383:
#line 9495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1384:
#line 9501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1385:
#line 9507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1386:
#line 9513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1387:
#line 9519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local(thd, (yyvsp[0].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1388:
#line 9537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval(thd, (yyvsp[-1].item), (yyvsp[-3].item), (yyvsp[-5].interval_time_st), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1389:
#line 9543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff(thd, (yyvsp[-3].item), (yyvsp[-1].item), (yyvsp[-5].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1390:
#line 9549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1391:
#line 9556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1392:
#line 9563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc(thd, (yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1393:
#line 9571 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[-3].item), *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1394:
#line 9578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[-3].item), *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1395:
#line 9585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1396:
#line 9592 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1397:
#line 9599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1398:
#line 9616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1399:
#line 9622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1400:
#line 9628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1401:
#line 9634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1402:
#line 9640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_database(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1403:
#line 9647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_if(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1404:
#line 9653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1405:
#line 9659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_format(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1406:
#line 9665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(thd, *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1407:
#line 9671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1408:
#line 9677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1409:
#line 9683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=  new (thd->mem_root)
              Item_func_password(thd, (yyvsp[-1].item), Item_func_password::OLD);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1410:
#line 9690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item* i1;
            i1= new (thd->mem_root) Item_func_password(thd, (yyvsp[-1].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
#line 30322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1411:
#line 9698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_quarter(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1412:
#line 9704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1413:
#line 9710 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1414:
#line 9716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1415:
#line 9722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 30374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1416:
#line 9730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_round(thd, (yyvsp[-3].item), (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1417:
#line 9736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1;
            LEX_STRING name= {C_STRING_WITH_LEN("default_week_format")};
            if (!(i1= get_system_var(thd, OPT_SESSION,
                                     name, null_lex_str)))
              MYSQL_YYABORT;
            i1->set_name((const char *)
                         STRING_WITH_LEN("@@default_week_format"),
                         system_charset_info);
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-1].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1418:
#line 9750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week(thd, (yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1419:
#line 9756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-2].item), 0, 0, (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1420:
#line 9762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, (yyvsp[-5].item), 0, (yyvsp[-2].ulong_num),
                                        (yyvsp[-1].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1421:
#line 9770 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_char_typecast(thd, (yyvsp[-4].item), (yyvsp[-1].ulong_num),
                                                               &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(thd, item, 0, (yyvsp[-1].ulong_num),
                                        MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1422:
#line 9782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string(thd, (yyvsp[-7].item), (yyvsp[-5].ulong_num), (yyvsp[-3].ulong_num),
                                                            (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1423:
#line 9789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[0].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_yyabort_error((ER_FEATURE_DISABLED, MYF(0), sym_group_geom.name,
                              sym_group_geom.needed_define));
#endif
          }
#line 30477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1424:
#line 9804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_precise_rel(thd, (yyvsp[-3].item), (yyvsp[-1].item),
                                                 Item_func::SP_CONTAINS_FUNC));
          }
#line 30487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1425:
#line 9810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
#line 30498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1426:
#line 9817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
#line 30509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1427:
#line 9824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
#line 30520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1428:
#line 9831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
#line 30531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1429:
#line 9838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
#line 30542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1430:
#line 9845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point(thd, (yyvsp[-3].item), (yyvsp[-1].item)));
          }
#line 30550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1431:
#line 9849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(thd, *(yyvsp[-1].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
#line 30561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1432:
#line 9868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
#line 30584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1433:
#line 9887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[-4].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[-4].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[-2].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[-1].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 30641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1434:
#line 9940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[-5].lex_str).str || check_db_name(&(yyvsp[-5].lex_str)))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-5].lex_str).str));
            if (check_routine_name(&(yyvsp[-3].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[-5].lex_str), (yyvsp[-3].lex_str), true, (yyvsp[-1].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 30680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1435:
#line 9978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].num) | (yyvsp[0].num); }
#line 30686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1436:
#line 9980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_BOOL; }
#line 30692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1437:
#line 9984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 30698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1438:
#line 9985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 30704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1439:
#line 9989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;         }
#line 30710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1440:
#line 9990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_EXPAND; }
#line 30716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1441:
#line 9994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 30722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1442:
#line 9995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 30728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1443:
#line 10000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 30739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1444:
#line 10007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 30748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1445:
#line 10015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[0].lex_str).str)
            {
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[-2].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[-2].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[-2].item)->set_name((yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[-2].item);
          }
#line 30776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1446:
#line 10042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1447:
#line 10048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1448:
#line 10054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1449:
#line 10060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1450:
#line 10066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1451:
#line 10072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_int(thd, (int32) 0L, 1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1452:
#line 10081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1453:
#line 10087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 30855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1454:
#line 10089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr--; }
#line 30861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1455:
#line 10091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(thd, *(yyvsp[-2].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1456:
#line 10097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30881 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1457:
#line 10108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1458:
#line 10114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1459:
#line 10120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max(thd, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30911 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1460:
#line 10126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1461:
#line 10132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1462:
#line 10138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1463:
#line 10144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance(thd, (yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1464:
#line 10150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1465:
#line 10156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum(thd, (yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1466:
#line 10162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 30977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1467:
#line 10166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(thd, Lex->current_context(), (yyvsp[-5].num), (yyvsp[-3].item_list),
                                         sel->gorder_list, (yyvsp[-1].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].item_list)->empty();
            sel->gorder_list.empty();
          }
#line 30993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1468:
#line 10181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
          }
#line 31002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1469:
#line 10186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 31010 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1470:
#line 10193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item, thd->mem_root);
          }
#line 31024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1471:
#line 10203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 31036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1472:
#line 10211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[-1].lex_str).str && (yyvsp[0].lex_str).str && check_reserved_words(&(yyvsp[-1].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[-2].var_type), (yyvsp[-1].lex_str), (yyvsp[0].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
#line 31053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1473:
#line 10226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1474:
#line 10227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1475:
#line 10232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 31075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1476:
#line 10237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 31081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1478:
#line 10243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_yyabort_error((ER_WRONG_USAGE, MYF(0),
                                "CUBE/ROLLUP", "ORDER BY"));
            }
          }
#line 31097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1480:
#line 10259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 31103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1481:
#line 10261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 31109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1482:
#line 10266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1483:
#line 10275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[0].item);
          }
#line 31131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1484:
#line 10283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
#line 31137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1485:
#line 10285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= thd->variables.collation_connection; }
#line 31143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1486:
#line 10287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
#line 31149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1487:
#line 10289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
#line 31155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1488:
#line 10291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1489:
#line 10293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1490:
#line 10295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1491:
#line 10297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1492:
#line 10299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1493:
#line 10301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1494:
#line 10303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
#line 31201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1495:
#line 10309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
#line 31211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1496:
#line 10315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
#line 31217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1497:
#line 10317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
#line 31223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1498:
#line 10319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
#line 31229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1499:
#line 10322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 31235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1500:
#line 10323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list);}
#line 31241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1501:
#line 10328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 31252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1502:
#line 10335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 31261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1503:
#line 10342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 31267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1504:
#line 10343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[-1].item_list); }
#line 31273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1505:
#line 10348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 31284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1506:
#line 10355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 31293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1507:
#line 10362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 31299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1508:
#line 10363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 31305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1509:
#line 10367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 31311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1510:
#line 10368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 31317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1511:
#line 10373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyval.item_list)->push_back((yyvsp[0].item), thd->mem_root);
          }
#line 31329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1512:
#line 10381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-4].item_list)->push_back((yyvsp[-2].item), thd->mem_root);
            (yyvsp[-4].item_list)->push_back((yyvsp[0].item), thd->mem_root);
            (yyval.item_list)= (yyvsp[-4].item_list);
          }
#line 31339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1513:
#line 10391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1514:
#line 10393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(thd)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1515:
#line 10404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[0].table_list)); }
#line 31364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1516:
#line 10415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1517:
#line 10416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[-1].table_list); }
#line 31376 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1518:
#line 10422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1519:
#line 10424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
          }
#line 31390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1520:
#line 10444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list))); (yyvsp[0].table_list)->straight=(yyvsp[-1].num); }
#line 31396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1521:
#line 10447 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-3].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1522:
#line 10455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    (yyvsp[-3].table_list)->straight=(yyvsp[-4].num);
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 31419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1523:
#line 10463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
          }
#line 31427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1524:
#line 10467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
	    (yyvsp[-5].table_list)->straight=(yyvsp[-6].num);
            add_join_natural((yyvsp[-7].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
	    (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 31437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1525:
#line 10473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
	    (yyvsp[0].table_list)->straight=(yyvsp[-1].num);
            add_join_natural((yyvsp[-3].table_list),(yyvsp[0].table_list),NULL,Select);
          }
#line 31447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1526:
#line 10482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1527:
#line 10490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            add_join_on(thd, (yyvsp[-3].table_list), (yyvsp[0].item));
            Lex->pop_context();
            (yyvsp[-3].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[-3].table_list);
            Select->parsing_place= NO_MATTER;
          }
#line 31471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1528:
#line 10498 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 31479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1529:
#line 10502 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            add_join_natural((yyvsp[-9].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
            (yyvsp[-5].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 31489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1530:
#line 10508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[-5].table_list),(yyvsp[0].table_list),NULL,Select);
            (yyvsp[0].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[0].table_list);
          }
#line 31500 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1531:
#line 10518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1532:
#line 10526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on(thd, (yyval.table_list), (yyvsp[0].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 31525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1533:
#line 10535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 31533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1534:
#line 10539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select);
          }
#line 31544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1535:
#line 10546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[0].table_list),(yyvsp[-5].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
#line 31556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1536:
#line 10557 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1537:
#line 10558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1538:
#line 10559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1539:
#line 10563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = (yyvsp[0].num); }
#line 31580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1540:
#line 10564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1541:
#line 10572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string_list)= 0;}
#line 31592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1543:
#line 10578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 31600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1544:
#line 10592 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
#line 31609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1545:
#line 10597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[-3].table), (yyvsp[-1].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[-2].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
#line 31624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1546:
#line 10608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[-2].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(thd, ER_SYNTAX_ERROR);
                MYSQL_YYABORT;
              }
            }
            if ((yyvsp[-1].select_lex)->init_nested_join(thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
#line 31646 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1547:
#line 10644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[-2].table_list) || (yyvsp[0].lex_str_ptr)) && (yyvsp[-3].select_lex)->embedding &&
                !(yyvsp[-3].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[-2].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new (thd->mem_root) Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(thd,
                                               ti, (yyvsp[0].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[0].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[-2].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
#line 31713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1548:
#line 10729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list) && (yyvsp[0].num))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1549:
#line 10739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 31734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1550:
#line 10744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();

            if ((yyvsp[-4].table_list) != NULL)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1551:
#line 10762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1552:
#line 10774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 31777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1553:
#line 10782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 31785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1554:
#line 10790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].select_lex)->init_nested_join(thd))
              MYSQL_YYABORT;
          }
#line 31794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1555:
#line 10795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[-2].select_lex)->end_nested_join(thd)) && (yyvsp[0].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[0].table_list) && (yyval.table_list))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 31811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1556:
#line 10810 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 31832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1557:
#line 10827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 31840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1559:
#line 10834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= Select; }
#line 31846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1560:
#line 10839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
              my_yyabort_error((ER_VIEW_SELECT_DERIVED, MYF(0)));

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(thd))
            {
              /* we are not in parentheses */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
#line 31870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1561:
#line 10861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1562:
#line 10862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1563:
#line 10867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
#line 31890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1564:
#line 10870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
#line 31896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1565:
#line 10871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
#line 31902 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1566:
#line 10872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
#line 31908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1567:
#line 10876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
#line 31914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1568:
#line 10877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
#line 31920 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1569:
#line 10882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type((yyvsp[-2].index_hint), (yyvsp[0].num));
          }
#line 31928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1571:
#line 10887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[0].num));
          }
#line 31936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1576:
#line 10900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->alloc_index_hints(thd); }
#line 31942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1578:
#line 10904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {  Select->clear_index_hints(); }
#line 31948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1580:
#line 10909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, NULL, 0); }
#line 31954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1581:
#line 10910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1582:
#line 10915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length); }
#line 31966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1583:
#line 10917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
#line 31972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1586:
#line 10927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.string_list)= new (thd->mem_root) List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s, thd->mem_root);
          }
#line 31987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1587:
#line 10938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[-2].string_list)->push_back(s, thd->mem_root);
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 32001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1588:
#line 10950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1589:
#line 10951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
#line 32013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1590:
#line 10952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
#line 32019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1591:
#line 10953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
#line 32025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1592:
#line 10954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
#line 32031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1593:
#line 10955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
#line 32037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1594:
#line 10956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
#line 32043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1595:
#line 10957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
#line 32049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1596:
#line 10958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
#line 32055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1597:
#line 10959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
#line 32061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1598:
#line 10960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
#line 32067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1599:
#line 10961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
#line 32073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1600:
#line 10965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_DAY; }
#line 32079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1601:
#line 10966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
#line 32085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1602:
#line 10967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
#line 32091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1603:
#line 10968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
#line 32097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1604:
#line 10969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
#line 32103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1605:
#line 10970 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
#line 32109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1606:
#line 10971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
#line 32115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1607:
#line 10972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
#line 32121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1608:
#line 10973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
#line 32127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1609:
#line 10977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
#line 32133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1610:
#line 10978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
#line 32139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1611:
#line 10979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 32145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1612:
#line 10980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 32151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1616:
#line 10990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_ptr)=0; }
#line 32157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1617:
#line 10992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) thd->memdup(&(yyvsp[0].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 32167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1620:
#line 11005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->where= 0; }
#line 32173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1621:
#line 11007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_WHERE;
          }
#line 32181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1622:
#line 11011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond(thd, (yyvsp[0].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 32193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1624:
#line 11023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_HAVING;
          }
#line 32201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1625:
#line 11027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond(thd, (yyvsp[0].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 32213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1626:
#line 11038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[0].item);
          }
#line 32222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1627:
#line 11043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii(thd, "", 0) :
                 new (thd->mem_root) Item_string_ascii(thd, "\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1630:
#line 11064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1631:
#line 11066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1632:
#line 11070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1633:
#line 11072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                                "global union parameters"));
            lex->current_select->olap= CUBE_TYPE;

            my_yyabort_error((ER_NOT_SUPPORTED_YET, MYF(0), "CUBE"));
          }
#line 32274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1634:
#line 11089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                                "global union parameters"));
            lex->current_select->olap= ROLLUP_TYPE;
          }
#line 32293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1638:
#line 11120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            bool ascending= ((yyvsp[0].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[-1].item), ascending))
              MYSQL_YYABORT;
          }
#line 32303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1641:
#line 11138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE &&
                !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(thd))
                MYSQL_YYABORT;
            }
            if (sel->master_unit()->is_union() && !sel->braces)
            {
               /*
                 At this point we don't know yet whether this is the last
                 select in union or not, but we move ORDER BY to
                 fake_select_lex anyway. If there would be one more select
                 in union mysql_new_select will correctly throw error.
               */
               DBUG_ASSERT(sel->master_unit()->fake_select_lex);
               lex->current_select= sel->master_unit()->fake_select_lex;
             }
          }
#line 32350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1642:
#line 11181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

          }
#line 32358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1643:
#line 11188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1644:
#line 11190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1645:
#line 11194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =  1; }
#line 32376 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1646:
#line 11195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =1; }
#line 32382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1647:
#line 11196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =0; }
#line 32388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1648:
#line 11200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1649:
#line 11201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1650:
#line 11206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (sel->master_unit()->is_union() && !sel->braces)
            {
              /* Move LIMIT that belongs to UNION to fake_select_lex */
              Lex->current_select= sel->master_unit()->fake_select_lex;
              DBUG_ASSERT(Select);
            }
          }
#line 32414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1651:
#line 11219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1652:
#line 11227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1653:
#line 11231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1654:
#line 11238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
#line 32452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1655:
#line 11245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= (yyvsp[-2].item);
            sel->explicit_limit= 1;
          }
#line 32463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1656:
#line 11252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[-2].item);
            sel->offset_limit= (yyvsp[0].item);
            sel->explicit_limit= 1;
          }
#line 32474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1657:
#line 11262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
            my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
          if (splocal->type() != Item::INT_ITEM)
            my_yyabort_error((ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0)));
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
#line 32505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1658:
#line 11289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyvsp[0].item_param)->limit_clause_param= TRUE;
        }
#line 32513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1659:
#line 11293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1660:
#line 11299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1661:
#line 11305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1662:
#line 11314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[0].item);
          }
#line 32552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1663:
#line 11321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
#line 32561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1664:
#line 11326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
#line 32572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1665:
#line 11332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 32578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1666:
#line 11333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_SYNTAX_ERROR); MYSQL_YYABORT; }
#line 32584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1667:
#line 11337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1668:
#line 11338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1669:
#line 11339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1670:
#line 11343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1671:
#line 11344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1672:
#line 11345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1673:
#line 11346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1674:
#line 11347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1675:
#line 11348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1676:
#line 11352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1677:
#line 11353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1678:
#line 11354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1679:
#line 11355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1680:
#line 11356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 32668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1681:
#line 11360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1682:
#line 11361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1683:
#line 11362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1684:
#line 11363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1685:
#line 11364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1686:
#line 11368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1687:
#line 11369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1688:
#line 11370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= strtoull((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1689:
#line 11371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1690:
#line 11372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 32728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1691:
#line 11377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(thd, ER_ONLY_INTEGERS_ALLOWED); }
#line 32734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1694:
#line 11386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= (yyvsp[0].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
#line 32740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1695:
#line 11387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= HA_CHOICE_UNDEF; }
#line 32746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1696:
#line 11391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 32752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1697:
#line 11393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
              my_yyabort_error((ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE"));

            if (&lex->select_lex != lex->current_select)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery"));
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(thd, &lex->current_select->context,
                                           NULL, NULL, (yyvsp[0].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
#line 32785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1698:
#line 11422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
            (yyval.num)= true;
          }
#line 32795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1699:
#line 11430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1700:
#line 11431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1703:
#line 11441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_proc_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[-1].item)->name)
              (yyvsp[-1].item)->set_name((yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 32818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1704:
#line 11450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe &&
                (!(lex->result= new (thd->mem_root) select_dumpvar(thd))))
              MYSQL_YYABORT;
          }
#line 32829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1705:
#line 11457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1707:
#line 11462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1708:
#line 11466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->result)
            {
              if ((yyvsp[0].myvar) == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)Lex->result)->var_list.push_back((yyvsp[0].myvar), thd->mem_root);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(Lex->describe);
            }
          }
#line 32862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1709:
#line 11486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.myvar) = Lex->result ? new (thd->mem_root) my_var_user((yyvsp[0].lex_str)) : NULL;
          }
#line 32870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1710:
#line 11490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_variable *t;

            if (!Lex->spcont || !(t= Lex->spcont->find_variable((yyvsp[0].lex_str), false)))
              my_yyabort_error((ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str));
            (yyval.myvar) = Lex->result ? (new (thd->mem_root)
                                my_var_sp((yyvsp[0].lex_str), t->offset, t->type,
                                          Lex->sphead)) :
                                NULL;
          }
#line 32885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1711:
#line 11503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 32891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1712:
#line 11504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 32897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1713:
#line 11509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_select_into)
              my_yyabort_error((ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO"));
          }
#line 32906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1715:
#line 11518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange=
                    new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0)) ||
                !(lex->result=
                    new (thd->mem_root) select_export(thd, lex->exchange)))
              MYSQL_YYABORT;
          }
#line 32920 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1716:
#line 11528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 32926 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1718:
#line 11531 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result=
                      new (thd->mem_root) select_dump(thd, lex->exchange)))
                MYSQL_YYABORT;
            }
          }
#line 32943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1719:
#line 11544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 32951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1720:
#line 11555 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
#line 32961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1721:
#line 11561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->insert_list= (yyvsp[0].item_list);
          }
#line 32969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1722:
#line 11572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_TABLE, (yyvsp[-2].num), (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 32980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1723:
#line 11579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1724:
#line 11580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1725:
#line 11581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= (new (thd->mem_root)
                             Alter_drop(Alter_drop::KEY, (yyvsp[-3].lex_str).str, (yyvsp[-4].num)));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad, thd->mem_root);
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
#line 33013 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1726:
#line 11598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->set_command(SQLCOM_DROP_DB, (yyvsp[-1].object_ddl_options));
            lex->name= (yyvsp[0].lex_str);
          }
#line 33023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1727:
#line 11604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[-2].lex_str).str && check_db_name(&(yyvsp[-2].lex_str)))
               my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-3].object_ddl_options));
            spname= new (thd->mem_root) sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 33042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1728:
#line 11619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "FUNCTION"));
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->set_command(SQLCOM_DROP_FUNCTION, (yyvsp[-1].object_ddl_options));
            spname= new (thd->mem_root) sp_name(db, (yyvsp[0].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 33062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1729:
#line 11635 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE"));
            lex->set_command(SQLCOM_DROP_PROCEDURE, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 33074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1730:
#line 11643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_USER, (yyvsp[-2].object_ddl_options));
          }
#line 33082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1731:
#line 11647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_ROLE, (yyvsp[-2].object_ddl_options));
          }
#line 33090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1732:
#line 11651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_VIEW, (yyvsp[0].object_ddl_options));
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1733:
#line 11658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1734:
#line 11660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->set_command(SQLCOM_DROP_EVENT, (yyvsp[-1].object_ddl_options));
          }
#line 33116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1735:
#line 11665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->set_command(SQLCOM_DROP_TRIGGER, (yyvsp[-1].object_ddl_options));
            lex->spname= (yyvsp[0].spname);
          }
#line 33126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1736:
#line 11671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
#line 33135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1737:
#line 11676 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
#line 33144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1738:
#line 11681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_DROP_SERVER, (yyvsp[-1].object_ddl_options));
            Lex->server_options.reset((yyvsp[0].lex_str));
          }
#line 33153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1741:
#line 11694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1742:
#line 11705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
          }
#line 33179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1745:
#line 11723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1746:
#line 11734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
#line 33200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1747:
#line 11739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
#line 33209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1748:
#line 11747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_NONE);
        }
#line 33217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1749:
#line 11751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.object_ddl_options).set(DDL_options_st::OPT_IF_EXISTS);
        }
#line 33225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1750:
#line 11757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 33231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1751:
#line 11758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= HA_LEX_CREATE_TMP_TABLE; }
#line 33237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1752:
#line 11766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
#line 33248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1753:
#line 11774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-2].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
#line 33257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1754:
#line 11779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1755:
#line 11784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
#line 33274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1756:
#line 11791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-1].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
#line 33283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1757:
#line 11796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1758:
#line 11801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 33302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1759:
#line 11809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 33308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1760:
#line 11811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 33320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1761:
#line 11818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE; }
#line 33326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1762:
#line 11822 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= (yyvsp[0].lock_type); }
#line 33332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1763:
#line 11824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 33344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1764:
#line 11834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1765:
#line 11835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1766:
#line 11840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
#line 33367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1767:
#line 11848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1768:
#line 11849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1769:
#line 11850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1770:
#line 11852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!(lex->insert_list= new (thd->mem_root) List_item) ||
                lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1772:
#line 11863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 33402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1773:
#line 11864 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 33408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1774:
#line 11868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1775:
#line 11869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1776:
#line 11871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(0);}
#line 33426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1777:
#line 11872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1778:
#line 11874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 33438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1779:
#line 11875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1784:
#line 11890 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[-2].item), thd->mem_root) ||
                lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1785:
#line 11899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1786:
#line 11900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1787:
#line 11904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1788:
#line 11905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1789:
#line 11910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              if (!(Lex->insert_list= new (thd->mem_root) List_item))
                MYSQL_YYABORT;
          }
#line 33488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1790:
#line 11915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list, thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1791:
#line 11923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1793:
#line 11929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1794:
#line 11934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1795:
#line 11941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item);}
#line 33528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1796:
#line 11943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(thd, Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1798:
#line 11952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates= DUP_UPDATE; }
#line 33544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1800:
#line 11960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
#line 33555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1801:
#line 11968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[-4].lock_type));
          }
#line 33578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1802:
#line 11986 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1805:
#line 11996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-2].item)) || add_value_to_list(thd, (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1808:
#line 12009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[-2].item), thd->mem_root) || 
              lex->value_list.push_back((yyvsp[0].item), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 33604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1809:
#line 12018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 33610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1810:
#line 12019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 33616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1811:
#line 12026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
#line 33631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1813:
#line 12041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33646 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1814:
#line 12052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1815:
#line 12053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1816:
#line 12055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1817:
#line 12061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 33677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1818:
#line 12066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1819:
#line 12072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 33696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1824:
#line 12090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1825:
#line 12103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1826:
#line 12118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1827:
#line 12119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1828:
#line 12123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1829:
#line 12124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1830:
#line 12128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= OPTION_QUICK; }
#line 33760 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1831:
#line 12129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
#line 33766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1832:
#line 12130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 33772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1833:
#line 12135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1834:
#line 12146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 33799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1841:
#line 12170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CPU;
    }
#line 33807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1842:
#line 12174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
#line 33815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1843:
#line 12178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
#line 33823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1844:
#line 12182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
#line 33831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1845:
#line 12186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
#line 33839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1846:
#line 12190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_IPC;
    }
#line 33847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1847:
#line 12194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
#line 33855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1848:
#line 12198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
#line 33863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1849:
#line 12202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_ALL;
    }
#line 33871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1850:
#line 12209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= 0;
    }
#line 33879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1851:
#line 12213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= atoi((yyvsp[0].lex_str).str);
    }
#line 33887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1852:
#line 12222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->create_info.init();
          }
#line 33900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1853:
#line 12231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 33908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1854:
#line 12238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
#line 33919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1855:
#line 12245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
#line 33931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1856:
#line 12253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
#line 33943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1857:
#line 12261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
#line 33955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1858:
#line 12269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
#line 33967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1859:
#line 12277 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[-1].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
#line 33979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1860:
#line 12285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
#line 33990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1861:
#line 12292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ident= (yyvsp[0].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 34001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1862:
#line 12299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 34011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1863:
#line 12305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= (yyvsp[-1].db_type); }
#line 34017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1864:
#line 12307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= NULL; }
#line 34023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1865:
#line 12309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 34036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1866:
#line 12318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
#line 34044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1867:
#line 12322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
#line 34052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1868:
#line 12326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
#line 34061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1870:
#line 12332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
#line 34070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1872:
#line 12337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
#line 34083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1873:
#line 12346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
#line 34094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1874:
#line 12353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
#line 34103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1875:
#line 12358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
#line 34112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1876:
#line 12363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
#line 34121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1877:
#line 12368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("warning_count"); }
#line 34127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1878:
#line 12370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("error_count"); }
#line 34133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1879:
#line 12372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
#line 34139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1880:
#line 12374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
#line 34145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1881:
#line 12376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
#line 34151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1882:
#line 12378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              MYSQL_YYABORT;
          }
#line 34162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1883:
#line 12385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_STATUS))
              MYSQL_YYABORT;
          }
#line 34174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1884:
#line 12393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
#line 34180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1885:
#line 12395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_SESSION_VARIABLES))
              MYSQL_YYABORT;
          }
#line 34192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1886:
#line 12403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
#line 34203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1887:
#line 12410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
#line 34214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1888:
#line 12417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
#line 34225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1889:
#line 12424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[-1].lex_user);
          }
#line 34235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1890:
#line 12430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_command(SQLCOM_SHOW_CREATE_DB, (yyvsp[-1].object_ddl_options));
            Lex->name= (yyvsp[0].lex_str);
          }
#line 34244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1891:
#line 12435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
#line 34256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1892:
#line 12443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
#line 34268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1893:
#line 12451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
#line 34276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1894:
#line 12455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
#line 34285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1895:
#line 12460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= null_lex_str;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
#line 34296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1896:
#line 12467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
#line 34305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1897:
#line 12472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[0].spname);
          }
#line 34316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1898:
#line 12479 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[0].spname);
          }
#line 34327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1899:
#line 12486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[0].spname);
          }
#line 34337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1900:
#line 12492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 34348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1901:
#line 12499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 34359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1902:
#line 12506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 34368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1903:
#line 12511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 34377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1904:
#line 12516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
#line 34386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1905:
#line 12521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[0].item));
          }
#line 34397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1906:
#line 12528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             bool in_plugin;
             lex->sql_command= SQLCOM_SHOW_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-2].lex_str).str, &in_plugin);
             if (!table || !table->old_format || !in_plugin)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[-1].simple_string));
               MYSQL_YYABORT;
             }
             if (lex->wild && table->idx_field1 < 0)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             if (make_schema_select(thd, Lex->current_select, table))
               MYSQL_YYABORT;
           }
#line 34420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1907:
#line 12550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
#line 34426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1908:
#line 12552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
#line 34432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1909:
#line 12554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
#line 34438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1914:
#line 12568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 34444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1915:
#line 12569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].lex_str).str; }
#line 34450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1916:
#line 12573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=0; }
#line 34456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1917:
#line 12574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=1; }
#line 34462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1920:
#line 12583 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = 0; }
#line 34468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1921:
#line 12584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = (yyvsp[0].lex_str).str; }
#line 34474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1922:
#line 12588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = 4; /* skip magic number */ }
#line 34480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1923:
#line 12589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = (yyvsp[0].ulonglong_number); }
#line 34486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1924:
#line 12593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 34492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1925:
#line 12595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 34504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1926:
#line 12603 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->where= normalize_cond(thd, (yyvsp[0].item));
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
            (yyval.simple_string)= (yyvsp[-1].simple_string);
          }
#line 34515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1927:
#line 12614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[0].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 34530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1928:
#line 12625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 34538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1929:
#line 12629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_NORMAL; }
#line 34544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1930:
#line 12631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
#line 34553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1938:
#line 12652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->analyze_stmt= true;
          }
#line 34561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1939:
#line 12658 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_EXTENDED; }
#line 34567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1940:
#line 12659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_PARTITIONS; }
#line 34573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1941:
#line 12660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1942:
#line 12664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1943:
#line 12666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "JSON"))
              Lex->explain_json= true;
            else if (!my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, "TRADITIONAL"))
              DBUG_ASSERT(Lex->explain_json==false);
            else
              my_yyabort_error((ER_UNKNOWN_EXPLAIN_FORMAT, MYF(0), (yyvsp[0].lex_str).str));
          }
#line 34598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1944:
#line 12677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1945:
#line 12678 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->wild= (yyvsp[0].string); }
#line 34610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1946:
#line 12680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
#line 34622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1947:
#line 12694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 34633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1948:
#line 12701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1949:
#line 12706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
#line 34653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1950:
#line 12716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1952:
#line 12721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1953:
#line 12723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
#line 34679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1954:
#line 12736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[0].num); }
#line 34685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1955:
#line 12738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(thd, ER_NO_TABLES_USED);
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
#line 34698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1956:
#line 12745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1958:
#line 12751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1959:
#line 12756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ERROR_LOG; }
#line 34716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1960:
#line 12758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ENGINE_LOG; }
#line 34722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1961:
#line 12760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GENERAL_LOG; }
#line 34728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1962:
#line 12762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLOW_LOG; }
#line 34734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1963:
#line 12764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_BINARY_LOG; }
#line 34740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1964:
#line 12766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS"));
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
#line 34752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1965:
#line 12774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
#line 34758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1966:
#line 12776 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_HOSTS; }
#line 34764 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1967:
#line 12778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GRANT; }
#line 34770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1968:
#line 12780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name= empty_lex_str;
          }
#line 34779 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1969:
#line 12785 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_STATUS; }
#line 34785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1970:
#line 12787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
              my_yyabort_error((ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE"));
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
#line 34797 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1971:
#line 12795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_MASTER; }
#line 34803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1972:
#line 12797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_DES_KEY_FILE; }
#line 34809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1973:
#line 12799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_USER_RESOURCES; }
#line 34815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1974:
#line 12801 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_GENERIC;
             ST_SCHEMA_TABLE *table= find_schema_table(thd, (yyvsp[-1].lex_str).str);
             if (!table || !table->reset_table)
             {
               my_parse_error(thd, ER_SYNTAX_ERROR, (yyvsp[0].simple_string));
               MYSQL_YYABORT;
             }
             Lex->view_list.push_back((LEX_STRING*)
                                       thd->memdup(&(yyvsp[-1].lex_str), sizeof(LEX_STRING)),
                                       thd->mem_root);
           }
#line 34832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1975:
#line 12816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1976:
#line 12817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1977:
#line 12821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1978:
#line 12823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1982:
#line 12833 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->delete_gtid_domain, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 34864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1983:
#line 12839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= 0;}
#line 34870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1984:
#line 12840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= REFRESH_CHECKPOINT; }
#line 34876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1985:
#line 12844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
#line 34885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1986:
#line 12849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1989:
#line 12858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLAVE; }
#line 34897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1990:
#line 12860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 34903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1991:
#line 12862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->type|= REFRESH_MASTER;
             Lex->next_binlog_file_number= 0;
          }
#line 34912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1993:
#line 12867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE;}
#line 34918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1994:
#line 12871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= false; }
#line 34924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1995:
#line 12872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= true; }
#line 34930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1996:
#line 12876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1997:
#line 12878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->next_binlog_file_number = (yyvsp[0].ulong_num);
          }
#line 34944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1998:
#line 12885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
#line 34954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1999:
#line 12891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2001:
#line 12900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->to_log = (yyvsp[0].lex_str).str;
          }
#line 34968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2002:
#line 12904 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[0].item), thd->mem_root);
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
#line 34979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2003:
#line 12916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
#line 34991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2004:
#line 12924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->kill_signal= (killed_state) ((yyvsp[-2].num) | (yyvsp[-1].num));
          }
#line 34999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2005:
#line 12930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 35005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2006:
#line 12931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 35011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2007:
#line 12932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 35017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2008:
#line 12935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 35023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2009:
#line 12936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 35029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2010:
#line 12937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_QUERY; }
#line 35035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2011:
#line 12939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
#line 35044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2012:
#line 12947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->value_list.push_front((yyval.item), thd->mem_root);
         }
#line 35052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2013:
#line 12951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root);
            Lex->kill_type= KILL_TYPE_USER;
          }
#line 35061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2014:
#line 12959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
#line 35067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2015:
#line 12966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[0].lex_str).str;
          }
#line 35077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2016:
#line 12977 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[0].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
#line 35092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2017:
#line 12988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[-2].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new (thd->mem_root) sql_exchange((yyvsp[0].lex_str).str, 0, (yyvsp[-5].filetype))))
              MYSQL_YYABORT;
          }
#line 35106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2018:
#line 12998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[-9].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
#line 35120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2019:
#line 13008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 35126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2020:
#line 13012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2021:
#line 13016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_CSV; }
#line 35138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2022:
#line 13017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_XML; }
#line 35144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2023:
#line 13021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0;}
#line 35150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2024:
#line 13022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1;}
#line 35156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2025:
#line 13026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 35162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2026:
#line 13028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 35174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2027:
#line 13035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 35180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2028:
#line 13039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_ERROR; }
#line 35186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2029:
#line 13040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_REPLACE; }
#line 35192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2030:
#line 13041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 35198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2035:
#line 13056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[0].string);
          }
#line 35207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2036:
#line 13061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[0].string);
            lex->exchange->opt_enclosed= 1;
          }
#line 35218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2037:
#line 13068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[0].string);
          }
#line 35227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2038:
#line 13073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[0].string);
          }
#line 35236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2043:
#line 13091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[0].string);
          }
#line 35245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2044:
#line 13096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[0].string);
          }
#line 35254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2045:
#line 13103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2046:
#line 13105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->line_term = (yyvsp[0].string); }
#line 35266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2048:
#line 13110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[-1].lex_str).str);
          }
#line 35275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2049:
#line 13117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2050:
#line 13118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2051:
#line 13122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2052:
#line 13123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2053:
#line 13124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2054:
#line 13129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 35311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2055:
#line 13131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item), thd->mem_root); }
#line 35317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2056:
#line 13135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.item)= (yyvsp[0].item);}
#line 35323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2057:
#line 13137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param(thd, (yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2058:
#line 13145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2059:
#line 13146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2062:
#line 13156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[-4].item), thd->mem_root) || 
                lex->value_list.push_back((yyvsp[-1].item), thd->mem_root))
                MYSQL_YYABORT;
            (yyvsp[-1].item)->set_name_no_truncate((yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 35357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2063:
#line 13169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(thd, tmp.str, tmp.length,
                                                cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2064:
#line 13193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2065:
#line 13205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer(thd, (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length, (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2066:
#line 13212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string* item= (Item_string*) (yyvsp[-1].item);
            item->append((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length);
            }
          }
#line 35432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2067:
#line 13231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[0].lex_str).str,
                                             (yyvsp[0].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 35444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2068:
#line 13238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string)= (yyvsp[0].string); }
#line 35450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2069:
#line 13244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2070:
#line 13257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2071:
#line 13266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str,
                                                           (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2072:
#line 13282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
              my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));
            const char *query_start= lex->sphead ? lex->sphead->m_tmp_query
                                                 : thd->query();
            item= new (thd->mem_root) Item_param(thd, lip->get_tok_start() -
                                                      query_start);
            if (!((yyval.item_param)= item) || lex->param_list.push_back(item, thd->mem_root))
              my_yyabort_error((ER_OUT_OF_RESOURCES, MYF(0)));
          }
#line 35515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2073:
#line 13298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 35521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2074:
#line 13299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 35527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2075:
#line 13301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_num)->max_length++;
            (yyval.item)= (yyvsp[0].item_num)->neg(thd);
          }
#line 35536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2076:
#line 13308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 35542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2077:
#line 13309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 35548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2078:
#line 13310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2079:
#line 13312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item)= new (thd->mem_root) Item_null(thd);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
#line 35572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2080:
#line 13326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_int(thd, (char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2081:
#line 13332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_int(thd, (char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2082:
#line 13338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_hybrid(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2083:
#line 13344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_hex_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2084:
#line 13350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2085:
#line 13356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(thd, NULL, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(),
                                           (yyvsp[-1].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
#line 35641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2086:
#line 13374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2087:
#line 13384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int(thd, (yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2088:
#line 13394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2089:
#line 13400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 35692 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2090:
#line 13409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_float(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 35704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2091:
#line 13421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
#line 35714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2092:
#line 13427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
#line 35724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2093:
#line 13433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
#line 35734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2094:
#line 13448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2095:
#line 13449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2096:
#line 13454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 35759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2097:
#line 13463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[-4].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 35775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2098:
#line 13477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2099:
#line 13482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
                my_yyabort_error((ER_VIEW_SELECT_VARIABLE, MYF(0)));

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal(thd, (yyvsp[0].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, NullS, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 35828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2100:
#line 13524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2101:
#line 13529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, NullS, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2102:
#line 13545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2103:
#line 13550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[-2].lex_str).str[0]=='N' || (yyvsp[-2].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT"));

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
                my_yyabort_error((ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE"));

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool tmp_read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(thd, Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[0].lex_str).str,
                                            SELECT_ACL,
                                            tmp_read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[-2].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                   NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 35937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2104:
#line 13622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2105:
#line 13646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[-4].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(thd, Lex->current_context(),
                                                 schema,
                                                 (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(thd, Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2106:
#line 13675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2107:
#line 13677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-4].lex_str).str, table->db))
              my_yyabort_error((ER_WRONG_DB_NAME, MYF(0), (yyvsp[-4].lex_str).str));
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str,
                              table->table_name))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 36016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2108:
#line 13687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str, table->alias))
              my_yyabort_error((ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str));
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 36027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2109:
#line 13693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2110:
#line 13698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2111:
#line 13704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-2].lex_str), (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2112:
#line 13710 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* For Delphi */
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36064 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2113:
#line 13720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident((yyvsp[-1].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2114:
#line 13726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new (thd->mem_root) Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2115:
#line 13735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new (thd->mem_root) Table_ident(thd, db, (yyvsp[0].lex_str), 0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 36095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2116:
#line 13744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 36101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2117:
#line 13746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[0].lex_str).str,
                                                   (yyvsp[0].lex_str).str+(yyvsp[0].lex_str).length,
                                                   (yyvsp[0].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[0].lex_str).length)
              {
                ErrConvString err((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[0].lex_str);
            }
            else
            {
              if (thd->convert_with_error(system_charset_info, &(yyval.lex_str),
                                          thd->charset(), (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length))
                MYSQL_YYABORT;
            }
          }
#line 36130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2118:
#line 13774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 36145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2119:
#line 13788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
#line 36160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2120:
#line 13802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 36176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2121:
#line 13816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 36182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2122:
#line 13818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 36193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2123:
#line 13827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 36199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2124:
#line 13829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 36210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2125:
#line 13838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2126:
#line 13839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2127:
#line 13840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2128:
#line 13845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
#line 36245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2129:
#line 13858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[-2].lex_str); (yyval.lex_user)->host=(yyvsp[0].lex_str);
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
#line 36279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2130:
#line 13888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
#line 36291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2133:
#line 13900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           if ((yyvsp[0].lex_user)->user.str != current_user.str && (yyvsp[0].lex_user)->host.str == 0)
             (yyvsp[0].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[0].lex_user);
         }
#line 36301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2134:
#line 13909 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2135:
#line 13910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2136:
#line 13911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2137:
#line 13912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2138:
#line 13913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2139:
#line 13914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2140:
#line 13915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2141:
#line 13916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2142:
#line 13917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36355 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2143:
#line 13918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2144:
#line 13919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36367 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2145:
#line 13920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2146:
#line 13921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2147:
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2148:
#line 13923 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2149:
#line 13924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2150:
#line 13925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2151:
#line 13926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2152:
#line 13927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2153:
#line 13928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2154:
#line 13929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2155:
#line 13930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2156:
#line 13931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2157:
#line 13932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2158:
#line 13933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2159:
#line 13934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2160:
#line 13935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2161:
#line 13936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36469 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2162:
#line 13937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2163:
#line 13938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2164:
#line 13939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2165:
#line 13940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2166:
#line 13941 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36499 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2167:
#line 13942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2168:
#line 13943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2169:
#line 13944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2170:
#line 13945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36523 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2171:
#line 13946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2172:
#line 13947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2173:
#line 13948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2174:
#line 13949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2175:
#line 13950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2176:
#line 13951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2177:
#line 13952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2178:
#line 13953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2179:
#line 13954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2180:
#line 13955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2181:
#line 13956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2182:
#line 13957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2183:
#line 13958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2184:
#line 13959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2185:
#line 13960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36613 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2186:
#line 13961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36619 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2187:
#line 13962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2188:
#line 13963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2189:
#line 13964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36637 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2190:
#line 13965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2191:
#line 13966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2192:
#line 13967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2193:
#line 13968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2194:
#line 13969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2195:
#line 13979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2196:
#line 13980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2197:
#line 13981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2198:
#line 13982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2199:
#line 13983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2200:
#line 13984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2201:
#line 13985 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2202:
#line 13986 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2203:
#line 13987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2204:
#line 13988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2205:
#line 13989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2206:
#line 13990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2207:
#line 13991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2208:
#line 13992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2209:
#line 13993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2210:
#line 13994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2211:
#line 13995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2212:
#line 13996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2213:
#line 13997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2214:
#line 13998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2215:
#line 13999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2216:
#line 14000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2217:
#line 14001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2218:
#line 14002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2219:
#line 14003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2220:
#line 14004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2221:
#line 14005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2222:
#line 14006 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2223:
#line 14007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2224:
#line 14008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2225:
#line 14009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2226:
#line 14010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2227:
#line 14011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2228:
#line 14012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2229:
#line 14013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2230:
#line 14014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2231:
#line 14015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2232:
#line 14016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2233:
#line 14017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2234:
#line 14018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2235:
#line 14019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2236:
#line 14020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2237:
#line 14021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2238:
#line 14022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2239:
#line 14023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2240:
#line 14024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36943 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2241:
#line 14025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2242:
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2243:
#line 14027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2244:
#line 14028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2245:
#line 14033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2246:
#line 14034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2247:
#line 14035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2248:
#line 14036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2249:
#line 14037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2250:
#line 14038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2251:
#line 14039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2252:
#line 14040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2253:
#line 14041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2254:
#line 14042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2255:
#line 14043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2256:
#line 14044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2257:
#line 14045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2258:
#line 14046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2259:
#line 14047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2260:
#line 14048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2261:
#line 14049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2262:
#line 14050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2263:
#line 14051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2264:
#line 14052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2265:
#line 14053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2266:
#line 14054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2267:
#line 14055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2268:
#line 14056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2269:
#line 14057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2270:
#line 14058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2271:
#line 14059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2272:
#line 14060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2273:
#line 14061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2274:
#line 14062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2275:
#line 14063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2276:
#line 14064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2277:
#line 14065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2278:
#line 14066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2279:
#line 14067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2280:
#line 14068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2281:
#line 14069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2282:
#line 14070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2283:
#line 14071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2284:
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2285:
#line 14073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2286:
#line 14074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2287:
#line 14075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37225 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2288:
#line 14076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2289:
#line 14077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2290:
#line 14078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2291:
#line 14079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2292:
#line 14080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2293:
#line 14081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2294:
#line 14082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2295:
#line 14083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2296:
#line 14084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2297:
#line 14085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2298:
#line 14086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2299:
#line 14087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37297 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2300:
#line 14088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2301:
#line 14089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2302:
#line 14090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37315 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2303:
#line 14091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2304:
#line 14092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2305:
#line 14093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2306:
#line 14094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2307:
#line 14095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2308:
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2309:
#line 14097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2310:
#line 14098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2311:
#line 14099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2312:
#line 14100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2313:
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2314:
#line 14102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2315:
#line 14103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2316:
#line 14104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37399 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2317:
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2318:
#line 14106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2319:
#line 14107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2320:
#line 14108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2321:
#line 14109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2322:
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2323:
#line 14111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2324:
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2325:
#line 14113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37453 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2326:
#line 14114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2327:
#line 14115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2328:
#line 14116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2329:
#line 14117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2330:
#line 14118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2331:
#line 14119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2332:
#line 14120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2333:
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2334:
#line 14122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2335:
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2336:
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2337:
#line 14125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2338:
#line 14126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2339:
#line 14127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2340:
#line 14128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2341:
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2342:
#line 14130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2343:
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2344:
#line 14132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2345:
#line 14133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2346:
#line 14134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2347:
#line 14135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2348:
#line 14136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2349:
#line 14137 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2350:
#line 14138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2351:
#line 14139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2352:
#line 14140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2353:
#line 14141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2354:
#line 14142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2355:
#line 14143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2356:
#line 14144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37639 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2357:
#line 14145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2358:
#line 14146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2359:
#line 14147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2360:
#line 14148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2361:
#line 14149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2362:
#line 14150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2363:
#line 14151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2364:
#line 14152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2365:
#line 14153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2366:
#line 14154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2367:
#line 14155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2368:
#line 14156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2369:
#line 14157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2370:
#line 14158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2371:
#line 14159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2372:
#line 14160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2373:
#line 14161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2374:
#line 14162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2375:
#line 14163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2376:
#line 14164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2377:
#line 14165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2378:
#line 14166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2379:
#line 14167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2380:
#line 14168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2381:
#line 14169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2382:
#line 14170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2383:
#line 14171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2384:
#line 14172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2385:
#line 14173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2386:
#line 14174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37819 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2387:
#line 14175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2388:
#line 14176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37831 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2389:
#line 14177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37837 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2390:
#line 14178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37843 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2391:
#line 14179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37849 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2392:
#line 14180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2393:
#line 14181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2394:
#line 14182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2395:
#line 14183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2396:
#line 14184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2397:
#line 14185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2398:
#line 14186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2399:
#line 14187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2400:
#line 14188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2401:
#line 14189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2402:
#line 14190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2403:
#line 14191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2404:
#line 14192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2405:
#line 14193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2406:
#line 14194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2407:
#line 14195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2408:
#line 14196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2409:
#line 14197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2410:
#line 14198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2411:
#line 14199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2412:
#line 14200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37975 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2413:
#line 14201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2414:
#line 14202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37987 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2415:
#line 14203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2416:
#line 14204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2417:
#line 14205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38005 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2418:
#line 14206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2419:
#line 14207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2420:
#line 14208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38023 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2421:
#line 14209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2422:
#line 14210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2423:
#line 14211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38041 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2424:
#line 14212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38047 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2425:
#line 14213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2426:
#line 14214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2427:
#line 14215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2428:
#line 14216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2429:
#line 14217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2430:
#line 14218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2431:
#line 14219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2432:
#line 14220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2433:
#line 14221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2434:
#line 14222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2435:
#line 14223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38113 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2436:
#line 14224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2437:
#line 14225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2438:
#line 14226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2439:
#line 14227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2440:
#line 14228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2441:
#line 14229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2442:
#line 14230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2443:
#line 14231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2444:
#line 14232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38167 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2445:
#line 14233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2446:
#line 14234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2447:
#line 14235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2448:
#line 14236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2449:
#line 14237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2450:
#line 14238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2451:
#line 14239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2452:
#line 14240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2453:
#line 14241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2454:
#line 14242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2455:
#line 14243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2456:
#line 14244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2457:
#line 14245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2458:
#line 14246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2459:
#line 14247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2460:
#line 14248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2461:
#line 14249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2462:
#line 14250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2463:
#line 14251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2464:
#line 14252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2465:
#line 14253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2466:
#line 14254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2467:
#line 14255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2468:
#line 14256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2469:
#line 14257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2470:
#line 14258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2471:
#line 14259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2472:
#line 14260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2473:
#line 14261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2474:
#line 14262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2475:
#line 14263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2476:
#line 14264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2477:
#line 14265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2478:
#line 14266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2479:
#line 14267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2480:
#line 14268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2481:
#line 14269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2482:
#line 14270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2483:
#line 14271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2484:
#line 14272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38407 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2485:
#line 14273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2486:
#line 14274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2487:
#line 14275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2488:
#line 14276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2489:
#line 14277 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2490:
#line 14278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2491:
#line 14279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2492:
#line 14280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2493:
#line 14281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2494:
#line 14282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2495:
#line 14283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2496:
#line 14284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2497:
#line 14285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2498:
#line 14286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2499:
#line 14287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2500:
#line 14288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2501:
#line 14289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2502:
#line 14290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2503:
#line 14291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2504:
#line 14303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2505:
#line 14313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2506:
#line 14315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->option_type= OPT_SESSION;
            lex->sql_command= SQLCOM_SET_OPTION;
            lex->autocommit= 0;
          }
#line 38553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2507:
#line 14323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->table_or_sp_used())
              my_yyabort_error((ER_SUBQUERIES_NOT_SUPPORTED, MYF(0), "SET STATEMENT"));
            lex->stmt_var_list= lex->var_list;
            lex->var_list.empty();
          }
#line 38565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2508:
#line 14331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2511:
#line 14346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 38580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2513:
#line 14352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= OPT_DEFAULT;
          }
#line 38588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2514:
#line 14356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 38597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2515:
#line 14361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 38605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2517:
#line 14371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2519:
#line 14377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2522:
#line 14391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38631 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2523:
#line 14395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2524:
#line 14400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2525:
#line 14404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2526:
#line 14413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 38665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2529:
#line 14421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2530:
#line 14422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2531:
#line 14423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2532:
#line 14427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2533:
#line 14428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2534:
#line 14429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2535:
#line 14430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2536:
#line 14434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_DEFAULT; }
#line 38713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2537:
#line 14435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2538:
#line 14436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2539:
#line 14437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2540:
#line 14443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var && (yyvsp[-2].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
          }
#line 38755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2541:
#line 14467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[-2].variable).base_name, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[-2].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[-2].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
          }
#line 38785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2542:
#line 14493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var(thd, (yyvsp[-2].lex_str), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new (thd->mem_root) set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var, thd->mem_root);
          }
#line 38800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2543:
#line 14504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            struct sys_var_with_base tmp= (yyvsp[-2].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[-3].var_type), (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 38816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2544:
#line 14516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[0].charset) ? (yyvsp[0].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= (new (thd->mem_root)
                  set_var_collation_client(cs2,
                                           thd->variables.collation_database,
                                            cs2));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 38834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2545:
#line 14530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(thd, ER_SYNTAX_ERROR);

            MYSQL_YYABORT;
          }
#line 38853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2546:
#line 14545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[-1].charset) ? (yyvsp[-1].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[0].charset) ? (yyvsp[0].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new (thd->mem_root) set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 38876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2547:
#line 14564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            LEX_USER *user;
            if (!(user=(LEX_USER *) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role(user,
                                                             (yyvsp[0].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 38897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2548:
#line 14581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_default_role *var= (new (thd->mem_root)
                                        set_var_default_role((yyvsp[0].lex_user), (yyvsp[-2].lex_user)->user));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 38913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2549:
#line 14593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_role *var= new (thd->mem_root) set_var_role((yyvsp[0].lex_str));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 38925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2550:
#line 14601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_password *var= (new (thd->mem_root)
                                    set_var_password(lex->definer));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
            lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 38941 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2551:
#line 14617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[0].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
          }
#line 38971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2552:
#line 14643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[-2].lex_str)))
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              if ((yyvsp[-2].lex_str).str[0]=='O' || (yyvsp[-2].lex_str).str[0]=='o')
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", ""));
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
                my_yyabort_error((ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after "));
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[-2].lex_str);
            }
          }
#line 39012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2553:
#line 14680 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
#line 39027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2558:
#line 14701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_read_only"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 39046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2559:
#line 14719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int(thd, (int32) (yyvsp[0].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= (new (thd->mem_root)
                           set_var(thd, lex->option_type,
                                   find_sys_var(thd, "tx_isolation"),
                                   &null_lex_str,
                                   item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var, thd->mem_root);
          }
#line 39065 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2560:
#line 14736 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 39071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2561:
#line 14737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 39077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2562:
#line 14741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
#line 39083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2563:
#line 14742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
#line 39089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2564:
#line 14743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
#line 39095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2565:
#line 14744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
#line 39101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2566:
#line 14749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw= { C_STRING_WITH_LEN("password") };

            if (spc && spc->find_variable(pw, false))
              my_yyabort_error((ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str));
            if (!(lex->definer= (LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            lex->definer->user= current_user;
            lex->definer->plugin= empty_lex_str;
            lex->definer->auth= empty_lex_str;
          }
#line 39119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2567:
#line 14762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer= (yyvsp[-1].lex_user); }
#line 39125 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2568:
#line 14766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwhash= (yyvsp[0].lex_str);}
#line 39131 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2569:
#line 14767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer->pwtext= (yyvsp[-1].lex_str); }
#line 39137 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2570:
#line 14769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer->pwtext= (yyvsp[-1].lex_str);
            Lex->definer->pwhash.str= Item_func_password::alloc(thd,
                                   (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length, Item_func_password::OLD);
            Lex->definer->pwhash.length=  SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
          }
#line 39148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2571:
#line 14778 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 39154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2572:
#line 14779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=0; }
#line 39160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2573:
#line 14781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2574:
#line 14787 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2575:
#line 14793 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys(thd, "binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2576:
#line 14804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "LOCK"));
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
#line 39202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2577:
#line 14812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2578:
#line 14816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 39214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2579:
#line 14817 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 39220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2582:
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[0].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[-1].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
#line 39236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2583:
#line 14841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ_NO_INSERT; }
#line 39242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2584:
#line 14842 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_DEFAULT; }
#line 39248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2585:
#line 14844 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 39256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2586:
#line 14848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
#line 39262 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2587:
#line 14849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ; }
#line 39268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2588:
#line 14854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "UNLOCK"));
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
#line 39280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2589:
#line 14862 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2590:
#line 14871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[0].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
#line 39299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2591:
#line 14880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 39312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2592:
#line 14889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
              my_yyabort_error((ER_SP_BADSTATEMENT, MYF(0), "HANDLER"));
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int(thd, (int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 39333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2593:
#line 14906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
#line 39348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2594:
#line 14919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= null_lex_str; }
#line 39354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2595:
#line 14920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= (yyvsp[-1].lex_str); }
#line 39360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2596:
#line 14924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 39366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2597:
#line 14925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 39372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2598:
#line 14929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 39378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2599:
#line 14930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 39384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2600:
#line 14931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RPREV;  }
#line 39390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2601:
#line 14932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RLAST;  }
#line 39396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2602:
#line 14934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[0].ha_rkey_mode);
            if (!(lex->insert_list= new (thd->mem_root) List_item))
              MYSQL_YYABORT;
          }
#line 39408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2603:
#line 14942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2604:
#line 14946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
#line 39420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2605:
#line 14947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
#line 39426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2606:
#line 14948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
#line 39432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2607:
#line 14949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
#line 39438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2608:
#line 14950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
#line 39444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2609:
#line 14957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2610:
#line 14962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
#line 39460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2611:
#line 14968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 39475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2612:
#line 14979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 39490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2613:
#line 14990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
#line 39498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2614:
#line 14994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-2].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 39509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2615:
#line 15001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[-2].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39519 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2616:
#line 15010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 39525 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2617:
#line 15012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 39531 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2618:
#line 15017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2619:
#line 15023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
#line 39547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2620:
#line 15030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 39562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2621:
#line 15042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 39577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2622:
#line 15053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-3].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 39588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2623:
#line 15060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[-3].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2624:
#line 15071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = 0; }
#line 39606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2625:
#line 15072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = (yyvsp[0].lex_user); }
#line 39612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2626:
#line 15075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; }
#line 39618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2627:
#line 15076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; }
#line 39624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2628:
#line 15080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2629:
#line 15085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 39642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2630:
#line 15093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->reset_auth();
          }
#line 39653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2631:
#line 15103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[0].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            (yyvsp[0].lex_str).str[(yyvsp[0].lex_str).length] = '\0';
            if ((yyvsp[0].lex_str).length == 0)
              my_yyabort_error((ER_INVALID_ROLE, MYF(0), ""));
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->reset_auth();

            if (check_string_char_length(&(yyval.lex_user)->user, ER_USERNAME,
                                         username_char_length,
                                         cs, 0))
              MYSQL_YYABORT;
          }
#line 39676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2635:
#line 15130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2636:
#line 15132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
#line 39691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2641:
#line 15150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = SELECT_ACL;}
#line 39697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2642:
#line 15151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2643:
#line 15153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = INSERT_ACL;}
#line 39709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2644:
#line 15154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2645:
#line 15156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = UPDATE_ACL; }
#line 39721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2646:
#line 15157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39727 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2647:
#line 15159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = REFERENCES_ACL;}
#line 39733 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2648:
#line 15160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2649:
#line 15161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DELETE_ACL;}
#line 39745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2650:
#line 15162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39751 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2651:
#line 15163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= INDEX_ACL;}
#line 39757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2652:
#line 15164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_ACL;}
#line 39763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2653:
#line 15165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_ACL;}
#line 39769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2654:
#line 15166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DROP_ACL;}
#line 39775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2655:
#line 15167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EXECUTE_ACL;}
#line 39781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2656:
#line 15168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= RELOAD_ACL;}
#line 39787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2657:
#line 15169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHUTDOWN_ACL;}
#line 39793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2658:
#line 15170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= PROCESS_ACL;}
#line 39799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2659:
#line 15171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= FILE_ACL;}
#line 39805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2660:
#line 15172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 39811 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2661:
#line 15173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_DB_ACL;}
#line 39817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2662:
#line 15174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SUPER_ACL;}
#line 39823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2663:
#line 15175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TMP_ACL;}
#line 39829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2664:
#line 15176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= LOCK_TABLES_ACL; }
#line 39835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2665:
#line 15177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_SLAVE_ACL; }
#line 39841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2666:
#line 15178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_CLIENT_ACL; }
#line 39847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2667:
#line 15179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_VIEW_ACL; }
#line 39853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2668:
#line 15180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_VIEW_ACL; }
#line 39859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2669:
#line 15181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_PROC_ACL; }
#line 39865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2670:
#line 15182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_PROC_ACL; }
#line 39871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2671:
#line 15183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_USER_ACL; }
#line 39877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2672:
#line 15184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EVENT_ACL;}
#line 39883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2673:
#line 15185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= TRIGGER_ACL; }
#line 39889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2674:
#line 15186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
#line 39895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2675:
#line 15190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39901 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2676:
#line 15191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2679:
#line 15201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "SUBJECT"));
            lex->x509_subject=(yyvsp[0].lex_str).str;
          }
#line 39918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2680:
#line 15208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "ISSUER"));
            lex->x509_issuer=(yyvsp[0].lex_str).str;
          }
#line 39929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2681:
#line 15215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
              my_yyabort_error((ER_DUP_ARGUMENT, MYF(0), "CIPHER"));
            lex->ssl_cipher=(yyvsp[0].lex_str).str;
          }
#line 39940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2682:
#line 15225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 39955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2683:
#line 15236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[-2].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 39968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2684:
#line 15245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
              my_yyabort_error((ER_ILLEGAL_GRANT_FOR_TABLE, MYF(0)));
          }
#line 39981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2685:
#line 15254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(thd, (yyvsp[0].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
#line 39994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2686:
#line 15266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40003 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2687:
#line 15271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2688:
#line 15279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2689:
#line 15284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2690:
#line 15292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2691:
#line 15297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user), thd->mem_root))
              MYSQL_YYABORT;
          }
#line 40048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2696:
#line 15308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->pwtext= (yyvsp[0].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
          }
#line 40059 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2697:
#line 15315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.lex_user)= (yyvsp[-4].lex_user); 
            (yyvsp[-4].lex_user)->pwhash= (yyvsp[0].lex_str);
          }
#line 40068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2698:
#line 15320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->plugin= (yyvsp[0].lex_str);
            (yyvsp[-3].lex_user)->auth= empty_lex_str;
          }
#line 40078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2699:
#line 15326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-5].lex_user);
            (yyvsp[-5].lex_user)->plugin= (yyvsp[-2].lex_str);
            (yyvsp[-5].lex_user)->auth= (yyvsp[0].lex_str);
          }
#line 40088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2700:
#line 15332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 40094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2701:
#line 15337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
#line 40103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2705:
#line 15351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *new_str= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,(yyvsp[0].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= (new (thd->mem_root)
                                LEX_COLUMN(*new_str,lex->which_columns));
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col, thd->mem_root);
            }
          }
#line 40133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2707:
#line 15381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
#line 40141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2708:
#line 15385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
#line 40149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2709:
#line 15389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
#line 40157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2710:
#line 15393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
#line 40165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2711:
#line 15399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2713:
#line 15404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2714:
#line 15405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 40183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2715:
#line 15409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2716:
#line 15410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2717:
#line 15414 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 40201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2718:
#line 15416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
#line 40211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2719:
#line 15422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
#line 40221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2720:
#line 15428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
#line 40231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2721:
#line 15434 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[0].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
#line 40241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2722:
#line 15440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.max_statement_time= (yyvsp[0].item_num)->val_real();
            lex->mqh.specified_limits|= USER_RESOURCES::MAX_STATEMENT_TIME;
          }
#line 40251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2723:
#line 15449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
#line 40261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2724:
#line 15454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2725:
#line 15459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_COMPOUND;
            Lex->sphead->set_stmt_end(thd);
            Lex->sphead->restore_thd_mem_root(thd);
          }
#line 40277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2726:
#line 15467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 40283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2727:
#line 15468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2728:
#line 15472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2729:
#line 15473 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2730:
#line 15478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 40307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2731:
#line 15479 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 40313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2732:
#line 15480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 40319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2733:
#line 15485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 40325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2734:
#line 15486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 40331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2735:
#line 15487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 40337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2736:
#line 15491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40343 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2737:
#line 15492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2738:
#line 15497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 40362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2739:
#line 15509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 40375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2740:
#line 15519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2741:
#line 15528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2742:
#line 15537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2743:
#line 15550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2745:
#line 15556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 40420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2746:
#line 15561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
#line 40432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2748:
#line 15572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2749:
#line 15576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 40444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2750:
#line 15577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2751:
#line 15581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
#line 40468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2752:
#line 15595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
#line 40477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2755:
#line 15607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 40483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2756:
#line 15608 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 40489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2757:
#line 15609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0; }
#line 40495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2758:
#line 15615 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 40503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2759:
#line 15620 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 40511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2761:
#line 15629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 40520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2762:
#line 15634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[-4].select_lex);
          }
#line 40529 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2763:
#line 15643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.select_lex)= (yyvsp[-1].select_lex);
          }
#line 40537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2764:
#line 15649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(thd, ER_SYNTAX_ERROR);
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
#line 40560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2765:
#line 15670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
#line 40587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2770:
#line 15705 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_STRAIGHT_JOIN; }
#line 40593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2771:
#line 15707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
#line 40605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2772:
#line 15714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_DISTINCT; }
#line 40611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2773:
#line 15715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_SMALL_RESULT; }
#line 40617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2774:
#line 15716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_BIG_RESULT; }
#line 40623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2775:
#line 15718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
#line 40633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2776:
#line 15724 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
#line 40643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2777:
#line 15729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_ALL; }
#line 40649 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2778:
#line 15740 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2779:
#line 15742 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2780:
#line 15744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2794:
#line 15777 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
#line 40682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2795:
#line 15791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->definer= (yyvsp[0].lex_user);
            Lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
            Lex->ssl_cipher= Lex->x509_subject= Lex->x509_issuer= 0;
            bzero(&(Lex->mqh), sizeof(Lex->mqh));
          }
#line 40693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2796:
#line 15807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
#line 40699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2797:
#line 15809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
#line 40705 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2798:
#line 15811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
#line 40711 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2799:
#line 15816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
#line 40717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2800:
#line 15818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
#line 40723 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2801:
#line 15820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
#line 40729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2802:
#line 15825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
#line 40747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2804:
#line 15843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2806:
#line 15849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 40763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2807:
#line 15855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->view_list.push_back((LEX_STRING*)
                                     thd->memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)),
                                     thd->mem_root);
          }
#line 40773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2808:
#line 15863 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
#line 40786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2809:
#line 15872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
#line 40803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2812:
#line 15893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_NONE; }
#line 40809 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2813:
#line 15895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 40815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2814:
#line 15897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 40821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2815:
#line 15899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
#line 40827 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2816:
#line 15912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[0].object_ddl_options)))
              MYSQL_YYABORT;
          }
#line 40836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2817:
#line 15921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
#line 40844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2818:
#line 15927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
#line 40852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2819:
#line 15932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $17 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER"));

            lex->stmt_definition_begin= (yyvsp[-14].simple_string);
            lex->ident.str= (yyvsp[-7].simple_string);
            lex->ident.length= (yyvsp[-3].simple_string) - (yyvsp[-7].simple_string);
            lex->spname= (yyvsp[-11].spname);

            if (!make_sp_head(thd, (yyvsp[-11].spname), TYPE_ENUM_TRIGGER))
              MYSQL_YYABORT;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 40874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2820:
#line 15950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $19 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-7].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
#line 40902 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2821:
#line 15982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_AGGREGATE; }
#line 40908 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2822:
#line 15983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { thd->lex->udf.type= UDFTYPE_FUNCTION;  }
#line 40914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2823:
#line 15989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (lex->add_create_options_with_check((yyvsp[-5].object_ddl_options)))
              MYSQL_YYABORT;
            if (is_native_function(thd, & (yyvsp[-4].lex_str)))
              my_yyabort_error((ER_NATIVE_FCT_NAME_COLLISION, MYF(0), (yyvsp[-4].lex_str).str));
            lex->sql_command= SQLCOM_CREATE_FUNCTION;
            lex->udf.name= (yyvsp[-4].lex_str);
            lex->udf.returns= (Item_result) (yyvsp[-2].num);
            lex->udf.dl= (yyvsp[0].lex_str).str;
          }
#line 40930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2824:
#line 16007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $5 */
            LEX *lex= Lex;
            Lex_input_stream *lip= YYLIP;
            const char* tmp_param_begin;

            if (lex->add_create_options_with_check((yyvsp[-2].object_ddl_options)))
              MYSQL_YYABORT;
            lex->spname= (yyvsp[-1].spname);

            if (lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION"));

            if (!make_sp_head(thd, (yyvsp[-1].spname), TYPE_ENUM_FUNCTION))
              MYSQL_YYABORT;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 40954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2825:
#line 16028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 40962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2826:
#line 16032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            LEX *lex= Lex;
            lex->init_last_field(&lex->sphead->m_return_field_def, NULL,
                                 thd->variables.collation_database);
          }
#line 40972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2827:
#line 16038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $12 */
            if (Lex->sphead->fill_field_definition(thd, Lex, (yyvsp[0].field_type),
                                                   Lex->last_field))
              MYSQL_YYABORT;
          }
#line 40982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2828:
#line 16044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 40993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2829:
#line 16051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
              my_yyabort_error((ER_SP_NORETURN, MYF(0), sp->m_qname.str));
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to
                occur before the call), the warning will provide a hint
                explaining the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER_THD(thd, ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
#line 41046 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2830:
#line 16103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->add_create_options_with_check((yyvsp[-1].object_ddl_options)))
              MYSQL_YYABORT;

            if (Lex->sphead)
              my_yyabort_error((ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE"));

            if (!make_sp_head(thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE))
              MYSQL_YYABORT;
            Lex->spname= (yyvsp[0].spname);
          }
#line 41062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2831:
#line 16115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 41074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2832:
#line 16124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 41082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2833:
#line 16128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
#line 41090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2834:
#line 16132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
#line 41103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2835:
#line 16146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
#line 41111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2836:
#line 16150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
#line 41119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2837:
#line 16154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
#line 41127 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2838:
#line 16158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
#line 41135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2839:
#line 16162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
#line 41143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2840:
#line 16166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
#line 41151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2841:
#line 16173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[0].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(), 0, 0);
          }
#line 41162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2842:
#line 16180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].string)->length() <= MAXGTRIDSIZE && (yyvsp[0].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length(), (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length());
          }
#line 41173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2843:
#line 16187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].string)->length() <= MAXGTRIDSIZE && (yyvsp[-2].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[0].ulong_num), (yyvsp[-4].string)->ptr(), (yyvsp[-4].string)->length(), (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length());
          }
#line 41184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2844:
#line 16196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2845:
#line 16197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2846:
#line 16201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2847:
#line 16202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_JOIN;        }
#line 41208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2848:
#line 16203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_RESUME;      }
#line 41214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2849:
#line 16207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2850:
#line 16208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_ONE_PHASE;   }
#line 41226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2851:
#line 16213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2852:
#line 16215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_SUSPEND;     }
#line 41238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2854:
#line 16220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2855:
#line 16221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_FOR_MIGRATE; }
#line 41250 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2856:
#line 16226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[-2].lex_str);
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2857:
#line 16233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2858:
#line 16243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[0].lex_str);
          }
#line 41282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2859:
#line 16249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2860:
#line 16260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	  YYERROR;
	}
#line 41301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;


#line 41305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (thd, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, thd);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, thd);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
